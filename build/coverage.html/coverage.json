{"/home/travis/build/npmtest/node-npmtest-xregexp/test.js":{"path":"/home/travis/build/npmtest/node-npmtest-xregexp/test.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":1,"12":1,"13":1,"14":1,"15":2,"16":2,"17":2,"18":2,"19":1,"20":1,"21":2,"22":2,"23":2,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":2,"40":2,"41":1,"42":2,"43":2,"44":1,"45":2,"46":2,"47":1,"48":2,"49":2,"50":1,"51":1,"52":1,"53":1,"54":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[1,1],"5":[1,1],"6":[1,1],"7":[1,1],"8":[1,1],"9":[1,1],"10":[1,1,1],"11":[1,1],"12":[1,1],"13":[1,1],"14":[1,1],"15":[1,1],"16":[1,1],"17":[1,1]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":1,"7":1,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}},"4":{"name":"(anonymous_4)","line":61,"loc":{"start":{"line":61,"column":5},"end":{"line":61,"column":17}}},"5":{"name":"(anonymous_5)","line":82,"loc":{"start":{"line":82,"column":5},"end":{"line":82,"column":17}}},"6":{"name":"(anonymous_6)","line":91,"loc":{"start":{"line":91,"column":77},"end":{"line":94,"column":10}}},"7":{"name":"(anonymous_7)","line":112,"loc":{"start":{"line":112,"column":83},"end":{"line":115,"column":10}},"skip":true},"8":{"name":"(anonymous_8)","line":123,"loc":{"start":{"line":123,"column":77},"end":{"line":126,"column":10}},"skip":true},"9":{"name":"(anonymous_9)","line":139,"loc":{"start":{"line":139,"column":12},"end":{"line":139,"column":40}},"skip":true},"10":{"name":"(anonymous_10)","line":147,"loc":{"start":{"line":147,"column":77},"end":{"line":150,"column":10}},"skip":true},"11":{"name":"(anonymous_11)","line":158,"loc":{"start":{"line":158,"column":83},"end":{"line":161,"column":10}},"skip":true},"12":{"name":"(anonymous_12)","line":169,"loc":{"start":{"line":169,"column":79},"end":{"line":172,"column":10}},"skip":true},"13":{"name":"(anonymous_13)","line":180,"loc":{"start":{"line":180,"column":75},"end":{"line":183,"column":10}},"skip":true}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":195,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":56,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":40,"column":8},"end":{"line":53,"column":9}},"11":{"start":{"line":43,"column":12},"end":{"line":46,"column":14}},"12":{"start":{"line":47,"column":12},"end":{"line":47,"column":18}},"13":{"start":{"line":50,"column":12},"end":{"line":51,"column":33}},"14":{"start":{"line":52,"column":12},"end":{"line":52,"column":18}},"15":{"start":{"line":55,"column":8},"end":{"line":55,"column":35}},"16":{"start":{"line":61,"column":4},"end":{"line":63,"column":9}},"17":{"start":{"line":62,"column":8},"end":{"line":62,"column":15}},"18":{"start":{"line":64,"column":4},"end":{"line":77,"column":5}},"19":{"start":{"line":70,"column":8},"end":{"line":70,"column":14}},"20":{"start":{"line":76,"column":8},"end":{"line":76,"column":14}},"21":{"start":{"line":82,"column":4},"end":{"line":84,"column":9}},"22":{"start":{"line":83,"column":8},"end":{"line":83,"column":15}},"23":{"start":{"line":85,"column":4},"end":{"line":194,"column":5}},"24":{"start":{"line":91,"column":8},"end":{"line":99,"column":10}},"25":{"start":{"line":98,"column":12},"end":{"line":98,"column":35}},"26":{"start":{"line":102,"column":8},"end":{"line":104,"column":63}},"27":{"start":{"line":105,"column":8},"end":{"line":105,"column":14}},"28":{"start":{"line":112,"column":8},"end":{"line":121,"column":10},"skip":true},"29":{"start":{"line":119,"column":12},"end":{"line":119,"column":55},"skip":true},"30":{"start":{"line":120,"column":12},"end":{"line":120,"column":48},"skip":true},"31":{"start":{"line":123,"column":8},"end":{"line":136,"column":10},"skip":true},"32":{"start":{"line":130,"column":12},"end":{"line":130,"column":76},"skip":true},"33":{"start":{"line":131,"column":12},"end":{"line":131,"column":73},"skip":true},"34":{"start":{"line":132,"column":12},"end":{"line":132,"column":74},"skip":true},"35":{"start":{"line":133,"column":12},"end":{"line":133,"column":79},"skip":true},"36":{"start":{"line":134,"column":12},"end":{"line":134,"column":25},"skip":true},"37":{"start":{"line":135,"column":12},"end":{"line":135,"column":45},"skip":true},"38":{"start":{"line":138,"column":8},"end":{"line":145,"column":14},"skip":true},"39":{"start":{"line":143,"column":16},"end":{"line":143,"column":29},"skip":true},"40":{"start":{"line":144,"column":16},"end":{"line":144,"column":55},"skip":true},"41":{"start":{"line":147,"column":8},"end":{"line":156,"column":10},"skip":true},"42":{"start":{"line":154,"column":12},"end":{"line":154,"column":25},"skip":true},"43":{"start":{"line":155,"column":12},"end":{"line":155,"column":45},"skip":true},"44":{"start":{"line":158,"column":8},"end":{"line":167,"column":10},"skip":true},"45":{"start":{"line":165,"column":12},"end":{"line":165,"column":25},"skip":true},"46":{"start":{"line":166,"column":12},"end":{"line":166,"column":48},"skip":true},"47":{"start":{"line":169,"column":8},"end":{"line":178,"column":10},"skip":true},"48":{"start":{"line":176,"column":12},"end":{"line":176,"column":25},"skip":true},"49":{"start":{"line":177,"column":12},"end":{"line":177,"column":46},"skip":true},"50":{"start":{"line":180,"column":8},"end":{"line":189,"column":10},"skip":true},"51":{"start":{"line":187,"column":12},"end":{"line":187,"column":94},"skip":true},"52":{"start":{"line":188,"column":12},"end":{"line":188,"column":48},"skip":true},"53":{"start":{"line":192,"column":8},"end":{"line":192,"column":35},"skip":true},"54":{"start":{"line":193,"column":8},"end":{"line":193,"column":14},"skip":true}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":40,"type":"switch","locations":[{"start":{"line":42,"column":8},"end":{"line":47,"column":18}},{"start":{"line":49,"column":8},"end":{"line":52,"column":18}}]},"5":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":16},"end":{"line":44,"column":44}},{"start":{"line":44,"column":48},"end":{"line":44,"column":66}}]},"6":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":21},"end":{"line":50,"column":49}},{"start":{"line":50,"column":53},"end":{"line":50,"column":72}}]},"7":{"line":64,"type":"switch","locations":[{"start":{"line":69,"column":4},"end":{"line":70,"column":14}},{"start":{"line":75,"column":4},"end":{"line":76,"column":14}}]},"8":{"line":85,"type":"switch","locations":[{"start":{"line":90,"column":4},"end":{"line":105,"column":14}},{"start":{"line":111,"column":4},"end":{"line":193,"column":14},"skip":true}]},"9":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":42},"end":{"line":91,"column":73}},{"start":{"line":91,"column":77},"end":{"line":99,"column":9}}]},"10":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":18},"end":{"line":102,"column":32}},{"start":{"line":103,"column":12},"end":{"line":103,"column":53}},{"start":{"line":104,"column":12},"end":{"line":104,"column":61}}]},"11":{"line":112,"type":"binary-expr","locations":[{"start":{"line":112,"column":45},"end":{"line":112,"column":79},"skip":true},{"start":{"line":112,"column":83},"end":{"line":121,"column":9},"skip":true}]},"12":{"line":123,"type":"binary-expr","locations":[{"start":{"line":123,"column":42},"end":{"line":123,"column":73},"skip":true},{"start":{"line":123,"column":77},"end":{"line":136,"column":9},"skip":true}]},"13":{"line":138,"type":"binary-expr","locations":[{"start":{"line":138,"column":48},"end":{"line":138,"column":85},"skip":true},{"start":{"line":139,"column":12},"end":{"line":145,"column":13},"skip":true}]},"14":{"line":147,"type":"binary-expr","locations":[{"start":{"line":147,"column":42},"end":{"line":147,"column":73},"skip":true},{"start":{"line":147,"column":77},"end":{"line":156,"column":9},"skip":true}]},"15":{"line":158,"type":"binary-expr","locations":[{"start":{"line":158,"column":45},"end":{"line":158,"column":79},"skip":true},{"start":{"line":158,"column":83},"end":{"line":167,"column":9},"skip":true}]},"16":{"line":169,"type":"binary-expr","locations":[{"start":{"line":169,"column":43},"end":{"line":169,"column":75},"skip":true},{"start":{"line":169,"column":79},"end":{"line":178,"column":9},"skip":true}]},"17":{"line":180,"type":"binary-expr","locations":[{"start":{"line":180,"column":41},"end":{"line":180,"column":71},"skip":true},{"start":{"line":180,"column":75},"end":{"line":189,"column":9},"skip":true}]}},"code":["/* istanbul instrument in package npmtest_xregexp */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        switch (local.modeJs) {","        // re-init local from window.local","        case 'browser':","            local = local.global.utility2.objectSetDefault(","                local.global.utility2_rollup || local.global.local,","                local.global.utility2","            );","            break;","        // re-init local from example.js","        case 'node':","            local = (local.global.utility2_rollup || require('utility2'))","                .requireReadme();","            break;","        }","        // export local","        local.global.local = local;","    }());","","","","    // run shared js-env code - function","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - function","    case 'browser':","        break;","","","","    // run node js-env code - function","    case 'node':","        break;","    }","","","","    // run shared js-env code - post-init","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - post-init","    case 'browser':","        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (","            options,","            onError","        ) {","        /*","         * this function will test browsers's null-case handling-behavior-behavior","         */","            onError(null, options);","        };","","        // run tests","        local.nop(local.modeTest &&","            document.querySelector('#testRunButton1') &&","            document.querySelector('#testRunButton1').click());","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApidoc's default handling-behavior-behavior","         */","            options = { modulePathList: module.paths };","            local.buildApidoc(options, onError);","        };","","        local.testCase_buildApp_default = local.testCase_buildApp_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApp's default handling-behavior-behavior","         */","            local.testCase_buildReadme_default(options, local.onErrorThrow);","            local.testCase_buildLib_default(options, local.onErrorThrow);","            local.testCase_buildTest_default(options, local.onErrorThrow);","            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);","            options = [];","            local.buildApp(options, onError);","        };","","        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||","            function (options, onError) {","            /*","             * this function will test buildCustomOrg's default handling-behavior","             */","                options = {};","                local.buildCustomOrg(options, onError);","            };","","        local.testCase_buildLib_default = local.testCase_buildLib_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildLib's default handling-behavior","         */","            options = {};","            local.buildLib(options, onError);","        };","","        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildReadme's default handling-behavior-behavior","         */","            options = {};","            local.buildReadme(options, onError);","        };","","        local.testCase_buildTest_default = local.testCase_buildTest_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildTest's default handling-behavior","         */","            options = {};","            local.buildTest(options, onError);","        };","","        local.testCase_webpage_default = local.testCase_webpage_default || function (","            options,","            onError","        ) {","        /*","         * this function will test webpage's default handling-behavior","         */","            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };","            local.browserTest(options, onError);","        };","","        // run test-server","        local.testRunServer(local);","        break;","    }","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"40":2,"43":1,"47":1,"50":1,"52":1,"55":2,"61":2,"62":2,"64":2,"70":1,"76":1,"82":2,"83":2,"85":2,"91":1,"98":1,"102":1,"105":1,"112":1,"119":1,"120":1,"123":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"138":1,"143":2,"144":2,"147":1,"154":2,"155":2,"158":1,"165":2,"166":2,"169":1,"176":2,"177":2,"180":1,"187":1,"188":1,"192":1,"193":1}},"/home/travis/build/npmtest/node-npmtest-xregexp/lib.npmtest_xregexp.js":{"path":"/home/travis/build/npmtest/node-npmtest-xregexp/lib.npmtest_xregexp.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":1,"15":1,"16":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1]},"f":{"1":2,"2":2,"3":2},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":53,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":52,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":41,"column":8},"end":{"line":41,"column":54}},"11":{"start":{"line":43,"column":8},"end":{"line":43,"column":52}},"12":{"start":{"line":45,"column":8},"end":{"line":51,"column":9}},"13":{"start":{"line":46,"column":12},"end":{"line":46,"column":58}},"14":{"start":{"line":48,"column":12},"end":{"line":48,"column":35}},"15":{"start":{"line":49,"column":12},"end":{"line":49,"column":49}},"16":{"start":{"line":50,"column":12},"end":{"line":50,"column":43}}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":16},"end":{"line":41,"column":44}},{"start":{"line":41,"column":48},"end":{"line":41,"column":53}}]},"5":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]}},"code":["/* istanbul instrument in package npmtest_xregexp */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || local;","        // init lib","        local.local = local.npmtest_xregexp = local;","        // init exports","        if (local.modeJs === 'browser') {","            local.global.utility2_npmtest_xregexp = local;","        } else {","            module.exports = local;","            module.exports.__dirname = __dirname;","            module.exports.module = module;","        }","    }());","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"41":2,"43":2,"45":2,"46":1,"48":1,"49":1,"50":1}},"/home/travis/build/npmtest/node-npmtest-xregexp/example.js":{"path":"/home/travis/build/npmtest/node-npmtest-xregexp/example.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":2,"15":2,"16":2,"17":2,"18":2,"19":0,"20":2,"21":1,"22":1,"23":1,"24":1,"25":1,"26":0,"27":0,"28":1,"29":1,"30":2,"31":0,"32":0,"33":0,"34":1,"35":2,"36":2,"37":3,"38":3,"39":3,"40":3,"41":0,"42":3,"43":3,"44":3,"45":1,"46":3,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":0,"58":1,"59":6,"60":6,"61":1,"62":2,"63":0,"64":2,"65":1,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1],"6":[1,1],"7":[2,0],"8":[2,1,1,1,1,1],"9":[0,2,0],"10":[1,1],"11":[2,1,1],"12":[1,0],"13":[0,2],"14":[2,0,0,0,0,0,0],"15":[0,3],"16":[3,0],"17":[1,1],"18":[0,1],"19":[1,2,0,2],"20":[1,0],"21":[1,1],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":3,"8":3,"9":3,"10":1,"11":6,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":26,"loc":{"start":{"line":26,"column":1},"end":{"line":26,"column":13}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":5},"end":{"line":33,"column":17}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":24},"end":{"line":37,"column":36}}},"4":{"name":"(anonymous_4)","line":69,"loc":{"start":{"line":69,"column":31},"end":{"line":69,"column":48}},"skip":true},"5":{"name":"(anonymous_5)","line":78,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":45}},"skip":true},"6":{"name":"(anonymous_6)","line":123,"loc":{"start":{"line":123,"column":33},"end":{"line":123,"column":48}},"skip":true},"7":{"name":"(anonymous_7)","line":125,"loc":{"start":{"line":125,"column":27},"end":{"line":125,"column":39}},"skip":true},"8":{"name":"(anonymous_8)","line":133,"loc":{"start":{"line":133,"column":59},"end":{"line":133,"column":74}},"skip":true},"9":{"name":"(anonymous_9)","line":143,"loc":{"start":{"line":143,"column":45},"end":{"line":143,"column":62}},"skip":true},"10":{"name":"(anonymous_10)","line":144,"loc":{"start":{"line":144,"column":73},"end":{"line":144,"column":92}},"skip":true},"11":{"name":"(anonymous_11)","line":272,"loc":{"start":{"line":272,"column":51},"end":{"line":272,"column":77}},"skip":true},"12":{"name":"(anonymous_12)","line":315,"loc":{"start":{"line":315,"column":32},"end":{"line":315,"column":61}},"skip":true}},"statementMap":{"1":{"start":{"line":26,"column":0},"end":{"line":326,"column":5}},"2":{"start":{"line":28,"column":4},"end":{"line":28,"column":14}},"3":{"start":{"line":33,"column":4},"end":{"line":60,"column":9}},"4":{"start":{"line":35,"column":8},"end":{"line":35,"column":19}},"5":{"start":{"line":37,"column":8},"end":{"line":49,"column":13}},"6":{"start":{"line":38,"column":12},"end":{"line":48,"column":13}},"7":{"start":{"line":39,"column":16},"end":{"line":42,"column":30}},"8":{"start":{"line":44,"column":16},"end":{"line":47,"column":27}},"9":{"start":{"line":51,"column":8},"end":{"line":53,"column":21}},"10":{"start":{"line":55,"column":8},"end":{"line":57,"column":45}},"11":{"start":{"line":59,"column":8},"end":{"line":59,"column":35}},"12":{"start":{"line":61,"column":4},"end":{"line":325,"column":5}},"13":{"start":{"line":69,"column":8},"end":{"line":121,"column":10},"skip":true},"14":{"start":{"line":70,"column":12},"end":{"line":88,"column":13},"skip":true},"15":{"start":{"line":76,"column":16},"end":{"line":87,"column":19},"skip":true},"16":{"start":{"line":79,"column":20},"end":{"line":86,"column":21},"skip":true},"17":{"start":{"line":82,"column":24},"end":{"line":82,"column":43},"skip":true},"18":{"start":{"line":83,"column":24},"end":{"line":83,"column":30},"skip":true},"19":{"start":{"line":85,"column":24},"end":{"line":85,"column":49},"skip":true},"20":{"start":{"line":89,"column":12},"end":{"line":107,"column":13},"skip":true},"21":{"start":{"line":92,"column":16},"end":{"line":102,"column":17},"skip":true},"22":{"start":{"line":93,"column":20},"end":{"line":93,"column":86},"skip":true},"23":{"start":{"line":94,"column":20},"end":{"line":95,"column":45},"skip":true},"24":{"start":{"line":96,"column":20},"end":{"line":96,"column":42},"skip":true},"25":{"start":{"line":97,"column":20},"end":{"line":97,"column":48},"skip":true},"26":{"start":{"line":100,"column":20},"end":{"line":100,"column":85},"skip":true},"27":{"start":{"line":101,"column":20},"end":{"line":101,"column":96},"skip":true},"28":{"start":{"line":103,"column":16},"end":{"line":103,"column":22},"skip":true},"29":{"start":{"line":106,"column":16},"end":{"line":106,"column":22},"skip":true},"30":{"start":{"line":108,"column":12},"end":{"line":120,"column":13},"skip":true},"31":{"start":{"line":114,"column":16},"end":{"line":119,"column":17},"skip":true},"32":{"start":{"line":116,"column":20},"end":{"line":116,"column":78},"skip":true},"33":{"start":{"line":118,"column":20},"end":{"line":118,"column":47},"skip":true},"34":{"start":{"line":123,"column":8},"end":{"line":141,"column":11},"skip":true},"35":{"start":{"line":124,"column":12},"end":{"line":124,"column":54},"skip":true},"36":{"start":{"line":125,"column":12},"end":{"line":140,"column":14},"skip":true},"37":{"start":{"line":126,"column":16},"end":{"line":126,"column":28},"skip":true},"38":{"start":{"line":127,"column":16},"end":{"line":127,"column":69},"skip":true},"39":{"start":{"line":128,"column":16},"end":{"line":128,"column":75},"skip":true},"40":{"start":{"line":129,"column":16},"end":{"line":131,"column":17},"skip":true},"41":{"start":{"line":130,"column":20},"end":{"line":130,"column":27},"skip":true},"42":{"start":{"line":133,"column":16},"end":{"line":137,"column":36},"skip":true},"43":{"start":{"line":134,"column":20},"end":{"line":136,"column":55},"skip":true},"44":{"start":{"line":139,"column":16},"end":{"line":139,"column":57},"skip":true},"45":{"start":{"line":143,"column":8},"end":{"line":147,"column":11},"skip":true},"46":{"start":{"line":144,"column":12},"end":{"line":146,"column":15},"skip":true},"47":{"start":{"line":145,"column":16},"end":{"line":145,"column":70},"skip":true},"48":{"start":{"line":149,"column":8},"end":{"line":149,"column":31},"skip":true},"49":{"start":{"line":150,"column":8},"end":{"line":150,"column":14},"skip":true},"50":{"start":{"line":158,"column":8},"end":{"line":158,"column":31},"skip":true},"51":{"start":{"line":160,"column":8},"end":{"line":160,"column":33},"skip":true},"52":{"start":{"line":161,"column":8},"end":{"line":161,"column":37},"skip":true},"53":{"start":{"line":162,"column":8},"end":{"line":162,"column":35},"skip":true},"54":{"start":{"line":164,"column":8},"end":{"line":164,"column":50},"skip":true},"55":{"start":{"line":166,"column":8},"end":{"line":256,"column":2},"skip":true},"56":{"start":{"line":258,"column":8},"end":{"line":286,"column":9},"skip":true},"57":{"start":{"line":259,"column":12},"end":{"line":269,"column":14},"skip":true},"58":{"start":{"line":271,"column":12},"end":{"line":285,"column":19},"skip":true},"59":{"start":{"line":274,"column":20},"end":{"line":274,"column":35},"skip":true},"60":{"start":{"line":275,"column":20},"end":{"line":284,"column":21},"skip":true},"61":{"start":{"line":277,"column":24},"end":{"line":277,"column":64},"skip":true},"62":{"start":{"line":279,"column":24},"end":{"line":279,"column":40},"skip":true},"63":{"start":{"line":281,"column":24},"end":{"line":281,"column":40},"skip":true},"64":{"start":{"line":283,"column":24},"end":{"line":283,"column":39},"skip":true},"65":{"start":{"line":288,"column":8},"end":{"line":290,"column":9},"skip":true},"66":{"start":{"line":289,"column":12},"end":{"line":289,"column":18},"skip":true},"67":{"start":{"line":291,"column":8},"end":{"line":293,"column":54},"skip":true},"68":{"start":{"line":296,"column":8},"end":{"line":301,"column":37},"skip":true},"69":{"start":{"line":303,"column":8},"end":{"line":303,"column":82},"skip":true},"70":{"start":{"line":306,"column":8},"end":{"line":308,"column":9},"skip":true},"71":{"start":{"line":307,"column":12},"end":{"line":307,"column":82},"skip":true},"72":{"start":{"line":310,"column":8},"end":{"line":312,"column":9},"skip":true},"73":{"start":{"line":311,"column":12},"end":{"line":311,"column":18},"skip":true},"74":{"start":{"line":313,"column":8},"end":{"line":313,"column":54},"skip":true},"75":{"start":{"line":314,"column":8},"end":{"line":314,"column":69},"skip":true},"76":{"start":{"line":315,"column":8},"end":{"line":323,"column":36},"skip":true},"77":{"start":{"line":316,"column":12},"end":{"line":316,"column":61},"skip":true},"78":{"start":{"line":317,"column":12},"end":{"line":320,"column":13},"skip":true},"79":{"start":{"line":318,"column":16},"end":{"line":318,"column":75},"skip":true},"80":{"start":{"line":319,"column":16},"end":{"line":319,"column":23},"skip":true},"81":{"start":{"line":321,"column":12},"end":{"line":321,"column":38},"skip":true},"82":{"start":{"line":322,"column":12},"end":{"line":322,"column":27},"skip":true},"83":{"start":{"line":324,"column":8},"end":{"line":324,"column":14},"skip":true}},"branchMap":{"1":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":23},"end":{"line":39,"column":62}},{"start":{"line":40,"column":20},"end":{"line":40,"column":70}},{"start":{"line":41,"column":20},"end":{"line":41,"column":71}},{"start":{"line":42,"column":20},"end":{"line":42,"column":29}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":23},"end":{"line":44,"column":37}},{"start":{"line":45,"column":20},"end":{"line":45,"column":61}},{"start":{"line":46,"column":20},"end":{"line":46,"column":70}},{"start":{"line":47,"column":20},"end":{"line":47,"column":26}}]},"3":{"line":51,"type":"cond-expr","locations":[{"start":{"line":52,"column":14},"end":{"line":52,"column":20}},{"start":{"line":53,"column":14},"end":{"line":53,"column":20}}]},"4":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":16},"end":{"line":55,"column":44}},{"start":{"line":55,"column":49},"end":{"line":57,"column":43}}]},"5":{"line":55,"type":"cond-expr","locations":[{"start":{"line":56,"column":14},"end":{"line":56,"column":51}},{"start":{"line":57,"column":14},"end":{"line":57,"column":43}}]},"6":{"line":61,"type":"switch","locations":[{"start":{"line":68,"column":4},"end":{"line":150,"column":14},"skip":true},{"start":{"line":156,"column":4},"end":{"line":324,"column":14},"skip":true}]},"7":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true},{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true}]},"8":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":16},"end":{"line":70,"column":22},"skip":true},{"start":{"line":70,"column":27},"end":{"line":70,"column":32},"skip":true},{"start":{"line":71,"column":20},"end":{"line":71,"column":39},"skip":true},{"start":{"line":72,"column":20},"end":{"line":72,"column":49},"skip":true},{"start":{"line":73,"column":20},"end":{"line":73,"column":58},"skip":true},{"start":{"line":74,"column":20},"end":{"line":74,"column":69},"skip":true}]},"9":{"line":79,"type":"switch","locations":[{"start":{"line":80,"column":20},"end":{"line":80,"column":33},"skip":true},{"start":{"line":81,"column":20},"end":{"line":83,"column":30},"skip":true},{"start":{"line":84,"column":20},"end":{"line":85,"column":49},"skip":true}]},"10":{"line":89,"type":"switch","locations":[{"start":{"line":90,"column":12},"end":{"line":103,"column":22},"skip":true},{"start":{"line":105,"column":12},"end":{"line":106,"column":22},"skip":true}]},"11":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":20},"end":{"line":89,"column":25},"skip":true},{"start":{"line":89,"column":29},"end":{"line":89,"column":48},"skip":true},{"start":{"line":89,"column":52},"end":{"line":89,"column":74},"skip":true}]},"12":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true},{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true}]},"13":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true},{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true}]},"14":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":16},"end":{"line":108,"column":61},"skip":true},{"start":{"line":108,"column":66},"end":{"line":108,"column":72},"skip":true},{"start":{"line":108,"column":77},"end":{"line":108,"column":82},"skip":true},{"start":{"line":109,"column":20},"end":{"line":109,"column":39},"skip":true},{"start":{"line":110,"column":20},"end":{"line":110,"column":49},"skip":true},{"start":{"line":111,"column":20},"end":{"line":111,"column":58},"skip":true},{"start":{"line":112,"column":20},"end":{"line":112,"column":68},"skip":true}]},"15":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true},{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true}]},"16":{"line":134,"type":"cond-expr","locations":[{"start":{"line":135,"column":26},"end":{"line":135,"column":29},"skip":true},{"start":{"line":136,"column":26},"end":{"line":136,"column":54},"skip":true}]},"17":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":27},"end":{"line":164,"column":43},"skip":true},{"start":{"line":164,"column":47},"end":{"line":164,"column":49},"skip":true}]},"18":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true},{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true}]},"19":{"line":275,"type":"switch","locations":[{"start":{"line":276,"column":20},"end":{"line":277,"column":64},"skip":true},{"start":{"line":278,"column":20},"end":{"line":279,"column":40},"skip":true},{"start":{"line":280,"column":20},"end":{"line":281,"column":40},"skip":true},{"start":{"line":282,"column":20},"end":{"line":283,"column":39},"skip":true}]},"20":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true},{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true}]},"21":{"line":288,"type":"binary-expr","locations":[{"start":{"line":288,"column":12},"end":{"line":288,"column":40},"skip":true},{"start":{"line":288,"column":44},"end":{"line":288,"column":67},"skip":true}]},"22":{"line":292,"type":"binary-expr","locations":[{"start":{"line":292,"column":12},"end":{"line":292,"column":50},"skip":true},{"start":{"line":293,"column":12},"end":{"line":293,"column":53},"skip":true}]},"23":{"line":297,"type":"binary-expr","locations":[{"start":{"line":297,"column":12},"end":{"line":297,"column":65},"skip":true},{"start":{"line":298,"column":12},"end":{"line":301,"column":36},"skip":true}]},"24":{"line":303,"type":"binary-expr","locations":[{"start":{"line":303,"column":43},"end":{"line":303,"column":75},"skip":true},{"start":{"line":303,"column":79},"end":{"line":303,"column":81},"skip":true}]},"25":{"line":306,"type":"if","locations":[{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true},{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true}]},"26":{"line":310,"type":"if","locations":[{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true},{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true}]},"27":{"line":313,"type":"binary-expr","locations":[{"start":{"line":313,"column":27},"end":{"line":313,"column":43},"skip":true},{"start":{"line":313,"column":47},"end":{"line":313,"column":53},"skip":true}]},"28":{"line":317,"type":"if","locations":[{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true},{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true}]}},"code":["/*","example.js","","quickstart example","","instruction","    1. save this script as example.js","    2. run the shell command:","        $ npm install npmtest-xregexp && PORT=8081 node example.js","    3. play with the browser-demo on http://127.0.0.1:8081","*/","","","","/* istanbul instrument in package npmtest_xregexp */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || (local.modeJs === 'browser'","            ? local.global.utility2_npmtest_xregexp","            : global.utility2_moduleExports);","        // export local","        local.global.local = local;","    }());","    switch (local.modeJs) {","","","","    // post-init","    // run browser js-env code - post-init","    /* istanbul ignore next */","    case 'browser':","        local.testRunBrowser = function (event) {","            if (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('onreset'))) {","                // reset output","                Array.from(","                    document.querySelectorAll('body > .resettable')","                ).forEach(function (element) {","                    switch (element.tagName) {","                    case 'INPUT':","                    case 'TEXTAREA':","                        element.value = '';","                        break;","                    default:","                        element.textContent = '';","                    }","                });","            }","            switch (event && event.currentTarget && event.currentTarget.id) {","            case 'testRunButton1':","                // show tests","                if (document.querySelector('#testReportDiv1').style.display === 'none') {","                    document.querySelector('#testReportDiv1').style.display = 'block';","                    document.querySelector('#testRunButton1').textContent =","                        'hide internal test';","                    local.modeTest = true;","                    local.testRunDefault(local);","                // hide tests","                } else {","                    document.querySelector('#testReportDiv1').style.display = 'none';","                    document.querySelector('#testRunButton1').textContent = 'run internal test';","                }","                break;","            // custom-case","            default:","                break;","            }","            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('oneval')))) {","                // try to eval input-code","                try {","                    /*jslint evil: true*/","                    eval(document.querySelector('#inputTextareaEval1').value);","                } catch (errorCaught) {","                    console.error(errorCaught);","                }","            }","        };","        // log stderr and stdout to #outputTextareaStdout1","        ['error', 'log'].forEach(function (key) {","            console[key + '_original'] = console[key];","            console[key] = function () {","                var element;","                console[key + '_original'].apply(console, arguments);","                element = document.querySelector('#outputTextareaStdout1');","                if (!element) {","                    return;","                }","                // append text to #outputTextareaStdout1","                element.value += Array.from(arguments).map(function (arg) {","                    return typeof arg === 'string'","                        ? arg","                        : JSON.stringify(arg, null, 4);","                }).join(' ') + '\\n';","                // scroll textarea to bottom","                element.scrollTop = element.scrollHeight;","            };","        });","        // init event-handling","        ['change', 'click', 'keyup'].forEach(function (event) {","            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {","                element.addEventListener(event, local.testRunBrowser);","            });","        });","        // run tests","        local.testRunBrowser();","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        // export local","        module.exports = local;","        // require modules","        local.fs = require('fs');","        local.http = require('http');","        local.url = require('url');","        // init assets","        local.assetsDict = local.assetsDict || {};","        /* jslint-ignore-begin */","        local.assetsDict['/assets.index.template.html'] = '\\","<!doctype html>\\n\\","<html lang=\"en\">\\n\\","<head>\\n\\","<meta charset=\"UTF-8\">\\n\\","<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\","<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\","<style>\\n\\","/*csslint\\n\\","    box-sizing: false,\\n\\","    universal-selector: false\\n\\","*/\\n\\","* {\\n\\","    box-sizing: border-box;\\n\\","}\\n\\","body {\\n\\","    background: #dde;\\n\\","    font-family: Arial, Helvetica, sans-serif;\\n\\","    margin: 2rem;\\n\\","}\\n\\","body > * {\\n\\","    margin-bottom: 1rem;\\n\\","}\\n\\",".utility2FooterDiv {\\n\\","    margin-top: 20px;\\n\\","    text-align: center;\\n\\","}\\n\\","</style>\\n\\","<style>\\n\\","/*csslint\\n\\","*/\\n\\","textarea {\\n\\","    font-family: monospace;\\n\\","    height: 10rem;\\n\\","    width: 100%;\\n\\","}\\n\\","textarea[readonly] {\\n\\","    background: #ddd;\\n\\","}\\n\\","</style>\\n\\","</head>\\n\\","<body>\\n\\","<!-- utility2-comment\\n\\","<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\","utility2-comment -->\\n\\","<h1>\\n\\","<!-- utility2-comment\\n\\","    <a\\n\\","        {{#if env.npm_package_homepage}}\\n\\","        href=\"{{env.npm_package_homepage}}\"\\n\\","        {{/if env.npm_package_homepage}}\\n\\","        target=\"_blank\"\\n\\","    >\\n\\","utility2-comment -->\\n\\","        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\","<!-- utility2-comment\\n\\","    </a>\\n\\","utility2-comment -->\\n\\","</h1>\\n\\","<h3>{{env.npm_package_description}}</h3>\\n\\","<!-- utility2-comment\\n\\","<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\","<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\","<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\","utility2-comment -->\\n\\","\\n\\","\\n\\","\\n\\","<label>stderr and stdout</label>\\n\\","<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\","<!-- utility2-comment\\n\\","{{#if isRollup}}\\n\\","<script src=\"assets.app.js\"></script>\\n\\","{{#unless isRollup}}\\n\\","utility2-comment -->\\n\\","<script src=\"assets.utility2.rollup.js\"></script>\\n\\","<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\","<script src=\"assets.npmtest_xregexp.rollup.js\"></script>\\n\\","<script src=\"assets.example.js\"></script>\\n\\","<script src=\"assets.test.js\"></script>\\n\\","<!-- utility2-comment\\n\\","{{/if isRollup}}\\n\\","utility2-comment -->\\n\\","<div class=\"utility2FooterDiv\">\\n\\","    [ this app was created with\\n\\","    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\","    ]\\n\\","</div>\\n\\","</body>\\n\\","</html>\\n\\","';","        /* jslint-ignore-end */","        if (local.templateRender) {","            local.assetsDict['/'] = local.templateRender(","                local.assetsDict['/assets.index.template.html'],","                {","                    env: local.objectSetDefault(local.env, {","                        npm_package_description: 'the greatest app in the world!',","                        npm_package_name: 'my-app',","                        npm_package_nameAlias: 'my_app',","                        npm_package_version: '0.0.1'","                    })","                }","            );","        } else {","            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']","                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {","                    // jslint-hack","                    String(match0);","                    switch (match1) {","                    case 'npm_package_description':","                        return 'the greatest app in the world!';","                    case 'npm_package_name':","                        return 'my-app';","                    case 'npm_package_nameAlias':","                        return 'my_app';","                    case 'npm_package_version':","                        return '0.0.1';","                    }","                });","        }","        // run the cli","        if (local.global.utility2_rollup || module !== require.main) {","            break;","        }","        local.assetsDict['/assets.example.js'] =","            local.assetsDict['/assets.example.js'] ||","            local.fs.readFileSync(__filename, 'utf8');","        // bug-workaround - long $npm_package_buildCustomOrg","        /* jslint-ignore-begin */","        local.assetsDict['/assets.npmtest_xregexp.rollup.js'] =","            local.assetsDict['/assets.npmtest_xregexp.rollup.js'] ||","            local.fs.readFileSync(","                local.npmtest_xregexp.__dirname + '/lib.npmtest_xregexp.js',","                'utf8'","            ).replace((/^#!/), '//');","        /* jslint-ignore-end */","        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';","        // if $npm_config_timeout_exit exists,","        // then exit this process after $npm_config_timeout_exit ms","        if (Number(process.env.npm_config_timeout_exit)) {","            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));","        }","        // start server","        if (local.global.utility2_serverHttp1) {","            break;","        }","        process.env.PORT = process.env.PORT || '8081';","        console.error('server starting on port ' + process.env.PORT);","        local.http.createServer(function (request, response) {","            request.urlParsed = local.url.parse(request.url);","            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {","                response.end(local.assetsDict[request.urlParsed.pathname]);","                return;","            }","            response.statusCode = 404;","            response.end();","        }).listen(process.env.PORT);","        break;","    }","}());",""],"l":{"26":2,"28":2,"33":2,"35":2,"37":2,"38":2,"39":2,"44":1,"51":2,"55":2,"59":2,"61":2,"69":1,"70":2,"76":2,"79":2,"82":2,"83":2,"85":1,"89":2,"92":1,"93":1,"94":1,"96":1,"97":1,"100":1,"101":1,"103":1,"106":1,"108":2,"114":1,"116":1,"118":1,"123":1,"124":2,"125":2,"126":3,"127":3,"128":3,"129":3,"130":1,"133":3,"134":3,"139":3,"143":1,"144":3,"145":1,"149":1,"150":1,"158":1,"160":1,"161":1,"162":1,"164":1,"166":1,"258":1,"259":1,"271":1,"274":6,"275":6,"277":1,"279":2,"281":1,"283":2,"288":1,"289":1,"291":1,"296":1,"303":1,"306":1,"307":1,"310":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"319":1,"321":1,"322":1,"324":1}},"/home/travis/build/npmtest/node-npmtest-xregexp/node_modules/xregexp/xregexp-all.js":{"path":"/home/travis/build/npmtest/node-npmtest-xregexp/node_modules/xregexp/xregexp-all.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":1,"17":1,"18":10,"19":9,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":9,"28":9,"29":8,"30":8,"31":10,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":0,"42":0,"43":0,"44":0,"45":0,"46":1,"47":0,"48":0,"49":1,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":1,"101":1,"102":0,"103":1,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":1,"171":1,"172":1,"173":1,"174":1,"175":1,"176":493,"177":1,"178":0,"179":0,"180":1,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":1,"196":0,"197":0,"198":1,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":1,"209":0,"210":0,"211":1,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":1,"239":4,"240":4,"241":4,"242":4,"243":456,"244":456,"245":0,"246":456,"247":0,"248":456,"249":456,"250":37,"251":4,"252":1,"253":0,"254":0,"255":1,"256":1,"257":0,"258":1,"259":1,"260":1,"261":0,"262":1,"263":1,"264":1,"265":0,"266":1,"267":1,"268":1,"269":1,"270":1,"271":0,"272":1,"273":1,"274":1,"275":1,"276":1,"277":1,"278":1,"279":1,"280":1,"281":1,"282":1,"283":1,"284":1,"285":1,"286":1,"287":1,"288":1,"289":1,"290":1,"291":1,"292":1,"293":1,"294":1,"295":1,"296":1,"297":2,"298":2,"299":2,"300":0,"301":2,"302":1,"303":1,"304":1,"305":1,"306":24,"307":24,"308":24,"309":21,"310":3,"311":3,"312":0,"313":0,"314":3,"315":3,"316":3,"317":1,"318":24,"319":1,"320":21,"321":0,"322":21,"323":21,"324":21,"325":21,"326":21,"327":21,"328":21,"329":21,"330":0,"331":21,"332":0,"333":21,"334":0,"335":21,"336":21,"337":21,"338":21,"339":21,"340":21,"341":21,"342":0,"343":0,"344":0,"345":0,"346":21,"347":21,"348":1,"349":0,"350":1,"351":0,"352":0,"353":0,"354":1,"355":21,"356":1,"357":21,"358":1,"359":0,"360":1,"361":0,"362":0,"363":0,"364":0,"365":0,"366":0,"367":1,"368":0,"369":0,"370":0,"371":0,"372":1,"373":1,"374":1,"375":0,"376":0,"377":0,"378":1,"379":3,"380":3,"381":0,"382":3,"383":0,"384":0,"385":0,"386":0,"387":3,"388":1,"389":0,"390":3,"391":1,"392":0,"393":0,"394":0,"395":0,"396":0,"397":0,"398":1,"399":4,"400":0,"401":4,"402":1,"403":131,"404":131,"405":131,"406":131,"407":131,"408":131,"409":1238,"410":1238,"411":1078,"412":160,"413":160,"414":8,"415":8,"416":131,"417":1,"418":0,"419":1,"420":0,"421":0,"422":0,"423":0,"424":0,"425":0,"426":1,"427":0,"428":0,"429":0,"430":1,"431":3,"432":0,"433":0,"434":0,"435":3,"436":3,"437":3,"438":0,"439":3,"440":3,"441":3,"442":3,"443":3,"444":3,"445":3,"446":3,"447":3,"448":3,"449":3,"450":3,"451":131,"452":131,"453":131,"454":0,"455":131,"456":8,"457":8,"458":123,"459":123,"460":123,"461":123,"462":12,"463":111,"464":12,"465":3,"466":3,"467":3,"468":1,"469":1,"470":1,"471":1,"472":1,"473":1,"474":1,"475":1,"476":11,"477":11,"478":11,"479":11,"480":2,"481":11,"482":2,"483":2,"484":2,"485":11,"486":11,"487":1,"488":0,"489":0,"490":0,"491":1,"492":15,"493":15,"494":0,"495":1,"496":0,"497":1,"498":283,"499":283,"500":283,"501":283,"502":283,"503":283,"504":283,"505":283,"506":0,"507":0,"508":0,"509":283,"510":283,"511":283,"512":283,"513":283,"514":283,"515":0,"516":283,"517":160,"518":283,"519":1,"520":0,"521":0,"522":0,"523":0,"524":0,"525":0,"526":1,"527":0,"528":1,"529":0,"530":0,"531":0,"532":0,"533":0,"534":1,"535":3,"536":1,"537":26,"538":1,"539":0,"540":0,"541":0,"542":0,"543":0,"544":0,"545":0,"546":0,"547":0,"548":0,"549":1,"550":0,"551":0,"552":0,"553":1,"554":0,"555":0,"556":0,"557":0,"558":0,"559":0,"560":0,"561":0,"562":1,"563":0,"564":0,"565":0,"566":0,"567":0,"568":0,"569":0,"570":0,"571":0,"572":0,"573":0,"574":0,"575":0,"576":0,"577":1,"578":0,"579":0,"580":0,"581":0,"582":0,"583":0,"584":1,"585":0,"586":1,"587":0,"588":1,"589":0,"590":0,"591":0,"592":0,"593":0,"594":1,"595":1,"596":1,"597":1,"598":1,"599":1,"600":1,"601":20,"602":20,"603":4,"604":4,"605":0,"606":16,"607":0,"608":20,"609":1,"610":0,"611":1,"612":1,"613":1,"614":1,"615":2,"616":2,"617":2,"618":2,"619":2,"620":0,"621":1,"622":1,"623":1,"624":283,"625":283,"626":283,"627":283,"628":283,"629":283,"630":131,"631":0,"632":0,"633":0,"634":0,"635":0,"636":0,"637":0,"638":131,"639":0,"640":0,"641":0,"642":0,"643":131,"644":0,"645":283,"646":0,"647":283,"648":1,"649":0,"650":1,"651":0,"652":0,"653":0,"654":0,"655":0,"656":0,"657":0,"658":0,"659":1,"660":0,"661":0,"662":0,"663":0,"664":0,"665":0,"666":0,"667":0,"668":0,"669":0,"670":0,"671":0,"672":0,"673":0,"674":0,"675":0,"676":0,"677":0,"678":0,"679":0,"680":0,"681":0,"682":0,"683":0,"684":0,"685":0,"686":0,"687":0,"688":0,"689":0,"690":0,"691":0,"692":0,"693":0,"694":0,"695":0,"696":0,"697":0,"698":0,"699":0,"700":0,"701":0,"702":0,"703":0,"704":0,"705":0,"706":0,"707":0,"708":0,"709":0,"710":0,"711":0,"712":1,"713":0,"714":0,"715":0,"716":0,"717":0,"718":0,"719":0,"720":0,"721":0,"722":0,"723":0,"724":0,"725":0,"726":0,"727":0,"728":0,"729":0,"730":0,"731":0,"732":0,"733":0,"734":1,"735":0,"736":0,"737":0,"738":1,"739":0,"740":0,"741":0,"742":0,"743":0,"744":0,"745":0,"746":0,"747":1,"748":0,"749":1,"750":1,"751":1,"752":0,"753":1,"754":0,"755":0,"756":0,"757":0,"758":0,"759":1,"760":0,"761":0,"762":0,"763":1,"764":0,"765":0,"766":0,"767":0,"768":0,"769":0,"770":0,"771":0,"772":0,"773":1,"774":8,"775":0,"776":8,"777":8,"778":1},"b":{"1":[1,0],"2":[1,1],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[9,1],"9":[0,9],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[8,0],"15":[1,1],"16":[0,0],"17":[0,0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0,0,0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0,0],"84":[0,0],"85":[0,0],"86":[0,0],"87":[0,0],"88":[0,0],"89":[0,0],"90":[0,0],"91":[0,0],"92":[0,0],"93":[0,0],"94":[0,0],"95":[0,0],"96":[0,0],"97":[0,0],"98":[0,0],"99":[0,0],"100":[0,0],"101":[0,0],"102":[0,0],"103":[0,456],"104":[0,456],"105":[456,455,178],"106":[37,419],"107":[0,1],"108":[0,1],"109":[0,1],"110":[0,1],"111":[21,3],"112":[3,0],"113":[1,2],"114":[0,21],"115":[21,11],"116":[21,0],"117":[0,21],"118":[0,21],"119":[0,21],"120":[21,0],"121":[21,0],"122":[21,0],"123":[0,21],"124":[0,0],"125":[0,0],"126":[0,0],"127":[21,21],"128":[0,21],"129":[0,0],"130":[0,0,0],"131":[21,0],"132":[21,10],"133":[0,0],"134":[0,0],"135":[0,3],"136":[0,0],"137":[0,1],"138":[0,0],"139":[0,4],"140":[1078,160],"141":[1238,1115,299,164,243,83],"142":[8,152],"143":[0,0],"144":[0,0],"145":[0,0],"146":[0,0],"147":[0,0],"148":[0,0],"149":[0,3],"150":[0,0],"151":[0,3],"152":[2,1],"153":[0,3],"154":[3,0],"155":[3,0],"156":[3,0],"157":[0,131],"158":[131,8],"159":[131,8],"160":[8,123],"161":[8,0],"162":[12,111],"163":[123,12],"164":[12,99],"165":[111,12],"166":[0,3],"167":[11,0],"168":[2,9],"169":[2,9],"170":[11,7],"171":[0,0],"172":[0,0],"173":[15,0],"174":[283,283],"175":[283,0,0],"176":[283,0],"177":[0,0],"178":[283,2],"179":[283,10],"180":[0,10],"181":[283,11],"182":[0,283],"183":[283,0,0],"184":[160,123],"185":[8,152],"186":[0,0],"187":[0,0],"188":[0,0],"189":[0,0],"190":[0,0],"191":[0,0,0],"192":[0,0],"193":[0,0],"194":[0,0],"195":[0,0],"196":[0,0],"197":[0,0],"198":[0,0],"199":[0,0],"200":[0,0],"201":[0,0],"202":[0,0],"203":[0,0],"204":[0,0],"205":[0,0],"206":[0,0],"207":[0,0],"208":[0,0],"209":[0,0],"210":[0,0,0],"211":[0,0],"212":[0,0],"213":[0,0],"214":[0,0],"215":[0,0],"216":[0,0],"217":[0,0],"218":[0,0],"219":[0,0],"220":[0,0],"221":[0,0],"222":[0,0],"223":[0,0],"224":[1,0],"225":[1,0],"226":[4,16],"227":[0,4],"228":[0,16],"229":[0,1],"230":[1,1],"231":[2,0],"232":[2,0,2],"233":[0,1],"234":[131,152],"235":[0,131],"236":[131,0,0],"237":[0,0],"238":[0,131],"239":[131,131],"240":[0,0],"241":[0,131],"242":[131,131,0],"243":[0,283],"244":[0,0],"245":[0,0],"246":[0,0],"247":[0,0],"248":[0,0],"249":[0,0],"250":[0,0],"251":[0,0],"252":[0,0],"253":[0,0],"254":[0,0],"255":[0,0],"256":[0,0],"257":[0,0],"258":[0,0],"259":[0,0],"260":[0,0],"261":[0,0],"262":[0,0],"263":[0,0],"264":[0,0],"265":[0,0],"266":[0,0],"267":[0,0],"268":[0,0],"269":[0,0],"270":[0,0],"271":[0,0],"272":[0,0],"273":[0,0],"274":[0,0],"275":[0,0],"276":[0,0],"277":[0,0],"278":[0,0],"279":[0,0],"280":[0,0],"281":[0,0],"282":[0,0],"283":[0,0],"284":[0,0],"285":[0,0],"286":[0,0],"287":[0,0],"288":[0,0],"289":[0,0],"290":[0,0],"291":[0,0],"292":[0,0],"293":[0,0,0],"294":[0,0],"295":[0,0],"296":[0,0],"297":[0,0],"298":[0,8]},"f":{"1":1,"2":1,"3":1,"4":10,"5":8,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":1,"15":0,"16":0,"17":1,"18":1,"19":493,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":4,"28":0,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":2,"40":24,"41":24,"42":21,"43":0,"44":0,"45":21,"46":21,"47":0,"48":0,"49":0,"50":1,"51":0,"52":3,"53":0,"54":0,"55":0,"56":4,"57":131,"58":0,"59":0,"60":0,"61":3,"62":11,"63":0,"64":15,"65":0,"66":283,"67":0,"68":0,"69":0,"70":3,"71":26,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":1,"82":20,"83":283,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":8},"fnMap":{"1":{"name":"(anonymous_1)","line":1,"loc":{"start":{"line":1,"column":1},"end":{"line":1,"column":12}}},"2":{"name":"(anonymous_2)","line":1,"loc":{"start":{"line":1,"column":323},"end":{"line":1,"column":333}}},"3":{"name":"e","line":1,"loc":{"start":{"line":1,"column":368},"end":{"line":1,"column":385}}},"4":{"name":"s","line":1,"loc":{"start":{"line":1,"column":386},"end":{"line":1,"column":401}}},"5":{"name":"(anonymous_5)","line":1,"loc":{"start":{"line":1,"column":635},"end":{"line":1,"column":646}}},"6":{"name":"(anonymous_6)","line":1,"loc":{"start":{"line":1,"column":814},"end":{"line":1,"column":846}}},"7":{"name":"(anonymous_7)","line":9,"loc":{"start":{"line":9,"column":17},"end":{"line":9,"column":35}}},"8":{"name":"deanchor","line":25,"loc":{"start":{"line":25,"column":4},"end":{"line":25,"column":31}}},"9":{"name":"asXRegExp","line":52,"loc":{"start":{"line":52,"column":4},"end":{"line":52,"column":40}}},"10":{"name":"(anonymous_10)","line":90,"loc":{"start":{"line":90,"column":20},"end":{"line":90,"column":51}}},"11":{"name":"(anonymous_11)","line":129,"loc":{"start":{"line":129,"column":58},"end":{"line":129,"column":87}}},"12":{"name":"(anonymous_12)","line":150,"loc":{"start":{"line":150,"column":71},"end":{"line":150,"column":103}}},"13":{"name":"(anonymous_13)","line":196,"loc":{"start":{"line":196,"column":9},"end":{"line":196,"column":41}}},"14":{"name":"(anonymous_14)","line":203,"loc":{"start":{"line":203,"column":17},"end":{"line":203,"column":35}}},"15":{"name":"row","line":211,"loc":{"start":{"line":211,"column":4},"end":{"line":211,"column":42}}},"16":{"name":"(anonymous_16)","line":270,"loc":{"start":{"line":270,"column":29},"end":{"line":270,"column":72}}},"17":{"name":"(anonymous_17)","line":397,"loc":{"start":{"line":397,"column":9},"end":{"line":397,"column":41}}},"18":{"name":"(anonymous_18)","line":404,"loc":{"start":{"line":404,"column":17},"end":{"line":404,"column":35}}},"19":{"name":"normalize","line":434,"loc":{"start":{"line":434,"column":4},"end":{"line":434,"column":29}}},"20":{"name":"charCode","line":439,"loc":{"start":{"line":439,"column":4},"end":{"line":439,"column":27}}},"21":{"name":"invertBmp","line":447,"loc":{"start":{"line":447,"column":4},"end":{"line":447,"column":30}}},"22":{"name":"(anonymous_22)","line":454,"loc":{"start":{"line":454,"column":12},"end":{"line":454,"column":24}}},"23":{"name":"cacheInvertedBmp","line":477,"loc":{"start":{"line":477,"column":4},"end":{"line":477,"column":36}}},"24":{"name":"buildAstral","line":486,"loc":{"start":{"line":486,"column":4},"end":{"line":486,"column":42}}},"25":{"name":"cacheAstral","line":507,"loc":{"start":{"line":507,"column":4},"end":{"line":507,"column":42}}},"26":{"name":"(anonymous_26)","line":525,"loc":{"start":{"line":525,"column":8},"end":{"line":525,"column":38}}},"27":{"name":"(anonymous_27)","line":607,"loc":{"start":{"line":607,"column":29},"end":{"line":607,"column":44}}},"28":{"name":"(anonymous_28)","line":652,"loc":{"start":{"line":652,"column":34},"end":{"line":652,"column":49}}},"29":{"name":"(anonymous_29)","line":659,"loc":{"start":{"line":659,"column":9},"end":{"line":659,"column":41}}},"30":{"name":"(anonymous_30)","line":667,"loc":{"start":{"line":667,"column":17},"end":{"line":667,"column":35}}},"31":{"name":"(anonymous_31)","line":1781,"loc":{"start":{"line":1781,"column":9},"end":{"line":1781,"column":41}}},"32":{"name":"(anonymous_32)","line":1789,"loc":{"start":{"line":1789,"column":17},"end":{"line":1789,"column":35}}},"33":{"name":"(anonymous_33)","line":2019,"loc":{"start":{"line":2019,"column":9},"end":{"line":2019,"column":41}}},"34":{"name":"(anonymous_34)","line":2027,"loc":{"start":{"line":2027,"column":17},"end":{"line":2027,"column":35}}},"35":{"name":"(anonymous_35)","line":2127,"loc":{"start":{"line":2127,"column":9},"end":{"line":2127,"column":41}}},"36":{"name":"(anonymous_36)","line":2135,"loc":{"start":{"line":2135,"column":17},"end":{"line":2135,"column":35}}},"37":{"name":"(anonymous_37)","line":2715,"loc":{"start":{"line":2715,"column":9},"end":{"line":2715,"column":41}}},"38":{"name":"(anonymous_38)","line":2728,"loc":{"start":{"line":2728,"column":216},"end":{"line":2728,"column":248}}},"39":{"name":"hasNativeFlag","line":2790,"loc":{"start":{"line":2790,"column":0},"end":{"line":2790,"column":29}}},"40":{"name":"augment","line":2831,"loc":{"start":{"line":2831,"column":0},"end":{"line":2831,"column":71}}},"41":{"name":"clipDuplicates","line":2868,"loc":{"start":{"line":2868,"column":0},"end":{"line":2868,"column":29}}},"42":{"name":"copyRegex","line":2890,"loc":{"start":{"line":2890,"column":0},"end":{"line":2890,"column":35}}},"43":{"name":"dec","line":2951,"loc":{"start":{"line":2951,"column":0},"end":{"line":2951,"column":18}}},"44":{"name":"getContextualTokenSeparator","line":2966,"loc":{"start":{"line":2966,"column":0},"end":{"line":2966,"column":58}}},"45":{"name":"getNativeFlags","line":2989,"loc":{"start":{"line":2989,"column":0},"end":{"line":2989,"column":31}}},"46":{"name":"hasNamedCapture","line":3005,"loc":{"start":{"line":3005,"column":0},"end":{"line":3005,"column":32}}},"47":{"name":"hex","line":3016,"loc":{"start":{"line":3016,"column":0},"end":{"line":3016,"column":18}}},"48":{"name":"indexOf","line":3028,"loc":{"start":{"line":3028,"column":0},"end":{"line":3028,"column":31}}},"49":{"name":"isPatternNext","line":3052,"loc":{"start":{"line":3052,"column":0},"end":{"line":3052,"column":59}}},"50":{"name":"isType","line":3074,"loc":{"start":{"line":3074,"column":0},"end":{"line":3074,"column":29}}},"51":{"name":"pad4","line":3085,"loc":{"start":{"line":3085,"column":0},"end":{"line":3085,"column":19}}},"52":{"name":"prepareFlags","line":3101,"loc":{"start":{"line":3101,"column":0},"end":{"line":3101,"column":38}}},"53":{"name":"(anonymous_53)","line":3110,"loc":{"start":{"line":3110,"column":61},"end":{"line":3110,"column":78}}},"54":{"name":"prepareOptions","line":3139,"loc":{"start":{"line":3139,"column":0},"end":{"line":3139,"column":31}}},"55":{"name":"(anonymous_55)","line":3143,"loc":{"start":{"line":3143,"column":42},"end":{"line":3143,"column":58}}},"56":{"name":"registerFlag","line":3159,"loc":{"start":{"line":3159,"column":0},"end":{"line":3159,"column":28}}},"57":{"name":"runTokens","line":3179,"loc":{"start":{"line":3179,"column":0},"end":{"line":3179,"column":56}}},"58":{"name":"setAstral","line":3220,"loc":{"start":{"line":3220,"column":0},"end":{"line":3220,"column":23}}},"59":{"name":"setNatives","line":3230,"loc":{"start":{"line":3230,"column":0},"end":{"line":3230,"column":24}}},"60":{"name":"toObject","line":3248,"loc":{"start":{"line":3248,"column":0},"end":{"line":3248,"column":25}}},"61":{"name":"XRegExp","line":3295,"loc":{"start":{"line":3295,"column":0},"end":{"line":3295,"column":33}}},"62":{"name":"(anonymous_62)","line":3460,"loc":{"start":{"line":3460,"column":19},"end":{"line":3460,"column":53}}},"63":{"name":"(anonymous_63)","line":3509,"loc":{"start":{"line":3509,"column":16},"end":{"line":3509,"column":41}}},"64":{"name":"(anonymous_64)","line":3519,"loc":{"start":{"line":3519,"column":22},"end":{"line":3519,"column":42}}},"65":{"name":"(anonymous_65)","line":3541,"loc":{"start":{"line":3541,"column":17},"end":{"line":3541,"column":31}}},"66":{"name":"(anonymous_66)","line":3574,"loc":{"start":{"line":3574,"column":15},"end":{"line":3574,"column":49}}},"67":{"name":"(anonymous_67)","line":3648,"loc":{"start":{"line":3648,"column":18},"end":{"line":3648,"column":49}}},"68":{"name":"(anonymous_68)","line":3679,"loc":{"start":{"line":3679,"column":20},"end":{"line":3679,"column":36}}},"69":{"name":"(anonymous_69)","line":3703,"loc":{"start":{"line":3703,"column":18},"end":{"line":3703,"column":36}}},"70":{"name":"(anonymous_70)","line":3727,"loc":{"start":{"line":3727,"column":22},"end":{"line":3727,"column":40}}},"71":{"name":"(anonymous_71)","line":3745,"loc":{"start":{"line":3745,"column":19},"end":{"line":3745,"column":35}}},"72":{"name":"(anonymous_72)","line":3777,"loc":{"start":{"line":3777,"column":16},"end":{"line":3777,"column":44}}},"73":{"name":"(anonymous_73)","line":3835,"loc":{"start":{"line":3835,"column":21},"end":{"line":3835,"column":42}}},"74":{"name":"recurseChain","line":3836,"loc":{"start":{"line":3836,"column":12},"end":{"line":3836,"column":49}}},"75":{"name":"addMatch","line":3840,"loc":{"start":{"line":3840,"column":8},"end":{"line":3840,"column":33}}},"76":{"name":"(anonymous_76)","line":3914,"loc":{"start":{"line":3914,"column":18},"end":{"line":3914,"column":60}}},"77":{"name":"(anonymous_77)","line":3972,"loc":{"start":{"line":3972,"column":22},"end":{"line":3972,"column":50}}},"78":{"name":"(anonymous_78)","line":4010,"loc":{"start":{"line":4010,"column":16},"end":{"line":4010,"column":48}}},"79":{"name":"(anonymous_79)","line":4037,"loc":{"start":{"line":4037,"column":15},"end":{"line":4037,"column":49}}},"80":{"name":"(anonymous_80)","line":4062,"loc":{"start":{"line":4062,"column":20},"end":{"line":4062,"column":38}}},"81":{"name":"(anonymous_81)","line":4095,"loc":{"start":{"line":4095,"column":16},"end":{"line":4095,"column":51}}},"82":{"name":"rewrite","line":4102,"loc":{"start":{"line":4102,"column":4},"end":{"line":4102,"column":44}}},"83":{"name":"(anonymous_83)","line":4160,"loc":{"start":{"line":4160,"column":13},"end":{"line":4160,"column":27}}},"84":{"name":"(anonymous_84)","line":4178,"loc":{"start":{"line":4178,"column":67},"end":{"line":4178,"column":78}}},"85":{"name":"(anonymous_85)","line":4223,"loc":{"start":{"line":4223,"column":13},"end":{"line":4223,"column":27}}},"86":{"name":"(anonymous_86)","line":4238,"loc":{"start":{"line":4238,"column":14},"end":{"line":4238,"column":30}}},"87":{"name":"(anonymous_87)","line":4269,"loc":{"start":{"line":4269,"column":16},"end":{"line":4269,"column":46}}},"88":{"name":"(anonymous_88)","line":4289,"loc":{"start":{"line":4289,"column":58},"end":{"line":4289,"column":69}}},"89":{"name":"(anonymous_89)","line":4314,"loc":{"start":{"line":4314,"column":80},"end":{"line":4314,"column":91}}},"90":{"name":"(anonymous_90)","line":4317,"loc":{"start":{"line":4317,"column":77},"end":{"line":4317,"column":98}}},"91":{"name":"(anonymous_91)","line":4402,"loc":{"start":{"line":4402,"column":14},"end":{"line":4402,"column":41}}},"92":{"name":"(anonymous_92)","line":4424,"loc":{"start":{"line":4424,"column":36},"end":{"line":4424,"column":52}}},"93":{"name":"(anonymous_93)","line":4459,"loc":{"start":{"line":4459,"column":4},"end":{"line":4459,"column":27}}},"94":{"name":"(anonymous_94)","line":4482,"loc":{"start":{"line":4482,"column":4},"end":{"line":4482,"column":34}}},"95":{"name":"(anonymous_95)","line":4511,"loc":{"start":{"line":4511,"column":4},"end":{"line":4511,"column":20}}},"96":{"name":"(anonymous_96)","line":4543,"loc":{"start":{"line":4543,"column":4},"end":{"line":4543,"column":15}}},"97":{"name":"(anonymous_97)","line":4558,"loc":{"start":{"line":4558,"column":4},"end":{"line":4558,"column":20}}},"98":{"name":"(anonymous_98)","line":4582,"loc":{"start":{"line":4582,"column":4},"end":{"line":4582,"column":27}}},"99":{"name":"(anonymous_99)","line":4611,"loc":{"start":{"line":4611,"column":4},"end":{"line":4611,"column":20}}},"100":{"name":"(anonymous_100)","line":4636,"loc":{"start":{"line":4636,"column":4},"end":{"line":4636,"column":34}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":4652,"column":3}},"2":{"start":{"line":1,"column":13},"end":{"line":1,"column":320}},"3":{"start":{"line":1,"column":72},"end":{"line":1,"column":90}},"4":{"start":{"line":1,"column":96},"end":{"line":1,"column":320}},"5":{"start":{"line":1,"column":139},"end":{"line":1,"column":151}},"6":{"start":{"line":1,"column":157},"end":{"line":1,"column":163}},"7":{"start":{"line":1,"column":163},"end":{"line":1,"column":304}},"8":{"start":{"line":1,"column":195},"end":{"line":1,"column":203}},"9":{"start":{"line":1,"column":209},"end":{"line":1,"column":304}},"10":{"start":{"line":1,"column":241},"end":{"line":1,"column":249}},"11":{"start":{"line":1,"column":255},"end":{"line":1,"column":304}},"12":{"start":{"line":1,"column":285},"end":{"line":1,"column":291}},"13":{"start":{"line":1,"column":297},"end":{"line":1,"column":303}},"14":{"start":{"line":1,"column":304},"end":{"line":1,"column":319}},"15":{"start":{"line":1,"column":334},"end":{"line":1,"column":360}},"16":{"start":{"line":1,"column":360},"end":{"line":4651,"column":17}},"17":{"start":{"line":1,"column":386},"end":{"line":1,"column":722}},"18":{"start":{"line":1,"column":402},"end":{"line":1,"column":702}},"19":{"start":{"line":1,"column":412},"end":{"line":1,"column":588}},"20":{"start":{"line":1,"column":422},"end":{"line":1,"column":464}},"21":{"start":{"line":1,"column":464},"end":{"line":1,"column":488}},"22":{"start":{"line":1,"column":473},"end":{"line":1,"column":488}},"23":{"start":{"line":1,"column":488},"end":{"line":1,"column":508}},"24":{"start":{"line":1,"column":493},"end":{"line":1,"column":508}},"25":{"start":{"line":1,"column":508},"end":{"line":1,"column":554}},"26":{"start":{"line":1,"column":554},"end":{"line":1,"column":587}},"27":{"start":{"line":1,"column":588},"end":{"line":1,"column":612}},"28":{"start":{"line":1,"column":612},"end":{"line":1,"column":701}},"29":{"start":{"line":1,"column":647},"end":{"line":1,"column":664}},"30":{"start":{"line":1,"column":664},"end":{"line":1,"column":679}},"31":{"start":{"line":1,"column":702},"end":{"line":1,"column":721}},"32":{"start":{"line":1,"column":722},"end":{"line":1,"column":764}},"33":{"start":{"line":1,"column":764},"end":{"line":1,"column":799}},"34":{"start":{"line":1,"column":791},"end":{"line":1,"column":799}},"35":{"start":{"line":1,"column":799},"end":{"line":1,"column":807}},"36":{"start":{"line":9,"column":0},"end":{"line":194,"column":2}},"37":{"start":{"line":12,"column":4},"end":{"line":12,"column":31}},"38":{"start":{"line":13,"column":4},"end":{"line":13,"column":81}},"39":{"start":{"line":14,"column":4},"end":{"line":16,"column":7}},"40":{"start":{"line":25,"column":4},"end":{"line":41,"column":5}},"41":{"start":{"line":28,"column":8},"end":{"line":28,"column":46}},"42":{"start":{"line":29,"column":8},"end":{"line":29,"column":47}},"43":{"start":{"line":31,"column":8},"end":{"line":38,"column":9}},"44":{"start":{"line":37,"column":12},"end":{"line":37,"column":82}},"45":{"start":{"line":40,"column":8},"end":{"line":40,"column":23}},"46":{"start":{"line":52,"column":4},"end":{"line":63,"column":5}},"47":{"start":{"line":53,"column":8},"end":{"line":53,"column":40}},"48":{"start":{"line":54,"column":8},"end":{"line":62,"column":34}},"49":{"start":{"line":90,"column":4},"end":{"line":192,"column":6}},"50":{"start":{"line":91,"column":8},"end":{"line":91,"column":28}},"51":{"start":{"line":95,"column":8},"end":{"line":95,"column":47}},"52":{"start":{"line":96,"column":8},"end":{"line":96,"column":58}},"53":{"start":{"line":98,"column":8},"end":{"line":100,"column":9}},"54":{"start":{"line":99,"column":12},"end":{"line":99,"column":68}},"55":{"start":{"line":102,"column":8},"end":{"line":102,"column":22}},"56":{"start":{"line":103,"column":8},"end":{"line":117,"column":9}},"57":{"start":{"line":104,"column":12},"end":{"line":116,"column":13}},"58":{"start":{"line":109,"column":16},"end":{"line":109,"column":55}},"59":{"start":{"line":110,"column":16},"end":{"line":115,"column":18}},"60":{"start":{"line":121,"column":8},"end":{"line":121,"column":58}},"61":{"start":{"line":124,"column":8},"end":{"line":124,"column":24}},"62":{"start":{"line":125,"column":8},"end":{"line":125,"column":25}},"63":{"start":{"line":126,"column":8},"end":{"line":126,"column":29}},"64":{"start":{"line":127,"column":8},"end":{"line":127,"column":31}},"65":{"start":{"line":128,"column":8},"end":{"line":128,"column":74}},"66":{"start":{"line":129,"column":8},"end":{"line":189,"column":11}},"67":{"start":{"line":130,"column":12},"end":{"line":130,"column":35}},"68":{"start":{"line":131,"column":12},"end":{"line":131,"column":24}},"69":{"start":{"line":132,"column":12},"end":{"line":132,"column":22}},"70":{"start":{"line":133,"column":12},"end":{"line":133,"column":30}},"71":{"start":{"line":135,"column":12},"end":{"line":170,"column":13}},"72":{"start":{"line":136,"column":16},"end":{"line":138,"column":17}},"73":{"start":{"line":137,"column":20},"end":{"line":137,"column":73}},"74":{"start":{"line":140,"column":16},"end":{"line":148,"column":17}},"75":{"start":{"line":141,"column":20},"end":{"line":141,"column":58}},"76":{"start":{"line":142,"column":20},"end":{"line":142,"column":61}},"77":{"start":{"line":145,"column":20},"end":{"line":145,"column":63}},"78":{"start":{"line":147,"column":20},"end":{"line":147,"column":34}},"79":{"start":{"line":149,"column":16},"end":{"line":149,"column":39}},"80":{"start":{"line":150,"column":16},"end":{"line":169,"column":25}},"81":{"start":{"line":152,"column":20},"end":{"line":167,"column":21}},"82":{"start":{"line":153,"column":24},"end":{"line":153,"column":78}},"83":{"start":{"line":154,"column":24},"end":{"line":154,"column":34}},"84":{"start":{"line":156,"column":24},"end":{"line":158,"column":25}},"85":{"start":{"line":157,"column":28},"end":{"line":157,"column":57}},"86":{"start":{"line":160,"column":27},"end":{"line":167,"column":21}},"87":{"start":{"line":161,"column":24},"end":{"line":161,"column":53}},"88":{"start":{"line":163,"column":24},"end":{"line":166,"column":61}},"89":{"start":{"line":168,"column":20},"end":{"line":168,"column":33}},"90":{"start":{"line":172,"column":12},"end":{"line":187,"column":13}},"91":{"start":{"line":173,"column":16},"end":{"line":173,"column":54}},"92":{"start":{"line":174,"column":16},"end":{"line":174,"column":57}},"93":{"start":{"line":176,"column":16},"end":{"line":178,"column":17}},"94":{"start":{"line":177,"column":20},"end":{"line":177,"column":49}},"95":{"start":{"line":180,"column":19},"end":{"line":187,"column":13}},"96":{"start":{"line":181,"column":16},"end":{"line":181,"column":40}},"97":{"start":{"line":183,"column":16},"end":{"line":186,"column":45}},"98":{"start":{"line":188,"column":12},"end":{"line":188,"column":22}},"99":{"start":{"line":191,"column":8},"end":{"line":191,"column":38}},"100":{"start":{"line":203,"column":0},"end":{"line":395,"column":2}},"101":{"start":{"line":211,"column":4},"end":{"line":218,"column":5}},"102":{"start":{"line":212,"column":8},"end":{"line":217,"column":10}},"103":{"start":{"line":270,"column":4},"end":{"line":393,"column":6}},"104":{"start":{"line":271,"column":8},"end":{"line":271,"column":28}},"105":{"start":{"line":272,"column":8},"end":{"line":272,"column":32}},"106":{"start":{"line":273,"column":8},"end":{"line":273,"column":45}},"107":{"start":{"line":274,"column":8},"end":{"line":274,"column":45}},"108":{"start":{"line":276,"column":8},"end":{"line":276,"column":49}},"109":{"start":{"line":277,"column":8},"end":{"line":277,"column":44}},"110":{"start":{"line":278,"column":8},"end":{"line":278,"column":36}},"111":{"start":{"line":279,"column":8},"end":{"line":279,"column":24}},"112":{"start":{"line":280,"column":8},"end":{"line":280,"column":27}},"113":{"start":{"line":281,"column":8},"end":{"line":281,"column":27}},"114":{"start":{"line":282,"column":8},"end":{"line":282,"column":25}},"115":{"start":{"line":283,"column":8},"end":{"line":283,"column":29}},"116":{"start":{"line":284,"column":8},"end":{"line":284,"column":23}},"117":{"start":{"line":285,"column":8},"end":{"line":285,"column":23}},"118":{"start":{"line":286,"column":8},"end":{"line":286,"column":22}},"119":{"start":{"line":287,"column":8},"end":{"line":287,"column":23}},"120":{"start":{"line":288,"column":8},"end":{"line":288,"column":16}},"121":{"start":{"line":289,"column":8},"end":{"line":289,"column":41}},"122":{"start":{"line":290,"column":8},"end":{"line":290,"column":43}},"123":{"start":{"line":292,"column":8},"end":{"line":313,"column":9}},"124":{"start":{"line":293,"column":12},"end":{"line":295,"column":13}},"125":{"start":{"line":294,"column":16},"end":{"line":294,"column":77}},"126":{"start":{"line":296,"column":12},"end":{"line":296,"column":52}},"127":{"start":{"line":302,"column":12},"end":{"line":312,"column":14}},"128":{"start":{"line":315,"column":8},"end":{"line":386,"column":9}},"129":{"start":{"line":318,"column":12},"end":{"line":320,"column":13}},"130":{"start":{"line":319,"column":16},"end":{"line":319,"column":91}},"131":{"start":{"line":321,"column":12},"end":{"line":321,"column":58}},"132":{"start":{"line":322,"column":12},"end":{"line":322,"column":60}},"133":{"start":{"line":324,"column":12},"end":{"line":330,"column":13}},"134":{"start":{"line":325,"column":16},"end":{"line":329,"column":17}},"135":{"start":{"line":326,"column":20},"end":{"line":326,"column":38}},"136":{"start":{"line":328,"column":20},"end":{"line":328,"column":37}},"137":{"start":{"line":341,"column":12},"end":{"line":346,"column":13}},"138":{"start":{"line":342,"column":16},"end":{"line":342,"column":61}},"139":{"start":{"line":343,"column":16},"end":{"line":343,"column":76}},"140":{"start":{"line":344,"column":19},"end":{"line":346,"column":13}},"141":{"start":{"line":345,"column":16},"end":{"line":345,"column":22}},"142":{"start":{"line":347,"column":12},"end":{"line":349,"column":13}},"143":{"start":{"line":348,"column":16},"end":{"line":348,"column":22}},"144":{"start":{"line":350,"column":12},"end":{"line":381,"column":13}},"145":{"start":{"line":351,"column":16},"end":{"line":354,"column":17}},"146":{"start":{"line":352,"column":20},"end":{"line":352,"column":44}},"147":{"start":{"line":353,"column":20},"end":{"line":353,"column":42}},"148":{"start":{"line":355,"column":16},"end":{"line":355,"column":29}},"149":{"start":{"line":356,"column":19},"end":{"line":381,"column":13}},"150":{"start":{"line":357,"column":16},"end":{"line":378,"column":17}},"151":{"start":{"line":358,"column":20},"end":{"line":373,"column":21}},"152":{"start":{"line":359,"column":24},"end":{"line":361,"column":25}},"153":{"start":{"line":360,"column":28},"end":{"line":360,"column":115}},"154":{"start":{"line":362,"column":24},"end":{"line":364,"column":25}},"155":{"start":{"line":363,"column":28},"end":{"line":363,"column":111}},"156":{"start":{"line":365,"column":24},"end":{"line":367,"column":25}},"157":{"start":{"line":366,"column":28},"end":{"line":366,"column":111}},"158":{"start":{"line":368,"column":24},"end":{"line":370,"column":25}},"159":{"start":{"line":369,"column":28},"end":{"line":369,"column":107}},"160":{"start":{"line":372,"column":24},"end":{"line":372,"column":71}},"161":{"start":{"line":374,"column":20},"end":{"line":374,"column":44}},"162":{"start":{"line":375,"column":20},"end":{"line":377,"column":21}},"163":{"start":{"line":376,"column":24},"end":{"line":376,"column":30}},"164":{"start":{"line":380,"column":16},"end":{"line":380,"column":72}},"165":{"start":{"line":383,"column":12},"end":{"line":385,"column":13}},"166":{"start":{"line":384,"column":16},"end":{"line":384,"column":27}},"167":{"start":{"line":388,"column":8},"end":{"line":390,"column":9}},"168":{"start":{"line":389,"column":12},"end":{"line":389,"column":87}},"169":{"start":{"line":392,"column":8},"end":{"line":392,"column":22}},"170":{"start":{"line":404,"column":0},"end":{"line":657,"column":2}},"171":{"start":{"line":426,"column":4},"end":{"line":426,"column":21}},"172":{"start":{"line":429,"column":4},"end":{"line":429,"column":27}},"173":{"start":{"line":430,"column":4},"end":{"line":430,"column":27}},"174":{"start":{"line":431,"column":4},"end":{"line":431,"column":29}},"175":{"start":{"line":434,"column":4},"end":{"line":436,"column":5}},"176":{"start":{"line":435,"column":8},"end":{"line":435,"column":57}},"177":{"start":{"line":439,"column":4},"end":{"line":444,"column":5}},"178":{"start":{"line":440,"column":8},"end":{"line":440,"column":42}},"179":{"start":{"line":441,"column":8},"end":{"line":443,"column":59}},"180":{"start":{"line":447,"column":4},"end":{"line":474,"column":5}},"181":{"start":{"line":448,"column":8},"end":{"line":448,"column":24}},"182":{"start":{"line":449,"column":8},"end":{"line":449,"column":25}},"183":{"start":{"line":451,"column":8},"end":{"line":464,"column":10}},"184":{"start":{"line":455,"column":16},"end":{"line":455,"column":43}},"185":{"start":{"line":456,"column":16},"end":{"line":461,"column":17}},"186":{"start":{"line":457,"column":20},"end":{"line":457,"column":61}},"187":{"start":{"line":458,"column":20},"end":{"line":460,"column":21}},"188":{"start":{"line":459,"column":24},"end":{"line":459,"column":64}},"189":{"start":{"line":462,"column":16},"end":{"line":462,"column":49}},"190":{"start":{"line":466,"column":8},"end":{"line":471,"column":9}},"191":{"start":{"line":467,"column":12},"end":{"line":467,"column":53}},"192":{"start":{"line":468,"column":12},"end":{"line":470,"column":13}},"193":{"start":{"line":469,"column":16},"end":{"line":469,"column":37}},"194":{"start":{"line":473,"column":8},"end":{"line":473,"column":22}},"195":{"start":{"line":477,"column":4},"end":{"line":483,"column":5}},"196":{"start":{"line":478,"column":8},"end":{"line":478,"column":24}},"197":{"start":{"line":479,"column":8},"end":{"line":482,"column":10}},"198":{"start":{"line":486,"column":4},"end":{"line":504,"column":5}},"199":{"start":{"line":487,"column":8},"end":{"line":487,"column":33}},"200":{"start":{"line":488,"column":8},"end":{"line":488,"column":26}},"201":{"start":{"line":490,"column":8},"end":{"line":492,"column":9}},"202":{"start":{"line":491,"column":12},"end":{"line":491,"column":71}},"203":{"start":{"line":493,"column":8},"end":{"line":495,"column":9}},"204":{"start":{"line":494,"column":12},"end":{"line":494,"column":36}},"205":{"start":{"line":496,"column":8},"end":{"line":498,"column":9}},"206":{"start":{"line":497,"column":12},"end":{"line":497,"column":72}},"207":{"start":{"line":501,"column":8},"end":{"line":503,"column":35}},"208":{"start":{"line":507,"column":4},"end":{"line":513,"column":5}},"209":{"start":{"line":508,"column":8},"end":{"line":508,"column":43}},"210":{"start":{"line":509,"column":8},"end":{"line":512,"column":10}},"211":{"start":{"line":522,"column":4},"end":{"line":577,"column":6}},"212":{"start":{"line":526,"column":12},"end":{"line":526,"column":60}},"213":{"start":{"line":527,"column":12},"end":{"line":527,"column":60}},"214":{"start":{"line":528,"column":12},"end":{"line":528,"column":64}},"215":{"start":{"line":529,"column":12},"end":{"line":529,"column":76}},"216":{"start":{"line":530,"column":12},"end":{"line":530,"column":109}},"217":{"start":{"line":532,"column":12},"end":{"line":532,"column":59}},"218":{"start":{"line":534,"column":12},"end":{"line":534,"column":55}},"219":{"start":{"line":536,"column":12},"end":{"line":536,"column":55}},"220":{"start":{"line":538,"column":12},"end":{"line":538,"column":37}},"221":{"start":{"line":540,"column":12},"end":{"line":542,"column":13}},"222":{"start":{"line":541,"column":16},"end":{"line":541,"column":65}},"223":{"start":{"line":543,"column":12},"end":{"line":545,"column":13}},"224":{"start":{"line":544,"column":16},"end":{"line":544,"column":67}},"225":{"start":{"line":548,"column":12},"end":{"line":555,"column":13}},"226":{"start":{"line":549,"column":16},"end":{"line":549,"column":49}},"227":{"start":{"line":550,"column":16},"end":{"line":552,"column":17}},"228":{"start":{"line":551,"column":20},"end":{"line":551,"column":99}},"229":{"start":{"line":553,"column":16},"end":{"line":553,"column":37}},"230":{"start":{"line":554,"column":16},"end":{"line":554,"column":39}},"231":{"start":{"line":557,"column":12},"end":{"line":559,"column":13}},"232":{"start":{"line":558,"column":16},"end":{"line":558,"column":66}},"233":{"start":{"line":560,"column":12},"end":{"line":566,"column":13}},"234":{"start":{"line":561,"column":16},"end":{"line":563,"column":17}},"235":{"start":{"line":562,"column":20},"end":{"line":562,"column":63}},"236":{"start":{"line":565,"column":16},"end":{"line":565,"column":52}},"237":{"start":{"line":568,"column":12},"end":{"line":570,"column":58}},"238":{"start":{"line":607,"column":4},"end":{"line":629,"column":6}},"239":{"start":{"line":608,"column":8},"end":{"line":608,"column":56}},"240":{"start":{"line":609,"column":8},"end":{"line":609,"column":65}},"241":{"start":{"line":610,"column":8},"end":{"line":610,"column":17}},"242":{"start":{"line":612,"column":8},"end":{"line":624,"column":9}},"243":{"start":{"line":613,"column":12},"end":{"line":613,"column":27}},"244":{"start":{"line":614,"column":12},"end":{"line":616,"column":13}},"245":{"start":{"line":615,"column":16},"end":{"line":615,"column":45}},"246":{"start":{"line":617,"column":12},"end":{"line":619,"column":13}},"247":{"start":{"line":618,"column":16},"end":{"line":618,"column":57}},"248":{"start":{"line":620,"column":12},"end":{"line":620,"column":49}},"249":{"start":{"line":621,"column":12},"end":{"line":623,"column":13}},"250":{"start":{"line":622,"column":16},"end":{"line":622,"column":54}},"251":{"start":{"line":628,"column":8},"end":{"line":628,"column":40}},"252":{"start":{"line":652,"column":4},"end":{"line":655,"column":6}},"253":{"start":{"line":653,"column":8},"end":{"line":653,"column":35}},"254":{"start":{"line":654,"column":8},"end":{"line":654,"column":29}},"255":{"start":{"line":667,"column":0},"end":{"line":1779,"column":2}},"256":{"start":{"line":680,"column":4},"end":{"line":682,"column":5}},"257":{"start":{"line":681,"column":8},"end":{"line":681,"column":86}},"258":{"start":{"line":684,"column":4},"end":{"line":1777,"column":7}},"259":{"start":{"line":1789,"column":0},"end":{"line":2017,"column":2}},"260":{"start":{"line":1802,"column":4},"end":{"line":1804,"column":5}},"261":{"start":{"line":1803,"column":8},"end":{"line":1803,"column":90}},"262":{"start":{"line":1806,"column":4},"end":{"line":2015,"column":7}},"263":{"start":{"line":2027,"column":0},"end":{"line":2125,"column":2}},"264":{"start":{"line":2069,"column":4},"end":{"line":2071,"column":5}},"265":{"start":{"line":2070,"column":8},"end":{"line":2070,"column":90}},"266":{"start":{"line":2073,"column":4},"end":{"line":2113,"column":6}},"267":{"start":{"line":2116,"column":4},"end":{"line":2121,"column":7}},"268":{"start":{"line":2123,"column":4},"end":{"line":2123,"column":40}},"269":{"start":{"line":2135,"column":0},"end":{"line":2713,"column":2}},"270":{"start":{"line":2147,"column":4},"end":{"line":2149,"column":5}},"271":{"start":{"line":2148,"column":8},"end":{"line":2148,"column":87}},"272":{"start":{"line":2151,"column":4},"end":{"line":2711,"column":7}},"273":{"start":{"line":2716,"column":0},"end":{"line":2716,"column":35}},"274":{"start":{"line":2718,"column":0},"end":{"line":2718,"column":35}},"275":{"start":{"line":2719,"column":0},"end":{"line":2719,"column":44}},"276":{"start":{"line":2720,"column":0},"end":{"line":2720,"column":42}},"277":{"start":{"line":2721,"column":0},"end":{"line":2721,"column":44}},"278":{"start":{"line":2722,"column":0},"end":{"line":2722,"column":48}},"279":{"start":{"line":2723,"column":0},"end":{"line":2723,"column":48}},"280":{"start":{"line":2724,"column":0},"end":{"line":2724,"column":45}},"281":{"start":{"line":2726,"column":0},"end":{"line":2726,"column":25}},"282":{"start":{"line":2749,"column":0},"end":{"line":2749,"column":27}},"283":{"start":{"line":2751,"column":0},"end":{"line":2754,"column":2}},"284":{"start":{"line":2756,"column":0},"end":{"line":2762,"column":2}},"285":{"start":{"line":2764,"column":0},"end":{"line":2764,"column":15}},"286":{"start":{"line":2766,"column":0},"end":{"line":2766,"column":20}},"287":{"start":{"line":2768,"column":0},"end":{"line":2768,"column":22}},"288":{"start":{"line":2770,"column":0},"end":{"line":2770,"column":16}},"289":{"start":{"line":2772,"column":0},"end":{"line":2772,"column":29}},"290":{"start":{"line":2773,"column":0},"end":{"line":2773,"column":25}},"291":{"start":{"line":2775,"column":0},"end":{"line":2780,"column":2}},"292":{"start":{"line":2782,"column":0},"end":{"line":2782,"column":58}},"293":{"start":{"line":2784,"column":0},"end":{"line":2784,"column":67}},"294":{"start":{"line":2786,"column":0},"end":{"line":2786,"column":43}},"295":{"start":{"line":2788,"column":0},"end":{"line":2788,"column":27}},"296":{"start":{"line":2790,"column":0},"end":{"line":2804,"column":1}},"297":{"start":{"line":2795,"column":4},"end":{"line":2795,"column":27}},"298":{"start":{"line":2796,"column":4},"end":{"line":2802,"column":5}},"299":{"start":{"line":2799,"column":8},"end":{"line":2799,"column":29}},"300":{"start":{"line":2801,"column":8},"end":{"line":2801,"column":28}},"301":{"start":{"line":2803,"column":4},"end":{"line":2803,"column":23}},"302":{"start":{"line":2806,"column":0},"end":{"line":2806,"column":36}},"303":{"start":{"line":2808,"column":0},"end":{"line":2808,"column":36}},"304":{"start":{"line":2810,"column":0},"end":{"line":2816,"column":2}},"305":{"start":{"line":2831,"column":0},"end":{"line":2859,"column":1}},"306":{"start":{"line":2832,"column":4},"end":{"line":2832,"column":10}},"307":{"start":{"line":2834,"column":4},"end":{"line":2836,"column":6}},"308":{"start":{"line":2838,"column":4},"end":{"line":2840,"column":5}},"309":{"start":{"line":2839,"column":8},"end":{"line":2839,"column":21}},"310":{"start":{"line":2843,"column":4},"end":{"line":2852,"column":5}},"311":{"start":{"line":2844,"column":8},"end":{"line":2844,"column":44}},"312":{"start":{"line":2846,"column":8},"end":{"line":2851,"column":9}},"313":{"start":{"line":2850,"column":12},"end":{"line":2850,"column":44}},"314":{"start":{"line":2854,"column":4},"end":{"line":2854,"column":39}},"315":{"start":{"line":2856,"column":4},"end":{"line":2856,"column":81}},"316":{"start":{"line":2858,"column":4},"end":{"line":2858,"column":17}},"317":{"start":{"line":2868,"column":0},"end":{"line":2870,"column":1}},"318":{"start":{"line":2869,"column":4},"end":{"line":2869,"column":65}},"319":{"start":{"line":2890,"column":0},"end":{"line":2942,"column":1}},"320":{"start":{"line":2891,"column":4},"end":{"line":2893,"column":5}},"321":{"start":{"line":2892,"column":8},"end":{"line":2892,"column":52}},"322":{"start":{"line":2895,"column":4},"end":{"line":2895,"column":40}},"323":{"start":{"line":2896,"column":4},"end":{"line":2896,"column":38}},"324":{"start":{"line":2897,"column":4},"end":{"line":2897,"column":24}},"325":{"start":{"line":2898,"column":4},"end":{"line":2898,"column":27}},"326":{"start":{"line":2899,"column":4},"end":{"line":2899,"column":29}},"327":{"start":{"line":2900,"column":4},"end":{"line":2900,"column":28}},"328":{"start":{"line":2902,"column":4},"end":{"line":2902,"column":28}},"329":{"start":{"line":2904,"column":4},"end":{"line":2904,"column":48}},"330":{"start":{"line":2904,"column":26},"end":{"line":2904,"column":47}},"331":{"start":{"line":2905,"column":4},"end":{"line":2905,"column":48}},"332":{"start":{"line":2905,"column":26},"end":{"line":2905,"column":47}},"333":{"start":{"line":2906,"column":4},"end":{"line":2908,"column":5}},"334":{"start":{"line":2907,"column":8},"end":{"line":2907,"column":91}},"335":{"start":{"line":2910,"column":4},"end":{"line":2910,"column":42}},"336":{"start":{"line":2910,"column":23},"end":{"line":2910,"column":41}},"337":{"start":{"line":2911,"column":4},"end":{"line":2911,"column":42}},"338":{"start":{"line":2911,"column":23},"end":{"line":2911,"column":41}},"339":{"start":{"line":2912,"column":4},"end":{"line":2914,"column":5}},"340":{"start":{"line":2913,"column":8},"end":{"line":2913,"column":51}},"341":{"start":{"line":2916,"column":4},"end":{"line":2927,"column":5}},"342":{"start":{"line":2917,"column":8},"end":{"line":2919,"column":9}},"343":{"start":{"line":2918,"column":12},"end":{"line":2918,"column":41}},"344":{"start":{"line":2922,"column":8},"end":{"line":2926,"column":9}},"345":{"start":{"line":2925,"column":12},"end":{"line":2925,"column":95}},"346":{"start":{"line":2933,"column":4},"end":{"line":2939,"column":6}},"347":{"start":{"line":2941,"column":4},"end":{"line":2941,"column":17}},"348":{"start":{"line":2951,"column":0},"end":{"line":2953,"column":1}},"349":{"start":{"line":2952,"column":4},"end":{"line":2952,"column":29}},"350":{"start":{"line":2966,"column":0},"end":{"line":2980,"column":1}},"351":{"start":{"line":2967,"column":4},"end":{"line":2975,"column":5}},"352":{"start":{"line":2974,"column":8},"end":{"line":2974,"column":18}},"353":{"start":{"line":2979,"column":4},"end":{"line":2979,"column":18}},"354":{"start":{"line":2989,"column":0},"end":{"line":2996,"column":1}},"355":{"start":{"line":2990,"column":4},"end":{"line":2995,"column":82}},"356":{"start":{"line":3005,"column":0},"end":{"line":3007,"column":1}},"357":{"start":{"line":3006,"column":4},"end":{"line":3006,"column":67}},"358":{"start":{"line":3016,"column":0},"end":{"line":3018,"column":1}},"359":{"start":{"line":3017,"column":4},"end":{"line":3017,"column":42}},"360":{"start":{"line":3028,"column":0},"end":{"line":3039,"column":1}},"361":{"start":{"line":3029,"column":4},"end":{"line":3029,"column":27}},"362":{"start":{"line":3030,"column":4},"end":{"line":3030,"column":10}},"363":{"start":{"line":3032,"column":4},"end":{"line":3036,"column":5}},"364":{"start":{"line":3033,"column":8},"end":{"line":3035,"column":9}},"365":{"start":{"line":3034,"column":12},"end":{"line":3034,"column":21}},"366":{"start":{"line":3038,"column":4},"end":{"line":3038,"column":14}},"367":{"start":{"line":3052,"column":0},"end":{"line":3064,"column":1}},"368":{"start":{"line":3053,"column":4},"end":{"line":3053,"column":49}},"369":{"start":{"line":3054,"column":4},"end":{"line":3054,"column":41}},"370":{"start":{"line":3055,"column":4},"end":{"line":3059,"column":31}},"371":{"start":{"line":3060,"column":4},"end":{"line":3063,"column":6}},"372":{"start":{"line":3074,"column":0},"end":{"line":3076,"column":1}},"373":{"start":{"line":3075,"column":4},"end":{"line":3075,"column":60}},"374":{"start":{"line":3085,"column":0},"end":{"line":3090,"column":1}},"375":{"start":{"line":3086,"column":4},"end":{"line":3088,"column":5}},"376":{"start":{"line":3087,"column":8},"end":{"line":3087,"column":24}},"377":{"start":{"line":3089,"column":4},"end":{"line":3089,"column":15}},"378":{"start":{"line":3101,"column":0},"end":{"line":3130,"column":1}},"379":{"start":{"line":3102,"column":4},"end":{"line":3102,"column":10}},"380":{"start":{"line":3105,"column":4},"end":{"line":3107,"column":5}},"381":{"start":{"line":3106,"column":8},"end":{"line":3106,"column":71}},"382":{"start":{"line":3110,"column":4},"end":{"line":3117,"column":7}},"383":{"start":{"line":3111,"column":8},"end":{"line":3113,"column":9}},"384":{"start":{"line":3112,"column":12},"end":{"line":3112,"column":83}},"385":{"start":{"line":3115,"column":8},"end":{"line":3115,"column":43}},"386":{"start":{"line":3116,"column":8},"end":{"line":3116,"column":18}},"387":{"start":{"line":3120,"column":4},"end":{"line":3124,"column":5}},"388":{"start":{"line":3121,"column":8},"end":{"line":3123,"column":9}},"389":{"start":{"line":3122,"column":12},"end":{"line":3122,"column":75}},"390":{"start":{"line":3126,"column":4},"end":{"line":3129,"column":6}},"391":{"start":{"line":3139,"column":0},"end":{"line":3151,"column":1}},"392":{"start":{"line":3140,"column":4},"end":{"line":3140,"column":21}},"393":{"start":{"line":3142,"column":4},"end":{"line":3148,"column":5}},"394":{"start":{"line":3143,"column":8},"end":{"line":3145,"column":11}},"395":{"start":{"line":3144,"column":12},"end":{"line":3144,"column":34}},"396":{"start":{"line":3147,"column":8},"end":{"line":3147,"column":23}},"397":{"start":{"line":3150,"column":4},"end":{"line":3150,"column":17}},"398":{"start":{"line":3159,"column":0},"end":{"line":3165,"column":1}},"399":{"start":{"line":3160,"column":4},"end":{"line":3162,"column":5}},"400":{"start":{"line":3161,"column":8},"end":{"line":3161,"column":71}},"401":{"start":{"line":3164,"column":4},"end":{"line":3164,"column":33}},"402":{"start":{"line":3179,"column":0},"end":{"line":3210,"column":1}},"403":{"start":{"line":3180,"column":4},"end":{"line":3180,"column":26}},"404":{"start":{"line":3181,"column":4},"end":{"line":3181,"column":39}},"405":{"start":{"line":3182,"column":4},"end":{"line":3182,"column":22}},"406":{"start":{"line":3183,"column":4},"end":{"line":3183,"column":14}},"407":{"start":{"line":3184,"column":4},"end":{"line":3184,"column":10}},"408":{"start":{"line":3187,"column":4},"end":{"line":3207,"column":5}},"409":{"start":{"line":3188,"column":8},"end":{"line":3188,"column":22}},"410":{"start":{"line":3189,"column":8},"end":{"line":3195,"column":9}},"411":{"start":{"line":3194,"column":12},"end":{"line":3194,"column":21}},"412":{"start":{"line":3197,"column":8},"end":{"line":3197,"column":62}},"413":{"start":{"line":3198,"column":8},"end":{"line":3206,"column":9}},"414":{"start":{"line":3199,"column":12},"end":{"line":3203,"column":14}},"415":{"start":{"line":3205,"column":12},"end":{"line":3205,"column":18}},"416":{"start":{"line":3209,"column":4},"end":{"line":3209,"column":18}},"417":{"start":{"line":3220,"column":0},"end":{"line":3222,"column":1}},"418":{"start":{"line":3221,"column":4},"end":{"line":3221,"column":25}},"419":{"start":{"line":3230,"column":0},"end":{"line":3238,"column":1}},"420":{"start":{"line":3231,"column":4},"end":{"line":3231,"column":54}},"421":{"start":{"line":3232,"column":4},"end":{"line":3232,"column":54}},"422":{"start":{"line":3233,"column":4},"end":{"line":3233,"column":56}},"423":{"start":{"line":3234,"column":4},"end":{"line":3234,"column":60}},"424":{"start":{"line":3235,"column":4},"end":{"line":3235,"column":56}},"425":{"start":{"line":3237,"column":4},"end":{"line":3237,"column":26}},"426":{"start":{"line":3248,"column":0},"end":{"line":3255,"column":1}},"427":{"start":{"line":3250,"column":4},"end":{"line":3252,"column":5}},"428":{"start":{"line":3251,"column":8},"end":{"line":3251,"column":74}},"429":{"start":{"line":3254,"column":4},"end":{"line":3254,"column":17}},"430":{"start":{"line":3295,"column":0},"end":{"line":3381,"column":1}},"431":{"start":{"line":3296,"column":4},"end":{"line":3301,"column":5}},"432":{"start":{"line":3297,"column":8},"end":{"line":3299,"column":9}},"433":{"start":{"line":3298,"column":12},"end":{"line":3298,"column":77}},"434":{"start":{"line":3300,"column":8},"end":{"line":3300,"column":34}},"435":{"start":{"line":3304,"column":4},"end":{"line":3304,"column":59}},"436":{"start":{"line":3305,"column":4},"end":{"line":3305,"column":53}},"437":{"start":{"line":3307,"column":4},"end":{"line":3310,"column":5}},"438":{"start":{"line":3309,"column":8},"end":{"line":3309,"column":21}},"439":{"start":{"line":3312,"column":4},"end":{"line":3314,"column":5}},"440":{"start":{"line":3313,"column":8},"end":{"line":3313,"column":35}},"441":{"start":{"line":3316,"column":4},"end":{"line":3372,"column":5}},"442":{"start":{"line":3317,"column":8},"end":{"line":3320,"column":10}},"443":{"start":{"line":3321,"column":8},"end":{"line":3321,"column":33}},"444":{"start":{"line":3322,"column":8},"end":{"line":3322,"column":24}},"445":{"start":{"line":3323,"column":8},"end":{"line":3323,"column":20}},"446":{"start":{"line":3324,"column":8},"end":{"line":3324,"column":19}},"447":{"start":{"line":3327,"column":8},"end":{"line":3327,"column":51}},"448":{"start":{"line":3328,"column":8},"end":{"line":3328,"column":45}},"449":{"start":{"line":3329,"column":8},"end":{"line":3329,"column":41}},"450":{"start":{"line":3333,"column":8},"end":{"line":3360,"column":9}},"451":{"start":{"line":3334,"column":12},"end":{"line":3344,"column":47}},"452":{"start":{"line":3336,"column":16},"end":{"line":3336,"column":86}},"453":{"start":{"line":3339,"column":16},"end":{"line":3343,"column":17}},"454":{"start":{"line":3340,"column":20},"end":{"line":3342,"column":71}},"455":{"start":{"line":3346,"column":12},"end":{"line":3359,"column":13}},"456":{"start":{"line":3347,"column":16},"end":{"line":3347,"column":40}},"457":{"start":{"line":3348,"column":16},"end":{"line":3348,"column":49}},"458":{"start":{"line":3351,"column":16},"end":{"line":3351,"column":96}},"459":{"start":{"line":3352,"column":16},"end":{"line":3352,"column":32}},"460":{"start":{"line":3353,"column":16},"end":{"line":3353,"column":36}},"461":{"start":{"line":3354,"column":16},"end":{"line":3358,"column":17}},"462":{"start":{"line":3355,"column":20},"end":{"line":3355,"column":39}},"463":{"start":{"line":3356,"column":23},"end":{"line":3358,"column":17}},"464":{"start":{"line":3357,"column":20},"end":{"line":3357,"column":41}},"465":{"start":{"line":3362,"column":8},"end":{"line":3371,"column":10}},"466":{"start":{"line":3374,"column":4},"end":{"line":3374,"column":49}},"467":{"start":{"line":3375,"column":4},"end":{"line":3380,"column":6}},"468":{"start":{"line":3384,"column":0},"end":{"line":3384,"column":33}},"469":{"start":{"line":3398,"column":0},"end":{"line":3398,"column":26}},"470":{"start":{"line":3405,"column":0},"end":{"line":3405,"column":41}},"471":{"start":{"line":3406,"column":0},"end":{"line":3406,"column":39}},"472":{"start":{"line":3407,"column":0},"end":{"line":3407,"column":19}},"473":{"start":{"line":3408,"column":0},"end":{"line":3408,"column":19}},"474":{"start":{"line":3409,"column":0},"end":{"line":3409,"column":21}},"475":{"start":{"line":3460,"column":0},"end":{"line":3493,"column":2}},"476":{"start":{"line":3461,"column":4},"end":{"line":3461,"column":28}},"477":{"start":{"line":3462,"column":4},"end":{"line":3462,"column":46}},"478":{"start":{"line":3463,"column":4},"end":{"line":3463,"column":10}},"479":{"start":{"line":3465,"column":4},"end":{"line":3467,"column":5}},"480":{"start":{"line":3466,"column":8},"end":{"line":3466,"column":35}},"481":{"start":{"line":3469,"column":4},"end":{"line":3474,"column":5}},"482":{"start":{"line":3470,"column":8},"end":{"line":3470,"column":60}},"483":{"start":{"line":3471,"column":8},"end":{"line":3473,"column":9}},"484":{"start":{"line":3472,"column":12},"end":{"line":3472,"column":43}},"485":{"start":{"line":3477,"column":4},"end":{"line":3488,"column":7}},"486":{"start":{"line":3492,"column":4},"end":{"line":3492,"column":36}},"487":{"start":{"line":3509,"column":0},"end":{"line":3516,"column":2}},"488":{"start":{"line":3510,"column":4},"end":{"line":3512,"column":5}},"489":{"start":{"line":3511,"column":8},"end":{"line":3511,"column":33}},"490":{"start":{"line":3513,"column":4},"end":{"line":3515,"column":6}},"491":{"start":{"line":3519,"column":0},"end":{"line":3527,"column":2}},"492":{"start":{"line":3520,"column":4},"end":{"line":3526,"column":5}},"493":{"start":{"line":3522,"column":8},"end":{"line":3522,"column":26}},"494":{"start":{"line":3525,"column":8},"end":{"line":3525,"column":24}},"495":{"start":{"line":3541,"column":0},"end":{"line":3543,"column":2}},"496":{"start":{"line":3542,"column":4},"end":{"line":3542,"column":82}},"497":{"start":{"line":3574,"column":0},"end":{"line":3624,"column":2}},"498":{"start":{"line":3575,"column":4},"end":{"line":3575,"column":23}},"499":{"start":{"line":3576,"column":4},"end":{"line":3576,"column":21}},"500":{"start":{"line":3577,"column":4},"end":{"line":3577,"column":22}},"501":{"start":{"line":3578,"column":4},"end":{"line":3578,"column":14}},"502":{"start":{"line":3579,"column":4},"end":{"line":3579,"column":11}},"503":{"start":{"line":3581,"column":4},"end":{"line":3581,"column":74}},"504":{"start":{"line":3582,"column":4},"end":{"line":3592,"column":5}},"505":{"start":{"line":3583,"column":8},"end":{"line":3583,"column":24}},"506":{"start":{"line":3584,"column":11},"end":{"line":3592,"column":5}},"507":{"start":{"line":3590,"column":8},"end":{"line":3590,"column":21}},"508":{"start":{"line":3591,"column":8},"end":{"line":3591,"column":28}},"509":{"start":{"line":3594,"column":4},"end":{"line":3594,"column":48}},"510":{"start":{"line":3597,"column":4},"end":{"line":3605,"column":6}},"511":{"start":{"line":3607,"column":4},"end":{"line":3607,"column":19}},"512":{"start":{"line":3608,"column":4},"end":{"line":3608,"column":23}},"513":{"start":{"line":3611,"column":4},"end":{"line":3611,"column":37}},"514":{"start":{"line":3615,"column":4},"end":{"line":3617,"column":5}},"515":{"start":{"line":3616,"column":8},"end":{"line":3616,"column":21}},"516":{"start":{"line":3619,"column":4},"end":{"line":3621,"column":5}},"517":{"start":{"line":3620,"column":8},"end":{"line":3620,"column":51}},"518":{"start":{"line":3623,"column":4},"end":{"line":3623,"column":17}},"519":{"start":{"line":3648,"column":0},"end":{"line":3664,"column":2}},"520":{"start":{"line":3649,"column":4},"end":{"line":3649,"column":16}},"521":{"start":{"line":3650,"column":4},"end":{"line":3650,"column":15}},"522":{"start":{"line":3651,"column":4},"end":{"line":3651,"column":14}},"523":{"start":{"line":3653,"column":4},"end":{"line":3663,"column":5}},"524":{"start":{"line":3660,"column":8},"end":{"line":3660,"column":41}},"525":{"start":{"line":3662,"column":8},"end":{"line":3662,"column":51}},"526":{"start":{"line":3679,"column":0},"end":{"line":3681,"column":2}},"527":{"start":{"line":3680,"column":4},"end":{"line":3680,"column":42}},"528":{"start":{"line":3703,"column":0},"end":{"line":3713,"column":2}},"529":{"start":{"line":3704,"column":4},"end":{"line":3704,"column":38}},"530":{"start":{"line":3706,"column":4},"end":{"line":3708,"column":5}},"531":{"start":{"line":3707,"column":8},"end":{"line":3707,"column":24}},"532":{"start":{"line":3710,"column":4},"end":{"line":3712,"column":5}},"533":{"start":{"line":3711,"column":8},"end":{"line":3711,"column":25}},"534":{"start":{"line":3727,"column":0},"end":{"line":3729,"column":2}},"535":{"start":{"line":3728,"column":4},"end":{"line":3728,"column":33}},"536":{"start":{"line":3745,"column":0},"end":{"line":3748,"column":2}},"537":{"start":{"line":3746,"column":4},"end":{"line":3746,"column":54}},"538":{"start":{"line":3777,"column":0},"end":{"line":3805,"column":2}},"539":{"start":{"line":3778,"column":4},"end":{"line":3778,"column":70}},"540":{"start":{"line":3779,"column":4},"end":{"line":3779,"column":79}},"541":{"start":{"line":3780,"column":4},"end":{"line":3780,"column":15}},"542":{"start":{"line":3781,"column":4},"end":{"line":3781,"column":11}},"543":{"start":{"line":3783,"column":4},"end":{"line":3783,"column":48}},"544":{"start":{"line":3786,"column":4},"end":{"line":3792,"column":6}},"545":{"start":{"line":3794,"column":4},"end":{"line":3794,"column":49}},"546":{"start":{"line":3796,"column":4},"end":{"line":3802,"column":5}},"547":{"start":{"line":3797,"column":8},"end":{"line":3801,"column":10}},"548":{"start":{"line":3804,"column":4},"end":{"line":3804,"column":59}},"549":{"start":{"line":3835,"column":0},"end":{"line":3865,"column":2}},"550":{"start":{"line":3836,"column":4},"end":{"line":3864,"column":17}},"551":{"start":{"line":3837,"column":8},"end":{"line":3837,"column":77}},"552":{"start":{"line":3838,"column":8},"end":{"line":3838,"column":25}},"553":{"start":{"line":3840,"column":8},"end":{"line":3855,"column":9}},"554":{"start":{"line":3841,"column":12},"end":{"line":3854,"column":13}},"555":{"start":{"line":3847,"column":16},"end":{"line":3849,"column":17}},"556":{"start":{"line":3848,"column":20},"end":{"line":3848,"column":98}},"557":{"start":{"line":3851,"column":16},"end":{"line":3851,"column":56}},"558":{"start":{"line":3853,"column":16},"end":{"line":3853,"column":39}},"559":{"start":{"line":3857,"column":8},"end":{"line":3859,"column":9}},"560":{"start":{"line":3858,"column":12},"end":{"line":3858,"column":61}},"561":{"start":{"line":3861,"column":8},"end":{"line":3863,"column":45}},"562":{"start":{"line":3914,"column":0},"end":{"line":3946,"column":2}},"563":{"start":{"line":3915,"column":4},"end":{"line":3915,"column":43}},"564":{"start":{"line":3916,"column":4},"end":{"line":3916,"column":71}},"565":{"start":{"line":3917,"column":4},"end":{"line":3917,"column":80}},"566":{"start":{"line":3918,"column":4},"end":{"line":3918,"column":20}},"567":{"start":{"line":3919,"column":4},"end":{"line":3919,"column":15}},"568":{"start":{"line":3921,"column":4},"end":{"line":3935,"column":5}},"569":{"start":{"line":3922,"column":8},"end":{"line":3922,"column":54}},"570":{"start":{"line":3926,"column":8},"end":{"line":3932,"column":10}},"571":{"start":{"line":3933,"column":11},"end":{"line":3935,"column":5}},"572":{"start":{"line":3934,"column":8},"end":{"line":3934,"column":61}},"573":{"start":{"line":3938,"column":4},"end":{"line":3938,"column":64}},"574":{"start":{"line":3940,"column":4},"end":{"line":3943,"column":5}},"575":{"start":{"line":3942,"column":8},"end":{"line":3942,"column":29}},"576":{"start":{"line":3945,"column":4},"end":{"line":3945,"column":18}},"577":{"start":{"line":3972,"column":0},"end":{"line":3982,"column":2}},"578":{"start":{"line":3973,"column":4},"end":{"line":3973,"column":10}},"579":{"start":{"line":3974,"column":4},"end":{"line":3974,"column":10}},"580":{"start":{"line":3976,"column":4},"end":{"line":3979,"column":5}},"581":{"start":{"line":3977,"column":8},"end":{"line":3977,"column":28}},"582":{"start":{"line":3978,"column":8},"end":{"line":3978,"column":53}},"583":{"start":{"line":3981,"column":4},"end":{"line":3981,"column":15}},"584":{"start":{"line":4010,"column":0},"end":{"line":4012,"column":2}},"585":{"start":{"line":4011,"column":4},"end":{"line":4011,"column":61}},"586":{"start":{"line":4037,"column":0},"end":{"line":4040,"column":2}},"587":{"start":{"line":4039,"column":4},"end":{"line":4039,"column":51}},"588":{"start":{"line":4062,"column":0},"end":{"line":4072,"column":2}},"589":{"start":{"line":4063,"column":4},"end":{"line":4063,"column":38}},"590":{"start":{"line":4065,"column":4},"end":{"line":4067,"column":5}},"591":{"start":{"line":4066,"column":8},"end":{"line":4066,"column":25}},"592":{"start":{"line":4069,"column":4},"end":{"line":4071,"column":5}},"593":{"start":{"line":4070,"column":8},"end":{"line":4070,"column":26}},"594":{"start":{"line":4095,"column":0},"end":{"line":4145,"column":2}},"595":{"start":{"line":4096,"column":4},"end":{"line":4096,"column":28}},"596":{"start":{"line":4097,"column":4},"end":{"line":4097,"column":50}},"597":{"start":{"line":4098,"column":4},"end":{"line":4098,"column":24}},"598":{"start":{"line":4099,"column":4},"end":{"line":4099,"column":25}},"599":{"start":{"line":4100,"column":4},"end":{"line":4100,"column":21}},"600":{"start":{"line":4102,"column":4},"end":{"line":4119,"column":5}},"601":{"start":{"line":4103,"column":8},"end":{"line":4103,"column":64}},"602":{"start":{"line":4106,"column":8},"end":{"line":4116,"column":9}},"603":{"start":{"line":4107,"column":12},"end":{"line":4107,"column":26}},"604":{"start":{"line":4109,"column":12},"end":{"line":4111,"column":13}},"605":{"start":{"line":4110,"column":16},"end":{"line":4110,"column":42}},"606":{"start":{"line":4113,"column":15},"end":{"line":4116,"column":9}},"607":{"start":{"line":4115,"column":12},"end":{"line":4115,"column":56}},"608":{"start":{"line":4118,"column":8},"end":{"line":4118,"column":21}},"609":{"start":{"line":4121,"column":4},"end":{"line":4123,"column":5}},"610":{"start":{"line":4122,"column":8},"end":{"line":4122,"column":82}},"611":{"start":{"line":4125,"column":4},"end":{"line":4125,"column":78}},"612":{"start":{"line":4126,"column":4},"end":{"line":4126,"column":20}},"613":{"start":{"line":4127,"column":4},"end":{"line":4127,"column":16}},"614":{"start":{"line":4128,"column":4},"end":{"line":4141,"column":5}},"615":{"start":{"line":4129,"column":8},"end":{"line":4129,"column":30}},"616":{"start":{"line":4131,"column":8},"end":{"line":4140,"column":9}},"617":{"start":{"line":4132,"column":12},"end":{"line":4132,"column":43}},"618":{"start":{"line":4133,"column":12},"end":{"line":4133,"column":91}},"619":{"start":{"line":4137,"column":12},"end":{"line":4137,"column":92}},"620":{"start":{"line":4139,"column":12},"end":{"line":4139,"column":49}},"621":{"start":{"line":4143,"column":4},"end":{"line":4143,"column":54}},"622":{"start":{"line":4144,"column":4},"end":{"line":4144,"column":50}},"623":{"start":{"line":4160,"column":0},"end":{"line":4213,"column":2}},"624":{"start":{"line":4161,"column":4},"end":{"line":4161,"column":39}},"625":{"start":{"line":4162,"column":4},"end":{"line":4162,"column":50}},"626":{"start":{"line":4163,"column":4},"end":{"line":4163,"column":13}},"627":{"start":{"line":4164,"column":4},"end":{"line":4164,"column":11}},"628":{"start":{"line":4165,"column":4},"end":{"line":4165,"column":10}},"629":{"start":{"line":4167,"column":4},"end":{"line":4205,"column":5}},"630":{"start":{"line":4171,"column":8},"end":{"line":4188,"column":9}},"631":{"start":{"line":4172,"column":12},"end":{"line":4175,"column":15}},"632":{"start":{"line":4178,"column":12},"end":{"line":4187,"column":15}},"633":{"start":{"line":4179,"column":16},"end":{"line":4179,"column":43}},"634":{"start":{"line":4180,"column":16},"end":{"line":4180,"column":22}},"635":{"start":{"line":4182,"column":16},"end":{"line":4186,"column":17}},"636":{"start":{"line":4183,"column":20},"end":{"line":4185,"column":21}},"637":{"start":{"line":4184,"column":24},"end":{"line":4184,"column":45}},"638":{"start":{"line":4191,"column":8},"end":{"line":4199,"column":9}},"639":{"start":{"line":4193,"column":12},"end":{"line":4198,"column":13}},"640":{"start":{"line":4194,"column":16},"end":{"line":4194,"column":60}},"641":{"start":{"line":4195,"column":16},"end":{"line":4197,"column":17}},"642":{"start":{"line":4196,"column":20},"end":{"line":4196,"column":43}},"643":{"start":{"line":4202,"column":8},"end":{"line":4204,"column":9}},"644":{"start":{"line":4203,"column":12},"end":{"line":4203,"column":41}},"645":{"start":{"line":4207,"column":4},"end":{"line":4210,"column":5}},"646":{"start":{"line":4209,"column":8},"end":{"line":4209,"column":39}},"647":{"start":{"line":4212,"column":4},"end":{"line":4212,"column":17}},"648":{"start":{"line":4223,"column":0},"end":{"line":4226,"column":2}},"649":{"start":{"line":4225,"column":4},"end":{"line":4225,"column":40}},"650":{"start":{"line":4238,"column":0},"end":{"line":4253,"column":2}},"651":{"start":{"line":4239,"column":4},"end":{"line":4239,"column":15}},"652":{"start":{"line":4241,"column":4},"end":{"line":4250,"column":5}},"653":{"start":{"line":4243,"column":8},"end":{"line":4243,"column":34}},"654":{"start":{"line":4244,"column":11},"end":{"line":4250,"column":5}},"655":{"start":{"line":4245,"column":8},"end":{"line":4245,"column":52}},"656":{"start":{"line":4247,"column":8},"end":{"line":4247,"column":28}},"657":{"start":{"line":4249,"column":8},"end":{"line":4249,"column":22}},"658":{"start":{"line":4252,"column":4},"end":{"line":4252,"column":50}},"659":{"start":{"line":4269,"column":0},"end":{"line":4391,"column":2}},"660":{"start":{"line":4270,"column":4},"end":{"line":4270,"column":43}},"661":{"start":{"line":4271,"column":4},"end":{"line":4271,"column":22}},"662":{"start":{"line":4272,"column":4},"end":{"line":4272,"column":21}},"663":{"start":{"line":4273,"column":4},"end":{"line":4273,"column":15}},"664":{"start":{"line":4275,"column":4},"end":{"line":4283,"column":5}},"665":{"start":{"line":4276,"column":8},"end":{"line":4278,"column":9}},"666":{"start":{"line":4277,"column":12},"end":{"line":4277,"column":59}},"667":{"start":{"line":4280,"column":8},"end":{"line":4280,"column":41}},"668":{"start":{"line":4282,"column":8},"end":{"line":4282,"column":21}},"669":{"start":{"line":4286,"column":4},"end":{"line":4378,"column":5}},"670":{"start":{"line":4289,"column":8},"end":{"line":4310,"column":11}},"671":{"start":{"line":4290,"column":12},"end":{"line":4290,"column":33}},"672":{"start":{"line":4291,"column":12},"end":{"line":4291,"column":18}},"673":{"start":{"line":4292,"column":12},"end":{"line":4302,"column":13}},"674":{"start":{"line":4295,"column":16},"end":{"line":4295,"column":46}},"675":{"start":{"line":4297,"column":16},"end":{"line":4301,"column":17}},"676":{"start":{"line":4298,"column":20},"end":{"line":4300,"column":21}},"677":{"start":{"line":4299,"column":24},"end":{"line":4299,"column":63}},"678":{"start":{"line":4305,"column":12},"end":{"line":4307,"column":13}},"679":{"start":{"line":4306,"column":16},"end":{"line":4306,"column":74}},"680":{"start":{"line":4309,"column":12},"end":{"line":4309,"column":54}},"681":{"start":{"line":4314,"column":8},"end":{"line":4377,"column":11}},"682":{"start":{"line":4316,"column":12},"end":{"line":4316,"column":33}},"683":{"start":{"line":4317,"column":12},"end":{"line":4376,"column":15}},"684":{"start":{"line":4318,"column":16},"end":{"line":4318,"column":22}},"685":{"start":{"line":4320,"column":16},"end":{"line":4340,"column":17}},"686":{"start":{"line":4330,"column":20},"end":{"line":4330,"column":28}},"687":{"start":{"line":4331,"column":20},"end":{"line":4333,"column":21}},"688":{"start":{"line":4332,"column":24},"end":{"line":4332,"column":45}},"689":{"start":{"line":4335,"column":20},"end":{"line":4335,"column":70}},"690":{"start":{"line":4336,"column":20},"end":{"line":4338,"column":21}},"691":{"start":{"line":4337,"column":24},"end":{"line":4337,"column":88}},"692":{"start":{"line":4339,"column":20},"end":{"line":4339,"column":45}},"693":{"start":{"line":4342,"column":16},"end":{"line":4344,"column":17}},"694":{"start":{"line":4343,"column":20},"end":{"line":4343,"column":31}},"695":{"start":{"line":4345,"column":16},"end":{"line":4347,"column":17}},"696":{"start":{"line":4346,"column":20},"end":{"line":4346,"column":35}},"697":{"start":{"line":4348,"column":16},"end":{"line":4350,"column":17}},"698":{"start":{"line":4349,"column":20},"end":{"line":4349,"column":81}},"699":{"start":{"line":4351,"column":16},"end":{"line":4353,"column":17}},"700":{"start":{"line":4352,"column":20},"end":{"line":4352,"column":95}},"701":{"start":{"line":4355,"column":16},"end":{"line":4355,"column":25}},"702":{"start":{"line":4368,"column":16},"end":{"line":4373,"column":17}},"703":{"start":{"line":4369,"column":20},"end":{"line":4371,"column":21}},"704":{"start":{"line":4370,"column":24},"end":{"line":4370,"column":88}},"705":{"start":{"line":4372,"column":20},"end":{"line":4372,"column":42}},"706":{"start":{"line":4375,"column":16},"end":{"line":4375,"column":61}},"707":{"start":{"line":4380,"column":4},"end":{"line":4388,"column":5}},"708":{"start":{"line":4381,"column":8},"end":{"line":4387,"column":9}},"709":{"start":{"line":4383,"column":12},"end":{"line":4383,"column":33}},"710":{"start":{"line":4386,"column":12},"end":{"line":4386,"column":45}},"711":{"start":{"line":4390,"column":4},"end":{"line":4390,"column":18}},"712":{"start":{"line":4402,"column":0},"end":{"line":4446,"column":2}},"713":{"start":{"line":4403,"column":4},"end":{"line":4406,"column":5}},"714":{"start":{"line":4405,"column":8},"end":{"line":4405,"column":50}},"715":{"start":{"line":4408,"column":4},"end":{"line":4408,"column":27}},"716":{"start":{"line":4409,"column":4},"end":{"line":4409,"column":20}},"717":{"start":{"line":4410,"column":4},"end":{"line":4410,"column":44}},"718":{"start":{"line":4411,"column":4},"end":{"line":4411,"column":26}},"719":{"start":{"line":4412,"column":4},"end":{"line":4412,"column":19}},"720":{"start":{"line":4422,"column":4},"end":{"line":4422,"column":53}},"721":{"start":{"line":4424,"column":4},"end":{"line":4434,"column":7}},"722":{"start":{"line":4426,"column":8},"end":{"line":4433,"column":9}},"723":{"start":{"line":4427,"column":12},"end":{"line":4427,"column":63}},"724":{"start":{"line":4428,"column":12},"end":{"line":4430,"column":13}},"725":{"start":{"line":4429,"column":16},"end":{"line":4429,"column":67}},"726":{"start":{"line":4431,"column":12},"end":{"line":4431,"column":41}},"727":{"start":{"line":4432,"column":12},"end":{"line":4432,"column":53}},"728":{"start":{"line":4436,"column":4},"end":{"line":4442,"column":5}},"729":{"start":{"line":4437,"column":8},"end":{"line":4439,"column":9}},"730":{"start":{"line":4438,"column":12},"end":{"line":4438,"column":28}},"731":{"start":{"line":4441,"column":8},"end":{"line":4441,"column":46}},"732":{"start":{"line":4444,"column":4},"end":{"line":4444,"column":40}},"733":{"start":{"line":4445,"column":4},"end":{"line":4445,"column":67}},"734":{"start":{"line":4457,"column":0},"end":{"line":4470,"column":2}},"735":{"start":{"line":4461,"column":8},"end":{"line":4463,"column":9}},"736":{"start":{"line":4462,"column":12},"end":{"line":4462,"column":28}},"737":{"start":{"line":4464,"column":8},"end":{"line":4464,"column":60}},"738":{"start":{"line":4480,"column":0},"end":{"line":4502,"column":2}},"739":{"start":{"line":4483,"column":8},"end":{"line":4483,"column":33}},"740":{"start":{"line":4484,"column":8},"end":{"line":4486,"column":9}},"741":{"start":{"line":4485,"column":12},"end":{"line":4485,"column":76}},"742":{"start":{"line":4487,"column":8},"end":{"line":4491,"column":9}},"743":{"start":{"line":4490,"column":12},"end":{"line":4490,"column":43}},"744":{"start":{"line":4493,"column":8},"end":{"line":4495,"column":9}},"745":{"start":{"line":4494,"column":12},"end":{"line":4494,"column":28}},"746":{"start":{"line":4496,"column":8},"end":{"line":4496,"column":94}},"747":{"start":{"line":4509,"column":0},"end":{"line":4517,"column":2}},"748":{"start":{"line":4514,"column":8},"end":{"line":4514,"column":48}},"749":{"start":{"line":4523,"column":0},"end":{"line":4527,"column":2}},"750":{"start":{"line":4532,"column":0},"end":{"line":4536,"column":2}},"751":{"start":{"line":4541,"column":0},"end":{"line":4550,"column":2}},"752":{"start":{"line":4544,"column":8},"end":{"line":4544,"column":26}},"753":{"start":{"line":4556,"column":0},"end":{"line":4573,"column":2}},"754":{"start":{"line":4560,"column":8},"end":{"line":4560,"column":93}},"755":{"start":{"line":4561,"column":8},"end":{"line":4561,"column":53}},"756":{"start":{"line":4562,"column":8},"end":{"line":4564,"column":9}},"757":{"start":{"line":4563,"column":12},"end":{"line":4563,"column":82}},"758":{"start":{"line":4567,"column":8},"end":{"line":4570,"column":10}},"759":{"start":{"line":4580,"column":0},"end":{"line":4600,"column":2}},"760":{"start":{"line":4583,"column":8},"end":{"line":4593,"column":9}},"761":{"start":{"line":4591,"column":12},"end":{"line":4592,"column":26}},"762":{"start":{"line":4594,"column":8},"end":{"line":4594,"column":24}},"763":{"start":{"line":4609,"column":0},"end":{"line":4628,"column":2}},"764":{"start":{"line":4614,"column":8},"end":{"line":4616,"column":9}},"765":{"start":{"line":4615,"column":12},"end":{"line":4615,"column":84}},"766":{"start":{"line":4617,"column":8},"end":{"line":4619,"column":9}},"767":{"start":{"line":4618,"column":12},"end":{"line":4618,"column":90}},"768":{"start":{"line":4620,"column":8},"end":{"line":4622,"column":9}},"769":{"start":{"line":4621,"column":12},"end":{"line":4621,"column":90}},"770":{"start":{"line":4623,"column":8},"end":{"line":4623,"column":41}},"771":{"start":{"line":4624,"column":8},"end":{"line":4624,"column":36}},"772":{"start":{"line":4625,"column":8},"end":{"line":4625,"column":19}},"773":{"start":{"line":4634,"column":0},"end":{"line":4647,"column":2}},"774":{"start":{"line":4637,"column":8},"end":{"line":4639,"column":9}},"775":{"start":{"line":4638,"column":12},"end":{"line":4638,"column":25}},"776":{"start":{"line":4640,"column":8},"end":{"line":4640,"column":37}},"777":{"start":{"line":4641,"column":8},"end":{"line":4641,"column":19}},"778":{"start":{"line":4649,"column":0},"end":{"line":4649,"column":25}}},"branchMap":{"1":{"line":1,"type":"if","locations":[{"start":{"line":1,"column":13},"end":{"line":1,"column":13}},{"start":{"line":1,"column":13},"end":{"line":1,"column":13}}]},"2":{"line":1,"type":"binary-expr","locations":[{"start":{"line":1,"column":16},"end":{"line":1,"column":41}},{"start":{"line":1,"column":43},"end":{"line":1,"column":70}}]},"3":{"line":1,"type":"if","locations":[{"start":{"line":1,"column":96},"end":{"line":1,"column":96}},{"start":{"line":1,"column":96},"end":{"line":1,"column":96}}]},"4":{"line":1,"type":"binary-expr","locations":[{"start":{"line":1,"column":99},"end":{"line":1,"column":125}},{"start":{"line":1,"column":127},"end":{"line":1,"column":137}}]},"5":{"line":1,"type":"if","locations":[{"start":{"line":1,"column":163},"end":{"line":1,"column":163}},{"start":{"line":1,"column":163},"end":{"line":1,"column":163}}]},"6":{"line":1,"type":"if","locations":[{"start":{"line":1,"column":209},"end":{"line":1,"column":209}},{"start":{"line":1,"column":209},"end":{"line":1,"column":209}}]},"7":{"line":1,"type":"if","locations":[{"start":{"line":1,"column":255},"end":{"line":1,"column":255}},{"start":{"line":1,"column":255},"end":{"line":1,"column":255}}]},"8":{"line":1,"type":"if","locations":[{"start":{"line":1,"column":402},"end":{"line":1,"column":402}},{"start":{"line":1,"column":402},"end":{"line":1,"column":402}}]},"9":{"line":1,"type":"if","locations":[{"start":{"line":1,"column":412},"end":{"line":1,"column":412}},{"start":{"line":1,"column":412},"end":{"line":1,"column":412}}]},"10":{"line":1,"type":"binary-expr","locations":[{"start":{"line":1,"column":428},"end":{"line":1,"column":454}},{"start":{"line":1,"column":456},"end":{"line":1,"column":463}}]},"11":{"line":1,"type":"if","locations":[{"start":{"line":1,"column":464},"end":{"line":1,"column":464}},{"start":{"line":1,"column":464},"end":{"line":1,"column":464}}]},"12":{"line":1,"type":"binary-expr","locations":[{"start":{"line":1,"column":467},"end":{"line":1,"column":469}},{"start":{"line":1,"column":471},"end":{"line":1,"column":472}}]},"13":{"line":1,"type":"if","locations":[{"start":{"line":1,"column":488},"end":{"line":1,"column":488}},{"start":{"line":1,"column":488},"end":{"line":1,"column":488}}]},"14":{"line":1,"type":"cond-expr","locations":[{"start":{"line":1,"column":675},"end":{"line":1,"column":676}},{"start":{"line":1,"column":677},"end":{"line":1,"column":678}}]},"15":{"line":1,"type":"binary-expr","locations":[{"start":{"line":1,"column":728},"end":{"line":1,"column":754}},{"start":{"line":1,"column":756},"end":{"line":1,"column":763}}]},"16":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":8},"end":{"line":31,"column":8}},{"start":{"line":31,"column":8},"end":{"line":31,"column":8}}]},"17":{"line":32,"type":"binary-expr","locations":[{"start":{"line":32,"column":12},"end":{"line":32,"column":39}},{"start":{"line":33,"column":12},"end":{"line":33,"column":40}},{"start":{"line":35,"column":12},"end":{"line":35,"column":65}}]},"18":{"line":53,"type":"cond-expr","locations":[{"start":{"line":53,"column":31},"end":{"line":53,"column":34}},{"start":{"line":53,"column":37},"end":{"line":53,"column":39}}]},"19":{"line":54,"type":"cond-expr","locations":[{"start":{"line":55,"column":13},"end":{"line":59,"column":44}},{"start":{"line":62,"column":12},"end":{"line":62,"column":33}}]},"20":{"line":55,"type":"cond-expr","locations":[{"start":{"line":57,"column":16},"end":{"line":57,"column":21}},{"start":{"line":59,"column":16},"end":{"line":59,"column":44}}]},"21":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":13},"end":{"line":55,"column":30}},{"start":{"line":55,"column":34},"end":{"line":55,"column":64}}]},"22":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":16},"end":{"line":91,"column":21}},{"start":{"line":91,"column":25},"end":{"line":91,"column":27}}]},"23":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":8},"end":{"line":98,"column":8}},{"start":{"line":98,"column":8},"end":{"line":98,"column":8}}]},"24":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":12},"end":{"line":104,"column":12}},{"start":{"line":104,"column":12},"end":{"line":104,"column":12}}]},"25":{"line":114,"type":"binary-expr","locations":[{"start":{"line":114,"column":27},"end":{"line":114,"column":55}},{"start":{"line":114,"column":59},"end":{"line":114,"column":61}}]},"26":{"line":128,"type":"binary-expr","locations":[{"start":{"line":128,"column":28},"end":{"line":128,"column":67}},{"start":{"line":128,"column":71},"end":{"line":128,"column":73}}]},"27":{"line":130,"type":"binary-expr","locations":[{"start":{"line":130,"column":26},"end":{"line":130,"column":28}},{"start":{"line":130,"column":32},"end":{"line":130,"column":34}}]},"28":{"line":135,"type":"if","locations":[{"start":{"line":135,"column":12},"end":{"line":135,"column":12}},{"start":{"line":135,"column":12},"end":{"line":135,"column":12}}]},"29":{"line":136,"type":"if","locations":[{"start":{"line":136,"column":16},"end":{"line":136,"column":16}},{"start":{"line":136,"column":16},"end":{"line":136,"column":16}}]},"30":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":16},"end":{"line":140,"column":16}},{"start":{"line":140,"column":16},"end":{"line":140,"column":16}}]},"31":{"line":145,"type":"binary-expr","locations":[{"start":{"line":145,"column":37},"end":{"line":145,"column":44}},{"start":{"line":145,"column":48},"end":{"line":145,"column":55}}]},"32":{"line":152,"type":"if","locations":[{"start":{"line":152,"column":20},"end":{"line":152,"column":20}},{"start":{"line":152,"column":20},"end":{"line":152,"column":20}}]},"33":{"line":156,"type":"if","locations":[{"start":{"line":156,"column":24},"end":{"line":156,"column":24}},{"start":{"line":156,"column":24},"end":{"line":156,"column":24}}]},"34":{"line":160,"type":"if","locations":[{"start":{"line":160,"column":27},"end":{"line":160,"column":27}},{"start":{"line":160,"column":27},"end":{"line":160,"column":27}}]},"35":{"line":163,"type":"cond-expr","locations":[{"start":{"line":165,"column":28},"end":{"line":165,"column":77}},{"start":{"line":166,"column":28},"end":{"line":166,"column":60}}]},"36":{"line":172,"type":"if","locations":[{"start":{"line":172,"column":12},"end":{"line":172,"column":12}},{"start":{"line":172,"column":12},"end":{"line":172,"column":12}}]},"37":{"line":176,"type":"if","locations":[{"start":{"line":176,"column":16},"end":{"line":176,"column":16}},{"start":{"line":176,"column":16},"end":{"line":176,"column":16}}]},"38":{"line":180,"type":"if","locations":[{"start":{"line":180,"column":19},"end":{"line":180,"column":19}},{"start":{"line":180,"column":19},"end":{"line":180,"column":19}}]},"39":{"line":183,"type":"cond-expr","locations":[{"start":{"line":185,"column":20},"end":{"line":185,"column":63}},{"start":{"line":186,"column":20},"end":{"line":186,"column":44}}]},"40":{"line":271,"type":"binary-expr","locations":[{"start":{"line":271,"column":16},"end":{"line":271,"column":21}},{"start":{"line":271,"column":25},"end":{"line":271,"column":27}}]},"41":{"line":272,"type":"binary-expr","locations":[{"start":{"line":272,"column":18},"end":{"line":272,"column":25}},{"start":{"line":272,"column":29},"end":{"line":272,"column":31}}]},"42":{"line":292,"type":"if","locations":[{"start":{"line":292,"column":8},"end":{"line":292,"column":8}},{"start":{"line":292,"column":8},"end":{"line":292,"column":8}}]},"43":{"line":293,"type":"if","locations":[{"start":{"line":293,"column":12},"end":{"line":293,"column":12}},{"start":{"line":293,"column":12},"end":{"line":293,"column":12}}]},"44":{"line":318,"type":"if","locations":[{"start":{"line":318,"column":12},"end":{"line":318,"column":12}},{"start":{"line":318,"column":12},"end":{"line":318,"column":12}}]},"45":{"line":319,"type":"binary-expr","locations":[{"start":{"line":319,"column":29},"end":{"line":319,"column":71}},{"start":{"line":319,"column":75},"end":{"line":319,"column":79}}]},"46":{"line":324,"type":"if","locations":[{"start":{"line":324,"column":12},"end":{"line":324,"column":12}},{"start":{"line":324,"column":12},"end":{"line":324,"column":12}}]},"47":{"line":324,"type":"binary-expr","locations":[{"start":{"line":324,"column":16},"end":{"line":324,"column":25}},{"start":{"line":324,"column":29},"end":{"line":324,"column":39}}]},"48":{"line":325,"type":"if","locations":[{"start":{"line":325,"column":16},"end":{"line":325,"column":16}},{"start":{"line":325,"column":16},"end":{"line":325,"column":16}}]},"49":{"line":341,"type":"if","locations":[{"start":{"line":341,"column":12},"end":{"line":341,"column":12}},{"start":{"line":341,"column":12},"end":{"line":341,"column":12}}]},"50":{"line":341,"type":"binary-expr","locations":[{"start":{"line":341,"column":16},"end":{"line":341,"column":25}},{"start":{"line":341,"column":29},"end":{"line":341,"column":39}}]},"51":{"line":342,"type":"binary-expr","locations":[{"start":{"line":342,"column":30},"end":{"line":342,"column":39}},{"start":{"line":342,"column":43},"end":{"line":342,"column":53}}]},"52":{"line":343,"type":"binary-expr","locations":[{"start":{"line":343,"column":41},"end":{"line":343,"column":50}},{"start":{"line":343,"column":54},"end":{"line":343,"column":64}}]},"53":{"line":344,"type":"if","locations":[{"start":{"line":344,"column":19},"end":{"line":344,"column":19}},{"start":{"line":344,"column":19},"end":{"line":344,"column":19}}]},"54":{"line":347,"type":"if","locations":[{"start":{"line":347,"column":12},"end":{"line":347,"column":12}},{"start":{"line":347,"column":12},"end":{"line":347,"column":12}}]},"55":{"line":347,"type":"binary-expr","locations":[{"start":{"line":347,"column":16},"end":{"line":347,"column":22}},{"start":{"line":347,"column":26},"end":{"line":347,"column":37}},{"start":{"line":347,"column":41},"end":{"line":347,"column":66}}]},"56":{"line":350,"type":"if","locations":[{"start":{"line":350,"column":12},"end":{"line":350,"column":12}},{"start":{"line":350,"column":12},"end":{"line":350,"column":12}}]},"57":{"line":351,"type":"if","locations":[{"start":{"line":351,"column":16},"end":{"line":351,"column":16}},{"start":{"line":351,"column":16},"end":{"line":351,"column":16}}]},"58":{"line":356,"type":"if","locations":[{"start":{"line":356,"column":19},"end":{"line":356,"column":19}},{"start":{"line":356,"column":19},"end":{"line":356,"column":19}}]},"59":{"line":356,"type":"binary-expr","locations":[{"start":{"line":356,"column":23},"end":{"line":356,"column":33}},{"start":{"line":356,"column":37},"end":{"line":356,"column":47}}]},"60":{"line":357,"type":"if","locations":[{"start":{"line":357,"column":16},"end":{"line":357,"column":16}},{"start":{"line":357,"column":16},"end":{"line":357,"column":16}}]},"61":{"line":358,"type":"if","locations":[{"start":{"line":358,"column":20},"end":{"line":358,"column":20}},{"start":{"line":358,"column":20},"end":{"line":358,"column":20}}]},"62":{"line":359,"type":"if","locations":[{"start":{"line":359,"column":24},"end":{"line":359,"column":24}},{"start":{"line":359,"column":24},"end":{"line":359,"column":24}}]},"63":{"line":359,"type":"binary-expr","locations":[{"start":{"line":359,"column":28},"end":{"line":359,"column":33}},{"start":{"line":359,"column":37},"end":{"line":359,"column":62}}]},"64":{"line":362,"type":"if","locations":[{"start":{"line":362,"column":24},"end":{"line":362,"column":24}},{"start":{"line":362,"column":24},"end":{"line":362,"column":24}}]},"65":{"line":365,"type":"if","locations":[{"start":{"line":365,"column":24},"end":{"line":365,"column":24}},{"start":{"line":365,"column":24},"end":{"line":365,"column":24}}]},"66":{"line":368,"type":"if","locations":[{"start":{"line":368,"column":24},"end":{"line":368,"column":24}},{"start":{"line":368,"column":24},"end":{"line":368,"column":24}}]},"67":{"line":375,"type":"if","locations":[{"start":{"line":375,"column":20},"end":{"line":375,"column":20}},{"start":{"line":375,"column":20},"end":{"line":375,"column":20}}]},"68":{"line":383,"type":"if","locations":[{"start":{"line":383,"column":12},"end":{"line":383,"column":12}},{"start":{"line":383,"column":12},"end":{"line":383,"column":12}}]},"69":{"line":388,"type":"if","locations":[{"start":{"line":388,"column":8},"end":{"line":388,"column":8}},{"start":{"line":388,"column":8},"end":{"line":388,"column":8}}]},"70":{"line":388,"type":"binary-expr","locations":[{"start":{"line":388,"column":12},"end":{"line":388,"column":18}},{"start":{"line":388,"column":22},"end":{"line":388,"column":29}},{"start":{"line":388,"column":33},"end":{"line":388,"column":35}},{"start":{"line":388,"column":39},"end":{"line":388,"column":44}},{"start":{"line":388,"column":48},"end":{"line":388,"column":73}}]},"71":{"line":441,"type":"cond-expr","locations":[{"start":{"line":442,"column":12},"end":{"line":442,"column":23}},{"start":{"line":443,"column":12},"end":{"line":443,"column":58}}]},"72":{"line":443,"type":"cond-expr","locations":[{"start":{"line":443,"column":52},"end":{"line":443,"column":53}},{"start":{"line":443,"column":56},"end":{"line":443,"column":57}}]},"73":{"line":456,"type":"if","locations":[{"start":{"line":456,"column":16},"end":{"line":456,"column":16}},{"start":{"line":456,"column":16},"end":{"line":456,"column":16}}]},"74":{"line":458,"type":"if","locations":[{"start":{"line":458,"column":20},"end":{"line":458,"column":20}},{"start":{"line":458,"column":20},"end":{"line":458,"column":20}}]},"75":{"line":462,"type":"binary-expr","locations":[{"start":{"line":462,"column":35},"end":{"line":462,"column":39}},{"start":{"line":462,"column":43},"end":{"line":462,"column":47}}]},"76":{"line":466,"type":"if","locations":[{"start":{"line":466,"column":8},"end":{"line":466,"column":8}},{"start":{"line":466,"column":8},"end":{"line":466,"column":8}}]},"77":{"line":468,"type":"if","locations":[{"start":{"line":468,"column":12},"end":{"line":468,"column":12}},{"start":{"line":468,"column":12},"end":{"line":468,"column":12}}]},"78":{"line":480,"type":"binary-expr","locations":[{"start":{"line":480,"column":12},"end":{"line":480,"column":31}},{"start":{"line":481,"column":13},"end":{"line":481,"column":63}}]},"79":{"line":490,"type":"if","locations":[{"start":{"line":490,"column":8},"end":{"line":490,"column":8}},{"start":{"line":490,"column":8},"end":{"line":490,"column":8}}]},"80":{"line":490,"type":"binary-expr","locations":[{"start":{"line":490,"column":12},"end":{"line":490,"column":20}},{"start":{"line":490,"column":24},"end":{"line":490,"column":39}}]},"81":{"line":491,"type":"cond-expr","locations":[{"start":{"line":491,"column":61},"end":{"line":491,"column":64}},{"start":{"line":491,"column":67},"end":{"line":491,"column":69}}]},"82":{"line":493,"type":"if","locations":[{"start":{"line":493,"column":8},"end":{"line":493,"column":8}},{"start":{"line":493,"column":8},"end":{"line":493,"column":8}}]},"83":{"line":496,"type":"if","locations":[{"start":{"line":496,"column":8},"end":{"line":496,"column":8}},{"start":{"line":496,"column":8},"end":{"line":496,"column":8}}]},"84":{"line":496,"type":"binary-expr","locations":[{"start":{"line":496,"column":12},"end":{"line":496,"column":26}},{"start":{"line":496,"column":30},"end":{"line":496,"column":38}}]},"85":{"line":497,"type":"cond-expr","locations":[{"start":{"line":497,"column":39},"end":{"line":497,"column":42}},{"start":{"line":497,"column":45},"end":{"line":497,"column":47}}]},"86":{"line":501,"type":"cond-expr","locations":[{"start":{"line":502,"column":12},"end":{"line":502,"column":84}},{"start":{"line":503,"column":12},"end":{"line":503,"column":34}}]},"87":{"line":508,"type":"cond-expr","locations":[{"start":{"line":508,"column":31},"end":{"line":508,"column":35}},{"start":{"line":508,"column":38},"end":{"line":508,"column":42}}]},"88":{"line":510,"type":"binary-expr","locations":[{"start":{"line":510,"column":12},"end":{"line":510,"column":31}},{"start":{"line":511,"column":13},"end":{"line":511,"column":63}}]},"89":{"line":532,"type":"binary-expr","locations":[{"start":{"line":532,"column":28},"end":{"line":532,"column":44}},{"start":{"line":532,"column":48},"end":{"line":532,"column":58}}]},"90":{"line":536,"type":"binary-expr","locations":[{"start":{"line":536,"column":33},"end":{"line":536,"column":41}},{"start":{"line":536,"column":45},"end":{"line":536,"column":53}}]},"91":{"line":540,"type":"if","locations":[{"start":{"line":540,"column":12},"end":{"line":540,"column":12}},{"start":{"line":540,"column":12},"end":{"line":540,"column":12}}]},"92":{"line":540,"type":"binary-expr","locations":[{"start":{"line":540,"column":16},"end":{"line":540,"column":32}},{"start":{"line":540,"column":36},"end":{"line":540,"column":44}}]},"93":{"line":543,"type":"if","locations":[{"start":{"line":543,"column":12},"end":{"line":543,"column":12}},{"start":{"line":543,"column":12},"end":{"line":543,"column":12}}]},"94":{"line":548,"type":"if","locations":[{"start":{"line":548,"column":12},"end":{"line":548,"column":12}},{"start":{"line":548,"column":12},"end":{"line":548,"column":12}}]},"95":{"line":550,"type":"if","locations":[{"start":{"line":550,"column":16},"end":{"line":550,"column":16}},{"start":{"line":550,"column":16},"end":{"line":550,"column":16}}]},"96":{"line":557,"type":"if","locations":[{"start":{"line":557,"column":12},"end":{"line":557,"column":12}},{"start":{"line":557,"column":12},"end":{"line":557,"column":12}}]},"97":{"line":557,"type":"binary-expr","locations":[{"start":{"line":557,"column":18},"end":{"line":557,"column":26}},{"start":{"line":557,"column":30},"end":{"line":557,"column":42}}]},"98":{"line":560,"type":"if","locations":[{"start":{"line":560,"column":12},"end":{"line":560,"column":12}},{"start":{"line":560,"column":12},"end":{"line":560,"column":12}}]},"99":{"line":561,"type":"if","locations":[{"start":{"line":561,"column":16},"end":{"line":561,"column":16}},{"start":{"line":561,"column":16},"end":{"line":561,"column":16}}]},"100":{"line":568,"type":"cond-expr","locations":[{"start":{"line":569,"column":17},"end":{"line":569,"column":62}},{"start":{"line":570,"column":16},"end":{"line":570,"column":57}}]},"101":{"line":569,"type":"cond-expr","locations":[{"start":{"line":569,"column":29},"end":{"line":569,"column":51}},{"start":{"line":569,"column":54},"end":{"line":569,"column":62}}]},"102":{"line":570,"type":"cond-expr","locations":[{"start":{"line":570,"column":29},"end":{"line":570,"column":33}},{"start":{"line":570,"column":36},"end":{"line":570,"column":39}}]},"103":{"line":614,"type":"if","locations":[{"start":{"line":614,"column":12},"end":{"line":614,"column":12}},{"start":{"line":614,"column":12},"end":{"line":614,"column":12}}]},"104":{"line":617,"type":"if","locations":[{"start":{"line":617,"column":12},"end":{"line":617,"column":12}},{"start":{"line":617,"column":12},"end":{"line":617,"column":12}}]},"105":{"line":617,"type":"binary-expr","locations":[{"start":{"line":617,"column":18},"end":{"line":617,"column":32}},{"start":{"line":617,"column":36},"end":{"line":617,"column":44}},{"start":{"line":617,"column":48},"end":{"line":617,"column":59}}]},"106":{"line":621,"type":"if","locations":[{"start":{"line":621,"column":12},"end":{"line":621,"column":12}},{"start":{"line":621,"column":12},"end":{"line":621,"column":12}}]},"107":{"line":680,"type":"if","locations":[{"start":{"line":680,"column":4},"end":{"line":680,"column":4}},{"start":{"line":680,"column":4},"end":{"line":680,"column":4}}]},"108":{"line":1802,"type":"if","locations":[{"start":{"line":1802,"column":4},"end":{"line":1802,"column":4}},{"start":{"line":1802,"column":4},"end":{"line":1802,"column":4}}]},"109":{"line":2069,"type":"if","locations":[{"start":{"line":2069,"column":4},"end":{"line":2069,"column":4}},{"start":{"line":2069,"column":4},"end":{"line":2069,"column":4}}]},"110":{"line":2147,"type":"if","locations":[{"start":{"line":2147,"column":4},"end":{"line":2147,"column":4}},{"start":{"line":2147,"column":4},"end":{"line":2147,"column":4}}]},"111":{"line":2838,"type":"if","locations":[{"start":{"line":2838,"column":4},"end":{"line":2838,"column":4}},{"start":{"line":2838,"column":4},"end":{"line":2838,"column":4}}]},"112":{"line":2843,"type":"if","locations":[{"start":{"line":2843,"column":4},"end":{"line":2843,"column":4}},{"start":{"line":2843,"column":4},"end":{"line":2843,"column":4}}]},"113":{"line":2856,"type":"cond-expr","locations":[{"start":{"line":2856,"column":39},"end":{"line":2856,"column":71}},{"start":{"line":2856,"column":74},"end":{"line":2856,"column":80}}]},"114":{"line":2891,"type":"if","locations":[{"start":{"line":2891,"column":4},"end":{"line":2891,"column":4}},{"start":{"line":2891,"column":4},"end":{"line":2891,"column":4}}]},"115":{"line":2895,"type":"binary-expr","locations":[{"start":{"line":2895,"column":16},"end":{"line":2895,"column":33}},{"start":{"line":2895,"column":37},"end":{"line":2895,"column":39}}]},"116":{"line":2902,"type":"binary-expr","locations":[{"start":{"line":2902,"column":14},"end":{"line":2902,"column":21}},{"start":{"line":2902,"column":25},"end":{"line":2902,"column":27}}]},"117":{"line":2904,"type":"if","locations":[{"start":{"line":2904,"column":4},"end":{"line":2904,"column":4}},{"start":{"line":2904,"column":4},"end":{"line":2904,"column":4}}]},"118":{"line":2905,"type":"if","locations":[{"start":{"line":2905,"column":4},"end":{"line":2905,"column":4}},{"start":{"line":2905,"column":4},"end":{"line":2905,"column":4}}]},"119":{"line":2906,"type":"if","locations":[{"start":{"line":2906,"column":4},"end":{"line":2906,"column":4}},{"start":{"line":2906,"column":4},"end":{"line":2906,"column":4}}]},"120":{"line":2910,"type":"if","locations":[{"start":{"line":2910,"column":4},"end":{"line":2910,"column":4}},{"start":{"line":2910,"column":4},"end":{"line":2910,"column":4}}]},"121":{"line":2911,"type":"if","locations":[{"start":{"line":2911,"column":4},"end":{"line":2911,"column":4}},{"start":{"line":2911,"column":4},"end":{"line":2911,"column":4}}]},"122":{"line":2912,"type":"if","locations":[{"start":{"line":2912,"column":4},"end":{"line":2912,"column":4}},{"start":{"line":2912,"column":4},"end":{"line":2912,"column":4}}]},"123":{"line":2916,"type":"if","locations":[{"start":{"line":2916,"column":4},"end":{"line":2916,"column":4}},{"start":{"line":2916,"column":4},"end":{"line":2916,"column":4}}]},"124":{"line":2917,"type":"if","locations":[{"start":{"line":2917,"column":8},"end":{"line":2917,"column":8}},{"start":{"line":2917,"column":8},"end":{"line":2917,"column":8}}]},"125":{"line":2922,"type":"if","locations":[{"start":{"line":2922,"column":8},"end":{"line":2922,"column":8}},{"start":{"line":2922,"column":8},"end":{"line":2922,"column":8}}]},"126":{"line":2925,"type":"cond-expr","locations":[{"start":{"line":2925,"column":40},"end":{"line":2925,"column":80}},{"start":{"line":2925,"column":83},"end":{"line":2925,"column":94}}]},"127":{"line":2934,"type":"binary-expr","locations":[{"start":{"line":2934,"column":19},"end":{"line":2934,"column":33}},{"start":{"line":2934,"column":37},"end":{"line":2934,"column":49}}]},"128":{"line":2935,"type":"cond-expr","locations":[{"start":{"line":2935,"column":33},"end":{"line":2935,"column":60}},{"start":{"line":2935,"column":63},"end":{"line":2935,"column":67}}]},"129":{"line":2967,"type":"if","locations":[{"start":{"line":2967,"column":4},"end":{"line":2967,"column":4}},{"start":{"line":2967,"column":4},"end":{"line":2967,"column":4}}]},"130":{"line":2969,"type":"binary-expr","locations":[{"start":{"line":2969,"column":8},"end":{"line":2969,"column":51}},{"start":{"line":2970,"column":8},"end":{"line":2970,"column":65}},{"start":{"line":2972,"column":8},"end":{"line":2972,"column":98}}]},"131":{"line":2990,"type":"cond-expr","locations":[{"start":{"line":2991,"column":8},"end":{"line":2991,"column":19}},{"start":{"line":2995,"column":8},"end":{"line":2995,"column":81}}]},"132":{"line":3006,"type":"binary-expr","locations":[{"start":{"line":3006,"column":14},"end":{"line":3006,"column":31}},{"start":{"line":3006,"column":35},"end":{"line":3006,"column":65}}]},"133":{"line":3033,"type":"if","locations":[{"start":{"line":3033,"column":8},"end":{"line":3033,"column":8}},{"start":{"line":3033,"column":8},"end":{"line":3033,"column":8}}]},"134":{"line":3055,"type":"cond-expr","locations":[{"start":{"line":3057,"column":8},"end":{"line":3057,"column":57}},{"start":{"line":3059,"column":8},"end":{"line":3059,"column":30}}]},"135":{"line":3105,"type":"if","locations":[{"start":{"line":3105,"column":4},"end":{"line":3105,"column":4}},{"start":{"line":3105,"column":4},"end":{"line":3105,"column":4}}]},"136":{"line":3111,"type":"if","locations":[{"start":{"line":3111,"column":8},"end":{"line":3111,"column":8}},{"start":{"line":3111,"column":8},"end":{"line":3111,"column":8}}]},"137":{"line":3121,"type":"if","locations":[{"start":{"line":3121,"column":8},"end":{"line":3121,"column":8}},{"start":{"line":3121,"column":8},"end":{"line":3121,"column":8}}]},"138":{"line":3142,"type":"if","locations":[{"start":{"line":3142,"column":4},"end":{"line":3142,"column":4}},{"start":{"line":3142,"column":4},"end":{"line":3142,"column":4}}]},"139":{"line":3160,"type":"if","locations":[{"start":{"line":3160,"column":4},"end":{"line":3160,"column":4}},{"start":{"line":3160,"column":4},"end":{"line":3160,"column":4}}]},"140":{"line":3189,"type":"if","locations":[{"start":{"line":3189,"column":8},"end":{"line":3189,"column":8}},{"start":{"line":3189,"column":8},"end":{"line":3189,"column":8}}]},"141":{"line":3190,"type":"binary-expr","locations":[{"start":{"line":3190,"column":13},"end":{"line":3190,"column":23}},{"start":{"line":3190,"column":27},"end":{"line":3190,"column":50}},{"start":{"line":3191,"column":13},"end":{"line":3191,"column":30}},{"start":{"line":3191,"column":34},"end":{"line":3191,"column":51}},{"start":{"line":3192,"column":13},"end":{"line":3192,"column":19}},{"start":{"line":3192,"column":23},"end":{"line":3192,"column":51}}]},"142":{"line":3198,"type":"if","locations":[{"start":{"line":3198,"column":8},"end":{"line":3198,"column":8}},{"start":{"line":3198,"column":8},"end":{"line":3198,"column":8}}]},"143":{"line":3231,"type":"cond-expr","locations":[{"start":{"line":3231,"column":34},"end":{"line":3231,"column":39}},{"start":{"line":3231,"column":42},"end":{"line":3231,"column":47}}]},"144":{"line":3232,"type":"cond-expr","locations":[{"start":{"line":3232,"column":34},"end":{"line":3232,"column":39}},{"start":{"line":3232,"column":42},"end":{"line":3232,"column":47}}]},"145":{"line":3233,"type":"cond-expr","locations":[{"start":{"line":3233,"column":35},"end":{"line":3233,"column":40}},{"start":{"line":3233,"column":43},"end":{"line":3233,"column":48}}]},"146":{"line":3234,"type":"cond-expr","locations":[{"start":{"line":3234,"column":37},"end":{"line":3234,"column":42}},{"start":{"line":3234,"column":45},"end":{"line":3234,"column":50}}]},"147":{"line":3235,"type":"cond-expr","locations":[{"start":{"line":3235,"column":35},"end":{"line":3235,"column":40}},{"start":{"line":3235,"column":43},"end":{"line":3235,"column":48}}]},"148":{"line":3250,"type":"if","locations":[{"start":{"line":3250,"column":4},"end":{"line":3250,"column":4}},{"start":{"line":3250,"column":4},"end":{"line":3250,"column":4}}]},"149":{"line":3296,"type":"if","locations":[{"start":{"line":3296,"column":4},"end":{"line":3296,"column":4}},{"start":{"line":3296,"column":4},"end":{"line":3296,"column":4}}]},"150":{"line":3297,"type":"if","locations":[{"start":{"line":3297,"column":8},"end":{"line":3297,"column":8}},{"start":{"line":3297,"column":8},"end":{"line":3297,"column":8}}]},"151":{"line":3304,"type":"cond-expr","locations":[{"start":{"line":3304,"column":38},"end":{"line":3304,"column":40}},{"start":{"line":3304,"column":43},"end":{"line":3304,"column":58}}]},"152":{"line":3305,"type":"cond-expr","locations":[{"start":{"line":3305,"column":34},"end":{"line":3305,"column":36}},{"start":{"line":3305,"column":39},"end":{"line":3305,"column":52}}]},"153":{"line":3307,"type":"if","locations":[{"start":{"line":3307,"column":4},"end":{"line":3307,"column":4}},{"start":{"line":3307,"column":4},"end":{"line":3307,"column":4}}]},"154":{"line":3307,"type":"binary-expr","locations":[{"start":{"line":3307,"column":8},"end":{"line":3307,"column":37}},{"start":{"line":3307,"column":41},"end":{"line":3307,"column":66}}]},"155":{"line":3312,"type":"if","locations":[{"start":{"line":3312,"column":4},"end":{"line":3312,"column":4}},{"start":{"line":3312,"column":4},"end":{"line":3312,"column":4}}]},"156":{"line":3316,"type":"if","locations":[{"start":{"line":3316,"column":4},"end":{"line":3316,"column":4}},{"start":{"line":3316,"column":4},"end":{"line":3316,"column":4}}]},"157":{"line":3339,"type":"if","locations":[{"start":{"line":3339,"column":16},"end":{"line":3339,"column":16}},{"start":{"line":3339,"column":16},"end":{"line":3339,"column":16}}]},"158":{"line":3339,"type":"binary-expr","locations":[{"start":{"line":3339,"column":20},"end":{"line":3339,"column":26}},{"start":{"line":3339,"column":30},"end":{"line":3339,"column":44}}]},"159":{"line":3344,"type":"binary-expr","locations":[{"start":{"line":3344,"column":21},"end":{"line":3344,"column":27}},{"start":{"line":3344,"column":31},"end":{"line":3344,"column":45}}]},"160":{"line":3346,"type":"if","locations":[{"start":{"line":3346,"column":12},"end":{"line":3346,"column":12}},{"start":{"line":3346,"column":12},"end":{"line":3346,"column":12}}]},"161":{"line":3348,"type":"binary-expr","locations":[{"start":{"line":3348,"column":24},"end":{"line":3348,"column":42}},{"start":{"line":3348,"column":46},"end":{"line":3348,"column":47}}]},"162":{"line":3354,"type":"if","locations":[{"start":{"line":3354,"column":16},"end":{"line":3354,"column":16}},{"start":{"line":3354,"column":16},"end":{"line":3354,"column":16}}]},"163":{"line":3354,"type":"binary-expr","locations":[{"start":{"line":3354,"column":20},"end":{"line":3354,"column":33}},{"start":{"line":3354,"column":37},"end":{"line":3354,"column":59}}]},"164":{"line":3356,"type":"if","locations":[{"start":{"line":3356,"column":23},"end":{"line":3356,"column":23}},{"start":{"line":3356,"column":23},"end":{"line":3356,"column":23}}]},"165":{"line":3356,"type":"binary-expr","locations":[{"start":{"line":3356,"column":27},"end":{"line":3356,"column":40}},{"start":{"line":3356,"column":44},"end":{"line":3356,"column":64}}]},"166":{"line":3370,"type":"cond-expr","locations":[{"start":{"line":3370,"column":48},"end":{"line":3370,"column":68}},{"start":{"line":3370,"column":71},"end":{"line":3370,"column":75}}]},"167":{"line":3461,"type":"binary-expr","locations":[{"start":{"line":3461,"column":14},"end":{"line":3461,"column":21}},{"start":{"line":3461,"column":25},"end":{"line":3461,"column":27}}]},"168":{"line":3465,"type":"if","locations":[{"start":{"line":3465,"column":4},"end":{"line":3465,"column":4}},{"start":{"line":3465,"column":4},"end":{"line":3465,"column":4}}]},"169":{"line":3469,"type":"if","locations":[{"start":{"line":3469,"column":4},"end":{"line":3469,"column":4}},{"start":{"line":3469,"column":4},"end":{"line":3469,"column":4}}]},"170":{"line":3484,"type":"binary-expr","locations":[{"start":{"line":3484,"column":15},"end":{"line":3484,"column":28}},{"start":{"line":3484,"column":32},"end":{"line":3484,"column":44}}]},"171":{"line":3510,"type":"if","locations":[{"start":{"line":3510,"column":4},"end":{"line":3510,"column":4}},{"start":{"line":3510,"column":4},"end":{"line":3510,"column":4}}]},"172":{"line":3513,"type":"binary-expr","locations":[{"start":{"line":3513,"column":11},"end":{"line":3513,"column":37}},{"start":{"line":3514,"column":8},"end":{"line":3514,"column":60}}]},"173":{"line":3520,"type":"if","locations":[{"start":{"line":3520,"column":4},"end":{"line":3520,"column":4}},{"start":{"line":3520,"column":4},"end":{"line":3520,"column":4}}]},"174":{"line":3581,"type":"binary-expr","locations":[{"start":{"line":3581,"column":11},"end":{"line":3581,"column":21}},{"start":{"line":3581,"column":25},"end":{"line":3581,"column":73}}]},"175":{"line":3581,"type":"binary-expr","locations":[{"start":{"line":3581,"column":28},"end":{"line":3581,"column":34}},{"start":{"line":3581,"column":39},"end":{"line":3581,"column":51}},{"start":{"line":3581,"column":55},"end":{"line":3581,"column":71}}]},"176":{"line":3582,"type":"if","locations":[{"start":{"line":3582,"column":4},"end":{"line":3582,"column":4}},{"start":{"line":3582,"column":4},"end":{"line":3582,"column":4}}]},"177":{"line":3584,"type":"if","locations":[{"start":{"line":3584,"column":11},"end":{"line":3584,"column":11}},{"start":{"line":3584,"column":11},"end":{"line":3584,"column":11}}]},"178":{"line":3594,"type":"binary-expr","locations":[{"start":{"line":3594,"column":24},"end":{"line":3594,"column":41}},{"start":{"line":3594,"column":45},"end":{"line":3594,"column":47}}]},"179":{"line":3597,"type":"binary-expr","locations":[{"start":{"line":3597,"column":9},"end":{"line":3597,"column":36}},{"start":{"line":3598,"column":8},"end":{"line":3604,"column":10}}]},"180":{"line":3601,"type":"cond-expr","locations":[{"start":{"line":3601,"column":28},"end":{"line":3601,"column":48}},{"start":{"line":3601,"column":51},"end":{"line":3601,"column":60}}]},"181":{"line":3607,"type":"binary-expr","locations":[{"start":{"line":3607,"column":10},"end":{"line":3607,"column":13}},{"start":{"line":3607,"column":17},"end":{"line":3607,"column":18}}]},"182":{"line":3615,"type":"if","locations":[{"start":{"line":3615,"column":4},"end":{"line":3615,"column":4}},{"start":{"line":3615,"column":4},"end":{"line":3615,"column":4}}]},"183":{"line":3615,"type":"binary-expr","locations":[{"start":{"line":3615,"column":8},"end":{"line":3615,"column":13}},{"start":{"line":3615,"column":17},"end":{"line":3615,"column":22}},{"start":{"line":3615,"column":26},"end":{"line":3615,"column":44}}]},"184":{"line":3619,"type":"if","locations":[{"start":{"line":3619,"column":4},"end":{"line":3619,"column":4}},{"start":{"line":3619,"column":4},"end":{"line":3619,"column":4}}]},"185":{"line":3620,"type":"cond-expr","locations":[{"start":{"line":3620,"column":34},"end":{"line":3620,"column":46}},{"start":{"line":3620,"column":49},"end":{"line":3620,"column":50}}]},"186":{"line":3662,"type":"binary-expr","locations":[{"start":{"line":3662,"column":29},"end":{"line":3662,"column":44}},{"start":{"line":3662,"column":48},"end":{"line":3662,"column":49}}]},"187":{"line":3706,"type":"if","locations":[{"start":{"line":3706,"column":4},"end":{"line":3706,"column":4}},{"start":{"line":3706,"column":4},"end":{"line":3706,"column":4}}]},"188":{"line":3706,"type":"binary-expr","locations":[{"start":{"line":3706,"column":8},"end":{"line":3706,"column":24}},{"start":{"line":3706,"column":28},"end":{"line":3706,"column":42}}]},"189":{"line":3710,"type":"if","locations":[{"start":{"line":3710,"column":4},"end":{"line":3710,"column":4}},{"start":{"line":3710,"column":4},"end":{"line":3710,"column":4}}]},"190":{"line":3710,"type":"binary-expr","locations":[{"start":{"line":3710,"column":8},"end":{"line":3710,"column":25}},{"start":{"line":3710,"column":29},"end":{"line":3710,"column":44}}]},"191":{"line":3778,"type":"binary-expr","locations":[{"start":{"line":3778,"column":18},"end":{"line":3778,"column":30}},{"start":{"line":3778,"column":34},"end":{"line":3778,"column":49}},{"start":{"line":3778,"column":54},"end":{"line":3778,"column":69}}]},"192":{"line":3779,"type":"binary-expr","locations":[{"start":{"line":3779,"column":20},"end":{"line":3779,"column":67}},{"start":{"line":3779,"column":72},"end":{"line":3779,"column":78}}]},"193":{"line":3779,"type":"cond-expr","locations":[{"start":{"line":3779,"column":30},"end":{"line":3779,"column":33}},{"start":{"line":3779,"column":36},"end":{"line":3779,"column":38}}]},"194":{"line":3779,"type":"cond-expr","locations":[{"start":{"line":3779,"column":58},"end":{"line":3779,"column":61}},{"start":{"line":3779,"column":64},"end":{"line":3779,"column":66}}]},"195":{"line":3783,"type":"binary-expr","locations":[{"start":{"line":3783,"column":24},"end":{"line":3783,"column":41}},{"start":{"line":3783,"column":45},"end":{"line":3783,"column":47}}]},"196":{"line":3786,"type":"binary-expr","locations":[{"start":{"line":3786,"column":9},"end":{"line":3786,"column":36}},{"start":{"line":3787,"column":8},"end":{"line":3791,"column":10}}]},"197":{"line":3796,"type":"if","locations":[{"start":{"line":3796,"column":4},"end":{"line":3796,"column":4}},{"start":{"line":3796,"column":4},"end":{"line":3796,"column":4}}]},"198":{"line":3798,"type":"cond-expr","locations":[{"start":{"line":3800,"column":17},"end":{"line":3800,"column":48}},{"start":{"line":3800,"column":52},"end":{"line":3800,"column":53}}]},"199":{"line":3798,"type":"binary-expr","locations":[{"start":{"line":3798,"column":13},"end":{"line":3798,"column":28}},{"start":{"line":3798,"column":32},"end":{"line":3798,"column":38}}]},"200":{"line":3804,"type":"cond-expr","locations":[{"start":{"line":3804,"column":21},"end":{"line":3804,"column":33}},{"start":{"line":3804,"column":38},"end":{"line":3804,"column":57}}]},"201":{"line":3804,"type":"binary-expr","locations":[{"start":{"line":3804,"column":21},"end":{"line":3804,"column":27}},{"start":{"line":3804,"column":31},"end":{"line":3804,"column":33}}]},"202":{"line":3804,"type":"binary-expr","locations":[{"start":{"line":3804,"column":38},"end":{"line":3804,"column":44}},{"start":{"line":3804,"column":48},"end":{"line":3804,"column":57}}]},"203":{"line":3837,"type":"cond-expr","locations":[{"start":{"line":3837,"column":40},"end":{"line":3837,"column":52}},{"start":{"line":3837,"column":55},"end":{"line":3837,"column":76}}]},"204":{"line":3841,"type":"if","locations":[{"start":{"line":3841,"column":12},"end":{"line":3841,"column":12}},{"start":{"line":3841,"column":12},"end":{"line":3841,"column":12}}]},"205":{"line":3847,"type":"if","locations":[{"start":{"line":3847,"column":16},"end":{"line":3847,"column":16}},{"start":{"line":3847,"column":16},"end":{"line":3847,"column":16}}]},"206":{"line":3847,"type":"binary-expr","locations":[{"start":{"line":3847,"column":22},"end":{"line":3847,"column":56}},{"start":{"line":3847,"column":60},"end":{"line":3847,"column":88}}]},"207":{"line":3851,"type":"binary-expr","locations":[{"start":{"line":3851,"column":29},"end":{"line":3851,"column":48}},{"start":{"line":3851,"column":52},"end":{"line":3851,"column":54}}]},"208":{"line":3861,"type":"cond-expr","locations":[{"start":{"line":3862,"column":12},"end":{"line":3862,"column":19}},{"start":{"line":3863,"column":12},"end":{"line":3863,"column":44}}]},"209":{"line":3861,"type":"binary-expr","locations":[{"start":{"line":3861,"column":17},"end":{"line":3861,"column":43}},{"start":{"line":3861,"column":48},"end":{"line":3861,"column":63}}]},"210":{"line":3916,"type":"binary-expr","locations":[{"start":{"line":3916,"column":18},"end":{"line":3916,"column":31}},{"start":{"line":3916,"column":35},"end":{"line":3916,"column":50}},{"start":{"line":3916,"column":55},"end":{"line":3916,"column":70}}]},"211":{"line":3917,"type":"binary-expr","locations":[{"start":{"line":3917,"column":20},"end":{"line":3917,"column":68}},{"start":{"line":3917,"column":73},"end":{"line":3917,"column":79}}]},"212":{"line":3917,"type":"cond-expr","locations":[{"start":{"line":3917,"column":30},"end":{"line":3917,"column":33}},{"start":{"line":3917,"column":36},"end":{"line":3917,"column":38}}]},"213":{"line":3917,"type":"cond-expr","locations":[{"start":{"line":3917,"column":59},"end":{"line":3917,"column":62}},{"start":{"line":3917,"column":65},"end":{"line":3917,"column":67}}]},"214":{"line":3921,"type":"if","locations":[{"start":{"line":3921,"column":4},"end":{"line":3921,"column":4}},{"start":{"line":3921,"column":4},"end":{"line":3921,"column":4}}]},"215":{"line":3922,"type":"binary-expr","locations":[{"start":{"line":3922,"column":29},"end":{"line":3922,"column":47}},{"start":{"line":3922,"column":51},"end":{"line":3922,"column":53}}]},"216":{"line":3926,"type":"binary-expr","locations":[{"start":{"line":3926,"column":13},"end":{"line":3926,"column":41}},{"start":{"line":3927,"column":12},"end":{"line":3931,"column":14}}]},"217":{"line":3933,"type":"if","locations":[{"start":{"line":3933,"column":11},"end":{"line":3933,"column":11}},{"start":{"line":3933,"column":11},"end":{"line":3933,"column":11}}]},"218":{"line":3940,"type":"if","locations":[{"start":{"line":3940,"column":4},"end":{"line":3940,"column":4}},{"start":{"line":3940,"column":4},"end":{"line":3940,"column":4}}]},"219":{"line":3940,"type":"binary-expr","locations":[{"start":{"line":3940,"column":8},"end":{"line":3940,"column":15}},{"start":{"line":3940,"column":19},"end":{"line":3940,"column":32}}]},"220":{"line":4065,"type":"if","locations":[{"start":{"line":4065,"column":4},"end":{"line":4065,"column":4}},{"start":{"line":4065,"column":4},"end":{"line":4065,"column":4}}]},"221":{"line":4065,"type":"binary-expr","locations":[{"start":{"line":4065,"column":8},"end":{"line":4065,"column":23}},{"start":{"line":4065,"column":27},"end":{"line":4065,"column":41}}]},"222":{"line":4069,"type":"if","locations":[{"start":{"line":4069,"column":4},"end":{"line":4069,"column":4}},{"start":{"line":4069,"column":4},"end":{"line":4069,"column":4}}]},"223":{"line":4069,"type":"binary-expr","locations":[{"start":{"line":4069,"column":8},"end":{"line":4069,"column":24}},{"start":{"line":4069,"column":28},"end":{"line":4069,"column":43}}]},"224":{"line":4096,"type":"binary-expr","locations":[{"start":{"line":4096,"column":14},"end":{"line":4096,"column":21}},{"start":{"line":4096,"column":25},"end":{"line":4096,"column":27}}]},"225":{"line":4097,"type":"binary-expr","locations":[{"start":{"line":4097,"column":22},"end":{"line":4097,"column":41}},{"start":{"line":4097,"column":45},"end":{"line":4097,"column":49}}]},"226":{"line":4106,"type":"if","locations":[{"start":{"line":4106,"column":8},"end":{"line":4106,"column":8}},{"start":{"line":4106,"column":8},"end":{"line":4106,"column":8}}]},"227":{"line":4109,"type":"if","locations":[{"start":{"line":4109,"column":12},"end":{"line":4109,"column":12}},{"start":{"line":4109,"column":12},"end":{"line":4109,"column":12}}]},"228":{"line":4113,"type":"if","locations":[{"start":{"line":4113,"column":15},"end":{"line":4113,"column":15}},{"start":{"line":4113,"column":15},"end":{"line":4113,"column":15}}]},"229":{"line":4121,"type":"if","locations":[{"start":{"line":4121,"column":4},"end":{"line":4121,"column":4}},{"start":{"line":4121,"column":4},"end":{"line":4121,"column":4}}]},"230":{"line":4121,"type":"binary-expr","locations":[{"start":{"line":4121,"column":10},"end":{"line":4121,"column":35}},{"start":{"line":4121,"column":39},"end":{"line":4121,"column":54}}]},"231":{"line":4131,"type":"if","locations":[{"start":{"line":4131,"column":8},"end":{"line":4131,"column":8}},{"start":{"line":4131,"column":8},"end":{"line":4131,"column":8}}]},"232":{"line":4133,"type":"binary-expr","locations":[{"start":{"line":4133,"column":28},"end":{"line":4133,"column":47}},{"start":{"line":4133,"column":51},"end":{"line":4133,"column":83}},{"start":{"line":4133,"column":88},"end":{"line":4133,"column":90}}]},"233":{"line":4143,"type":"cond-expr","locations":[{"start":{"line":4143,"column":45},"end":{"line":4143,"column":47}},{"start":{"line":4143,"column":50},"end":{"line":4143,"column":53}}]},"234":{"line":4167,"type":"if","locations":[{"start":{"line":4167,"column":4},"end":{"line":4167,"column":4}},{"start":{"line":4167,"column":4},"end":{"line":4167,"column":4}}]},"235":{"line":4171,"type":"if","locations":[{"start":{"line":4171,"column":8},"end":{"line":4171,"column":8}},{"start":{"line":4171,"column":8},"end":{"line":4171,"column":8}}]},"236":{"line":4171,"type":"binary-expr","locations":[{"start":{"line":4171,"column":12},"end":{"line":4171,"column":28}},{"start":{"line":4171,"column":32},"end":{"line":4171,"column":48}},{"start":{"line":4171,"column":52},"end":{"line":4171,"column":75}}]},"237":{"line":4183,"type":"if","locations":[{"start":{"line":4183,"column":20},"end":{"line":4183,"column":20}},{"start":{"line":4183,"column":20},"end":{"line":4183,"column":20}}]},"238":{"line":4191,"type":"if","locations":[{"start":{"line":4191,"column":8},"end":{"line":4191,"column":8}},{"start":{"line":4191,"column":8},"end":{"line":4191,"column":8}}]},"239":{"line":4191,"type":"binary-expr","locations":[{"start":{"line":4191,"column":12},"end":{"line":4191,"column":28}},{"start":{"line":4191,"column":32},"end":{"line":4191,"column":61}}]},"240":{"line":4195,"type":"if","locations":[{"start":{"line":4195,"column":16},"end":{"line":4195,"column":16}},{"start":{"line":4195,"column":16},"end":{"line":4195,"column":16}}]},"241":{"line":4202,"type":"if","locations":[{"start":{"line":4202,"column":8},"end":{"line":4202,"column":8}},{"start":{"line":4202,"column":8},"end":{"line":4202,"column":8}}]},"242":{"line":4202,"type":"binary-expr","locations":[{"start":{"line":4202,"column":12},"end":{"line":4202,"column":23}},{"start":{"line":4202,"column":27},"end":{"line":4202,"column":43}},{"start":{"line":4202,"column":48},"end":{"line":4202,"column":76}}]},"243":{"line":4207,"type":"if","locations":[{"start":{"line":4207,"column":4},"end":{"line":4207,"column":4}},{"start":{"line":4207,"column":4},"end":{"line":4207,"column":4}}]},"244":{"line":4241,"type":"if","locations":[{"start":{"line":4241,"column":4},"end":{"line":4241,"column":4}},{"start":{"line":4241,"column":4},"end":{"line":4241,"column":4}}]},"245":{"line":4244,"type":"if","locations":[{"start":{"line":4244,"column":11},"end":{"line":4244,"column":11}},{"start":{"line":4244,"column":11},"end":{"line":4244,"column":11}}]},"246":{"line":4275,"type":"if","locations":[{"start":{"line":4275,"column":4},"end":{"line":4275,"column":4}},{"start":{"line":4275,"column":4},"end":{"line":4275,"column":4}}]},"247":{"line":4276,"type":"if","locations":[{"start":{"line":4276,"column":8},"end":{"line":4276,"column":8}},{"start":{"line":4276,"column":8},"end":{"line":4276,"column":8}}]},"248":{"line":4286,"type":"if","locations":[{"start":{"line":4286,"column":4},"end":{"line":4286,"column":4}},{"start":{"line":4286,"column":4},"end":{"line":4286,"column":4}}]},"249":{"line":4292,"type":"if","locations":[{"start":{"line":4292,"column":12},"end":{"line":4292,"column":12}},{"start":{"line":4292,"column":12},"end":{"line":4292,"column":12}}]},"250":{"line":4298,"type":"if","locations":[{"start":{"line":4298,"column":20},"end":{"line":4298,"column":20}},{"start":{"line":4298,"column":20},"end":{"line":4298,"column":20}}]},"251":{"line":4305,"type":"if","locations":[{"start":{"line":4305,"column":12},"end":{"line":4305,"column":12}},{"start":{"line":4305,"column":12},"end":{"line":4305,"column":12}}]},"252":{"line":4305,"type":"binary-expr","locations":[{"start":{"line":4305,"column":16},"end":{"line":4305,"column":23}},{"start":{"line":4305,"column":27},"end":{"line":4305,"column":40}}]},"253":{"line":4314,"type":"cond-expr","locations":[{"start":{"line":4314,"column":51},"end":{"line":4314,"column":55}},{"start":{"line":4314,"column":58},"end":{"line":4314,"column":70}}]},"254":{"line":4320,"type":"if","locations":[{"start":{"line":4320,"column":16},"end":{"line":4320,"column":16}},{"start":{"line":4320,"column":16},"end":{"line":4320,"column":16}}]},"255":{"line":4331,"type":"if","locations":[{"start":{"line":4331,"column":20},"end":{"line":4331,"column":20}},{"start":{"line":4331,"column":20},"end":{"line":4331,"column":20}}]},"256":{"line":4332,"type":"binary-expr","locations":[{"start":{"line":4332,"column":31},"end":{"line":4332,"column":38}},{"start":{"line":4332,"column":42},"end":{"line":4332,"column":44}}]},"257":{"line":4335,"type":"cond-expr","locations":[{"start":{"line":4335,"column":39},"end":{"line":4335,"column":64}},{"start":{"line":4335,"column":67},"end":{"line":4335,"column":69}}]},"258":{"line":4336,"type":"if","locations":[{"start":{"line":4336,"column":20},"end":{"line":4336,"column":20}},{"start":{"line":4336,"column":20},"end":{"line":4336,"column":20}}]},"259":{"line":4339,"type":"binary-expr","locations":[{"start":{"line":4339,"column":27},"end":{"line":4339,"column":38}},{"start":{"line":4339,"column":42},"end":{"line":4339,"column":44}}]},"260":{"line":4342,"type":"if","locations":[{"start":{"line":4342,"column":16},"end":{"line":4342,"column":16}},{"start":{"line":4342,"column":16},"end":{"line":4342,"column":16}}]},"261":{"line":4345,"type":"if","locations":[{"start":{"line":4345,"column":16},"end":{"line":4345,"column":16}},{"start":{"line":4345,"column":16},"end":{"line":4345,"column":16}}]},"262":{"line":4345,"type":"binary-expr","locations":[{"start":{"line":4345,"column":20},"end":{"line":4345,"column":30}},{"start":{"line":4345,"column":34},"end":{"line":4345,"column":43}}]},"263":{"line":4348,"type":"if","locations":[{"start":{"line":4348,"column":16},"end":{"line":4348,"column":16}},{"start":{"line":4348,"column":16},"end":{"line":4348,"column":16}}]},"264":{"line":4351,"type":"if","locations":[{"start":{"line":4351,"column":16},"end":{"line":4351,"column":16}},{"start":{"line":4351,"column":16},"end":{"line":4351,"column":16}}]},"265":{"line":4368,"type":"if","locations":[{"start":{"line":4368,"column":16},"end":{"line":4368,"column":16}},{"start":{"line":4368,"column":16},"end":{"line":4368,"column":16}}]},"266":{"line":4369,"type":"if","locations":[{"start":{"line":4369,"column":20},"end":{"line":4369,"column":20}},{"start":{"line":4369,"column":20},"end":{"line":4369,"column":20}}]},"267":{"line":4372,"type":"binary-expr","locations":[{"start":{"line":4372,"column":27},"end":{"line":4372,"column":35}},{"start":{"line":4372,"column":39},"end":{"line":4372,"column":41}}]},"268":{"line":4380,"type":"if","locations":[{"start":{"line":4380,"column":4},"end":{"line":4380,"column":4}},{"start":{"line":4380,"column":4},"end":{"line":4380,"column":4}}]},"269":{"line":4381,"type":"if","locations":[{"start":{"line":4381,"column":8},"end":{"line":4381,"column":8}},{"start":{"line":4381,"column":8},"end":{"line":4381,"column":8}}]},"270":{"line":4403,"type":"if","locations":[{"start":{"line":4403,"column":4},"end":{"line":4403,"column":4}},{"start":{"line":4403,"column":4},"end":{"line":4403,"column":4}}]},"271":{"line":4422,"type":"cond-expr","locations":[{"start":{"line":4422,"column":35},"end":{"line":4422,"column":37}},{"start":{"line":4422,"column":40},"end":{"line":4422,"column":45}}]},"272":{"line":4426,"type":"if","locations":[{"start":{"line":4426,"column":8},"end":{"line":4426,"column":8}},{"start":{"line":4426,"column":8},"end":{"line":4426,"column":8}}]},"273":{"line":4428,"type":"if","locations":[{"start":{"line":4428,"column":12},"end":{"line":4428,"column":12}},{"start":{"line":4428,"column":12},"end":{"line":4428,"column":12}}]},"274":{"line":4428,"type":"binary-expr","locations":[{"start":{"line":4428,"column":16},"end":{"line":4428,"column":32}},{"start":{"line":4428,"column":36},"end":{"line":4428,"column":60}}]},"275":{"line":4436,"type":"if","locations":[{"start":{"line":4436,"column":4},"end":{"line":4436,"column":4}},{"start":{"line":4436,"column":4},"end":{"line":4436,"column":4}}]},"276":{"line":4437,"type":"if","locations":[{"start":{"line":4437,"column":8},"end":{"line":4437,"column":8}},{"start":{"line":4437,"column":8},"end":{"line":4437,"column":8}}]},"277":{"line":4437,"type":"binary-expr","locations":[{"start":{"line":4437,"column":12},"end":{"line":4437,"column":43}},{"start":{"line":4437,"column":47},"end":{"line":4437,"column":57}}]},"278":{"line":4445,"type":"cond-expr","locations":[{"start":{"line":4445,"column":35},"end":{"line":4445,"column":57}},{"start":{"line":4445,"column":60},"end":{"line":4445,"column":66}}]},"279":{"line":4461,"type":"if","locations":[{"start":{"line":4461,"column":8},"end":{"line":4461,"column":8}},{"start":{"line":4461,"column":8},"end":{"line":4461,"column":8}}]},"280":{"line":4461,"type":"binary-expr","locations":[{"start":{"line":4461,"column":12},"end":{"line":4461,"column":28}},{"start":{"line":4461,"column":32},"end":{"line":4461,"column":54}}]},"281":{"line":4484,"type":"if","locations":[{"start":{"line":4484,"column":8},"end":{"line":4484,"column":8}},{"start":{"line":4484,"column":8},"end":{"line":4484,"column":8}}]},"282":{"line":4487,"type":"if","locations":[{"start":{"line":4487,"column":8},"end":{"line":4487,"column":8}},{"start":{"line":4487,"column":8},"end":{"line":4487,"column":8}}]},"283":{"line":4493,"type":"if","locations":[{"start":{"line":4493,"column":8},"end":{"line":4493,"column":8}},{"start":{"line":4493,"column":8},"end":{"line":4493,"column":8}}]},"284":{"line":4493,"type":"binary-expr","locations":[{"start":{"line":4493,"column":12},"end":{"line":4493,"column":22}},{"start":{"line":4493,"column":26},"end":{"line":4493,"column":49}}]},"285":{"line":4514,"type":"cond-expr","locations":[{"start":{"line":4514,"column":26},"end":{"line":4514,"column":36}},{"start":{"line":4514,"column":39},"end":{"line":4514,"column":47}}]},"286":{"line":4560,"type":"cond-expr","locations":[{"start":{"line":4560,"column":39},"end":{"line":4560,"column":79}},{"start":{"line":4560,"column":83},"end":{"line":4560,"column":92}}]},"287":{"line":4562,"type":"if","locations":[{"start":{"line":4562,"column":8},"end":{"line":4562,"column":8}},{"start":{"line":4562,"column":8},"end":{"line":4562,"column":8}}]},"288":{"line":4562,"type":"binary-expr","locations":[{"start":{"line":4562,"column":12},"end":{"line":4562,"column":18}},{"start":{"line":4562,"column":22},"end":{"line":4562,"column":54}}]},"289":{"line":4568,"type":"cond-expr","locations":[{"start":{"line":4569,"column":16},"end":{"line":4569,"column":18}},{"start":{"line":4569,"column":21},"end":{"line":4569,"column":27}}]},"290":{"line":4568,"type":"binary-expr","locations":[{"start":{"line":4568,"column":12},"end":{"line":4568,"column":43}},{"start":{"line":4568,"column":47},"end":{"line":4568,"column":82}}]},"291":{"line":4583,"type":"if","locations":[{"start":{"line":4583,"column":8},"end":{"line":4583,"column":8}},{"start":{"line":4583,"column":8},"end":{"line":4583,"column":8}}]},"292":{"line":4584,"type":"binary-expr","locations":[{"start":{"line":4584,"column":12},"end":{"line":4588,"column":13}},{"start":{"line":4589,"column":12},"end":{"line":4589,"column":28}}]},"293":{"line":4585,"type":"binary-expr","locations":[{"start":{"line":4585,"column":16},"end":{"line":4585,"column":38}},{"start":{"line":4586,"column":16},"end":{"line":4586,"column":39}},{"start":{"line":4587,"column":16},"end":{"line":4587,"column":53}}]},"294":{"line":4614,"type":"if","locations":[{"start":{"line":4614,"column":8},"end":{"line":4614,"column":8}},{"start":{"line":4614,"column":8},"end":{"line":4614,"column":8}}]},"295":{"line":4617,"type":"if","locations":[{"start":{"line":4617,"column":8},"end":{"line":4617,"column":8}},{"start":{"line":4617,"column":8},"end":{"line":4617,"column":8}}]},"296":{"line":4617,"type":"binary-expr","locations":[{"start":{"line":4617,"column":12},"end":{"line":4617,"column":33}},{"start":{"line":4617,"column":37},"end":{"line":4617,"column":61}}]},"297":{"line":4620,"type":"if","locations":[{"start":{"line":4620,"column":8},"end":{"line":4620,"column":8}},{"start":{"line":4620,"column":8},"end":{"line":4620,"column":8}}]},"298":{"line":4637,"type":"if","locations":[{"start":{"line":4637,"column":8},"end":{"line":4637,"column":8}},{"start":{"line":4637,"column":8},"end":{"line":4637,"column":8}}]}},"code":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.XRegExp = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){","/*!"," * XRegExp.build 3.2.0"," * <xregexp.com>"," * Steven Levithan (c) 2012-2017 MIT License"," * Inspired by Lea Verou's RegExp.create <lea.verou.me>"," */","","module.exports = function(XRegExp) {","    'use strict';","","    var REGEX_DATA = 'xregexp';","    var subParts = /(\\()(?!\\?)|\\\\([1-9]\\d*)|\\\\[\\s\\S]|\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/g;","    var parts = XRegExp.union([/\\({{([\\w$]+)}}\\)|{{([\\w$]+)}}/, subParts], 'g', {","        conjunction: 'or'","    });","","    /**","     * Strips a leading `^` and trailing unescaped `$`, if both are present.","     *","     * @private","     * @param {String} pattern Pattern to process.","     * @returns {String} Pattern with edge anchors removed.","     */","    function deanchor(pattern) {","        // Allow any number of empty noncapturing groups before/after anchors, because regexes","        // built/generated by XRegExp sometimes include them","        var leadingAnchor = /^(?:\\(\\?:\\))*\\^/;","        var trailingAnchor = /\\$(?:\\(\\?:\\))*$/;","","        if (","            leadingAnchor.test(pattern) &&","            trailingAnchor.test(pattern) &&","            // Ensure that the trailing `$` isn't escaped","            trailingAnchor.test(pattern.replace(/\\\\[\\s\\S]/g, ''))","        ) {","            return pattern.replace(leadingAnchor, '').replace(trailingAnchor, '');","        }","","        return pattern;","    }","","    /**","     * Converts the provided value to an XRegExp. Native RegExp flags are not preserved.","     *","     * @private","     * @param {String|RegExp} value Value to convert.","     * @param {Boolean} [addFlagX] Whether to apply the `x` flag in cases when `value` is not","     *   already a regex generated by XRegExp","     * @returns {RegExp} XRegExp object with XRegExp syntax applied.","     */","    function asXRegExp(value, addFlagX) {","        var flags = addFlagX ? 'x' : '';","        return XRegExp.isRegExp(value) ?","            (value[REGEX_DATA] && value[REGEX_DATA].captureNames ?","                // Don't recompile, to preserve capture names","                value :","                // Recompile as XRegExp","                XRegExp(value.source, flags)","            ) :","            // Compile string as XRegExp","            XRegExp(value, flags);","    }","","    /**","     * Builds regexes using named subpatterns, for readability and pattern reuse. Backreferences in","     * the outer pattern and provided subpatterns are automatically renumbered to work correctly.","     * Native flags used by provided subpatterns are ignored in favor of the `flags` argument.","     *","     * @memberOf XRegExp","     * @param {String} pattern XRegExp pattern using `{{name}}` for embedded subpatterns. Allows","     *   `({{name}})` as shorthand for `(?<name>{{name}})`. Patterns cannot be embedded within","     *   character classes.","     * @param {Object} subs Lookup object for named subpatterns. Values can be strings or regexes. A","     *   leading `^` and trailing unescaped `$` are stripped from subpatterns, if both are present.","     * @param {String} [flags] Any combination of XRegExp flags.","     * @returns {RegExp} Regex with interpolated subpatterns.","     * @example","     *","     * var time = XRegExp.build('(?x)^ {{hours}} ({{minutes}}) $', {","     *   hours: XRegExp.build('{{h12}} : | {{h24}}', {","     *     h12: /1[0-2]|0?[1-9]/,","     *     h24: /2[0-3]|[01][0-9]/","     *   }, 'x'),","     *   minutes: /^[0-5][0-9]$/","     * });","     * time.test('10:59'); // -> true","     * XRegExp.exec('10:59', time).minutes; // -> '59'","     */","    XRegExp.build = function(pattern, subs, flags) {","        flags = flags || '';","        // Used with `asXRegExp` calls for `pattern` and subpatterns in `subs`, to work around how","        // some browsers convert `RegExp('\\n')` to a regex that contains the literal characters `\\`","        // and `n`. See more details at <https://github.com/slevithan/xregexp/pull/163>.","        var addFlagX = flags.indexOf('x') > -1;","        var inlineFlags = /^\\(\\?([\\w$]+)\\)/.exec(pattern);","        // Add flags within a leading mode modifier to the overall pattern's flags","        if (inlineFlags) {","            flags = XRegExp._clipDuplicates(flags + inlineFlags[1]);","        }","","        var data = {};","        for (var p in subs) {","            if (subs.hasOwnProperty(p)) {","                // Passing to XRegExp enables extended syntax and ensures independent validity,","                // lest an unescaped `(`, `)`, `[`, or trailing `\\` breaks the `(?:)` wrapper. For","                // subpatterns provided as native regexes, it dies on octals and adds the property","                // used to hold extended regex instance data, for simplicity.","                var sub = asXRegExp(subs[p], addFlagX);","                data[p] = {","                    // Deanchoring allows embedding independently useful anchored regexes. If you","                    // really need to keep your anchors, double them (i.e., `^^...$$`).","                    pattern: deanchor(sub.source),","                    names: sub[REGEX_DATA].captureNames || []","                };","            }","        }","","        // Passing to XRegExp dies on octals and ensures the outer pattern is independently valid;","        // helps keep this simple. Named captures will be put back.","        var patternAsRegex = asXRegExp(pattern, addFlagX);","","        // 'Caps' is short for 'captures'","        var numCaps = 0;","        var numPriorCaps;","        var numOuterCaps = 0;","        var outerCapsMap = [0];","        var outerCapNames = patternAsRegex[REGEX_DATA].captureNames || [];","        var output = patternAsRegex.source.replace(parts, function($0, $1, $2, $3, $4) {","            var subName = $1 || $2;","            var capName;","            var intro;","            var localCapIndex;","            // Named subpattern","            if (subName) {","                if (!data.hasOwnProperty(subName)) {","                    throw new ReferenceError('Undefined property ' + $0);","                }","                // Named subpattern was wrapped in a capturing group","                if ($1) {","                    capName = outerCapNames[numOuterCaps];","                    outerCapsMap[++numOuterCaps] = ++numCaps;","                    // If it's a named group, preserve the name. Otherwise, use the subpattern name","                    // as the capture name","                    intro = '(?<' + (capName || subName) + '>';","                } else {","                    intro = '(?:';","                }","                numPriorCaps = numCaps;","                return intro + data[subName].pattern.replace(subParts, function(match, paren, backref) {","                    // Capturing group","                    if (paren) {","                        capName = data[subName].names[numCaps - numPriorCaps];","                        ++numCaps;","                        // If the current capture has a name, preserve the name","                        if (capName) {","                            return '(?<' + capName + '>';","                        }","                    // Backreference","                    } else if (backref) {","                        localCapIndex = +backref - 1;","                        // Rewrite the backreference","                        return data[subName].names[localCapIndex] ?","                            // Need to preserve the backreference name in case using flag `n`","                            '\\\\k<' + data[subName].names[localCapIndex] + '>' :","                            '\\\\' + (+backref + numPriorCaps);","                    }","                    return match;","                }) + ')';","            }","            // Capturing group","            if ($3) {","                capName = outerCapNames[numOuterCaps];","                outerCapsMap[++numOuterCaps] = ++numCaps;","                // If the current capture has a name, preserve the name","                if (capName) {","                    return '(?<' + capName + '>';","                }","            // Backreference","            } else if ($4) {","                localCapIndex = +$4 - 1;","                // Rewrite the backreference","                return outerCapNames[localCapIndex] ?","                    // Need to preserve the backreference name in case using flag `n`","                    '\\\\k<' + outerCapNames[localCapIndex] + '>' :","                    '\\\\' + outerCapsMap[+$4];","            }","            return $0;","        });","","        return XRegExp(output, flags);","    };","","};","","},{}],2:[function(require,module,exports){","/*!"," * XRegExp.matchRecursive 3.2.0"," * <xregexp.com>"," * Steven Levithan (c) 2009-2017 MIT License"," */","","module.exports = function(XRegExp) {","    'use strict';","","    /**","     * Returns a match detail object composed of the provided values.","     *","     * @private","     */","    function row(name, value, start, end) {","        return {","            name: name,","            value: value,","            start: start,","            end: end","        };","    }","","    /**","     * Returns an array of match strings between outermost left and right delimiters, or an array of","     * objects with detailed match parts and position data. An error is thrown if delimiters are","     * unbalanced within the data.","     *","     * @memberOf XRegExp","     * @param {String} str String to search.","     * @param {String} left Left delimiter as an XRegExp pattern.","     * @param {String} right Right delimiter as an XRegExp pattern.","     * @param {String} [flags] Any native or XRegExp flags, used for the left and right delimiters.","     * @param {Object} [options] Lets you specify `valueNames` and `escapeChar` options.","     * @returns {Array} Array of matches, or an empty array.","     * @example","     *","     * // Basic usage","     * var str = '(t((e))s)t()(ing)';","     * XRegExp.matchRecursive(str, '\\\\(', '\\\\)', 'g');","     * // -> ['t((e))s', '', 'ing']","     *","     * // Extended information mode with valueNames","     * str = 'Here is <div> <div>an</div></div> example';","     * XRegExp.matchRecursive(str, '<div\\\\s*>', '</div>', 'gi', {","     *   valueNames: ['between', 'left', 'match', 'right']","     * });","     * // -> [","     * // {name: 'between', value: 'Here is ',       start: 0,  end: 8},","     * // {name: 'left',    value: '<div>',          start: 8,  end: 13},","     * // {name: 'match',   value: ' <div>an</div>', start: 13, end: 27},","     * // {name: 'right',   value: '</div>',         start: 27, end: 33},","     * // {name: 'between', value: ' example',       start: 33, end: 41}","     * // ]","     *","     * // Omitting unneeded parts with null valueNames, and using escapeChar","     * str = '...{1}.\\\\{{function(x,y){return {y:x}}}';","     * XRegExp.matchRecursive(str, '{', '}', 'g', {","     *   valueNames: ['literal', null, 'value', null],","     *   escapeChar: '\\\\'","     * });","     * // -> [","     * // {name: 'literal', value: '...',  start: 0, end: 3},","     * // {name: 'value',   value: '1',    start: 4, end: 5},","     * // {name: 'literal', value: '.\\\\{', start: 6, end: 9},","     * // {name: 'value',   value: 'function(x,y){return {y:x}}', start: 10, end: 37}","     * // ]","     *","     * // Sticky mode via flag y","     * str = '<1><<<2>>><3>4<5>';","     * XRegExp.matchRecursive(str, '<', '>', 'gy');","     * // -> ['1', '<<2>>', '3']","     */","    XRegExp.matchRecursive = function(str, left, right, flags, options) {","        flags = flags || '';","        options = options || {};","        var global = flags.indexOf('g') > -1;","        var sticky = flags.indexOf('y') > -1;","        // Flag `y` is controlled internally","        var basicFlags = flags.replace(/y/g, '');","        var escapeChar = options.escapeChar;","        var vN = options.valueNames;","        var output = [];","        var openTokens = 0;","        var delimStart = 0;","        var delimEnd = 0;","        var lastOuterEnd = 0;","        var outerStart;","        var innerStart;","        var leftMatch;","        var rightMatch;","        var esc;","        left = XRegExp(left, basicFlags);","        right = XRegExp(right, basicFlags);","","        if (escapeChar) {","            if (escapeChar.length > 1) {","                throw new Error('Cannot use more than one escape character');","            }","            escapeChar = XRegExp.escape(escapeChar);","            // Example of concatenated `esc` regex:","            // `escapeChar`: '%'","            // `left`: '<'","            // `right`: '>'","            // Regex is: /(?:%[\\S\\s]|(?:(?!<|>)[^%])+)+/","            esc = new RegExp(","                '(?:' + escapeChar + '[\\\\S\\\\s]|(?:(?!' +","                    // Using `XRegExp.union` safely rewrites backreferences in `left` and `right`.","                    // Intentionally not passing `basicFlags` to `XRegExp.union` since any syntax","                    // transformation resulting from those flags was already applied to `left` and","                    // `right` when they were passed through the XRegExp constructor above.","                    XRegExp.union([left, right], '', {conjunction: 'or'}).source +","                    ')[^' + escapeChar + '])+)+',","                // Flags `gy` not needed here","                flags.replace(/[^imu]+/g, '')","            );","        }","","        while (true) {","            // If using an escape character, advance to the delimiter's next starting position,","            // skipping any escaped characters in between","            if (escapeChar) {","                delimEnd += (XRegExp.exec(str, esc, delimEnd, 'sticky') || [''])[0].length;","            }","            leftMatch = XRegExp.exec(str, left, delimEnd);","            rightMatch = XRegExp.exec(str, right, delimEnd);","            // Keep the leftmost match only","            if (leftMatch && rightMatch) {","                if (leftMatch.index <= rightMatch.index) {","                    rightMatch = null;","                } else {","                    leftMatch = null;","                }","            }","            // Paths (LM: leftMatch, RM: rightMatch, OT: openTokens):","            // LM | RM | OT | Result","            // 1  | 0  | 1  | loop","            // 1  | 0  | 0  | loop","            // 0  | 1  | 1  | loop","            // 0  | 1  | 0  | throw","            // 0  | 0  | 1  | throw","            // 0  | 0  | 0  | break","            // The paths above don't include the sticky mode special case. The loop ends after the","            // first completed match if not `global`.","            if (leftMatch || rightMatch) {","                delimStart = (leftMatch || rightMatch).index;","                delimEnd = delimStart + (leftMatch || rightMatch)[0].length;","            } else if (!openTokens) {","                break;","            }","            if (sticky && !openTokens && delimStart > lastOuterEnd) {","                break;","            }","            if (leftMatch) {","                if (!openTokens) {","                    outerStart = delimStart;","                    innerStart = delimEnd;","                }","                ++openTokens;","            } else if (rightMatch && openTokens) {","                if (!--openTokens) {","                    if (vN) {","                        if (vN[0] && outerStart > lastOuterEnd) {","                            output.push(row(vN[0], str.slice(lastOuterEnd, outerStart), lastOuterEnd, outerStart));","                        }","                        if (vN[1]) {","                            output.push(row(vN[1], str.slice(outerStart, innerStart), outerStart, innerStart));","                        }","                        if (vN[2]) {","                            output.push(row(vN[2], str.slice(innerStart, delimStart), innerStart, delimStart));","                        }","                        if (vN[3]) {","                            output.push(row(vN[3], str.slice(delimStart, delimEnd), delimStart, delimEnd));","                        }","                    } else {","                        output.push(str.slice(innerStart, delimStart));","                    }","                    lastOuterEnd = delimEnd;","                    if (!global) {","                        break;","                    }","                }","            } else {","                throw new Error('Unbalanced delimiter found in string');","            }","            // If the delimiter matched an empty string, avoid an infinite loop","            if (delimStart === delimEnd) {","                ++delimEnd;","            }","        }","","        if (global && !sticky && vN && vN[0] && str.length > lastOuterEnd) {","            output.push(row(vN[0], str.slice(lastOuterEnd), lastOuterEnd, str.length));","        }","","        return output;","    };","","};","","},{}],3:[function(require,module,exports){","/*!"," * XRegExp Unicode Base 3.2.0"," * <xregexp.com>"," * Steven Levithan (c) 2008-2017 MIT License"," */","","module.exports = function(XRegExp) {","    'use strict';","","    /**","     * Adds base support for Unicode matching:","     * - Adds syntax `\\p{..}` for matching Unicode tokens. Tokens can be inverted using `\\P{..}` or","     *   `\\p{^..}`. Token names ignore case, spaces, hyphens, and underscores. You can omit the","     *   braces for token names that are a single letter (e.g. `\\pL` or `PL`).","     * - Adds flag A (astral), which enables 21-bit Unicode support.","     * - Adds the `XRegExp.addUnicodeData` method used by other addons to provide character data.","     *","     * Unicode Base relies on externally provided Unicode character data. Official addons are","     * available to provide data for Unicode categories, scripts, blocks, and properties.","     *","     * @requires XRegExp","     */","","    // ==--------------------------==","    // Private stuff","    // ==--------------------------==","","    // Storage for Unicode data","    var unicode = {};","","    // Reuse utils","    var dec = XRegExp._dec;","    var hex = XRegExp._hex;","    var pad4 = XRegExp._pad4;","","    // Generates a token lookup name: lowercase, with hyphens, spaces, and underscores removed","    function normalize(name) {","        return name.replace(/[- _]+/g, '').toLowerCase();","    }","","    // Gets the decimal code of a literal code unit, \\xHH, \\uHHHH, or a backslash-escaped literal","    function charCode(chr) {","        var esc = /^\\\\[xu](.+)/.exec(chr);","        return esc ?","            dec(esc[1]) :","            chr.charCodeAt(chr.charAt(0) === '\\\\' ? 1 : 0);","    }","","    // Inverts a list of ordered BMP characters and ranges","    function invertBmp(range) {","        var output = '';","        var lastEnd = -1;","","        XRegExp.forEach(","            range,","            /(\\\\x..|\\\\u....|\\\\?[\\s\\S])(?:-(\\\\x..|\\\\u....|\\\\?[\\s\\S]))?/,","            function(m) {","                var start = charCode(m[1]);","                if (start > (lastEnd + 1)) {","                    output += '\\\\u' + pad4(hex(lastEnd + 1));","                    if (start > (lastEnd + 2)) {","                        output += '-\\\\u' + pad4(hex(start - 1));","                    }","                }","                lastEnd = charCode(m[2] || m[1]);","            }","        );","","        if (lastEnd < 0xFFFF) {","            output += '\\\\u' + pad4(hex(lastEnd + 1));","            if (lastEnd < 0xFFFE) {","                output += '-\\\\uFFFF';","            }","        }","","        return output;","    }","","    // Generates an inverted BMP range on first use","    function cacheInvertedBmp(slug) {","        var prop = 'b!';","        return (","            unicode[slug][prop] ||","            (unicode[slug][prop] = invertBmp(unicode[slug].bmp))","        );","    }","","    // Combines and optionally negates BMP and astral data","    function buildAstral(slug, isNegated) {","        var item = unicode[slug];","        var combined = '';","","        if (item.bmp && !item.isBmpLast) {","            combined = '[' + item.bmp + ']' + (item.astral ? '|' : '');","        }","        if (item.astral) {","            combined += item.astral;","        }","        if (item.isBmpLast && item.bmp) {","            combined += (item.astral ? '|' : '') + '[' + item.bmp + ']';","        }","","        // Astral Unicode tokens always match a code point, never a code unit","        return isNegated ?","            '(?:(?!' + combined + ')(?:[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\0-\\uFFFF]))' :","            '(?:' + combined + ')';","    }","","    // Builds a complete astral pattern on first use","    function cacheAstral(slug, isNegated) {","        var prop = isNegated ? 'a!' : 'a=';","        return (","            unicode[slug][prop] ||","            (unicode[slug][prop] = buildAstral(slug, isNegated))","        );","    }","","    // ==--------------------------==","    // Core functionality","    // ==--------------------------==","","    /*","     * Add astral mode (flag A) and Unicode token syntax: `\\p{..}`, `\\P{..}`, `\\p{^..}`, `\\pC`.","     */","    XRegExp.addToken(","        // Use `*` instead of `+` to avoid capturing `^` as the token name in `\\p{^}`","        /\\\\([pP])(?:{(\\^?)([^}]*)}|([A-Za-z]))/,","        function(match, scope, flags) {","            var ERR_DOUBLE_NEG = 'Invalid double negation ';","            var ERR_UNKNOWN_NAME = 'Unknown Unicode token ';","            var ERR_UNKNOWN_REF = 'Unicode token missing data ';","            var ERR_ASTRAL_ONLY = 'Astral mode required for Unicode token ';","            var ERR_ASTRAL_IN_CLASS = 'Astral mode does not support Unicode tokens within character classes';","            // Negated via \\P{..} or \\p{^..}","            var isNegated = match[1] === 'P' || !!match[2];","            // Switch from BMP (0-FFFF) to astral (0-10FFFF) mode via flag A","            var isAstralMode = flags.indexOf('A') > -1;","            // Token lookup name. Check `[4]` first to avoid passing `undefined` via `\\p{}`","            var slug = normalize(match[4] || match[3]);","            // Token data object","            var item = unicode[slug];","","            if (match[1] === 'P' && match[2]) {","                throw new SyntaxError(ERR_DOUBLE_NEG + match[0]);","            }","            if (!unicode.hasOwnProperty(slug)) {","                throw new SyntaxError(ERR_UNKNOWN_NAME + match[0]);","            }","","            // Switch to the negated form of the referenced Unicode token","            if (item.inverseOf) {","                slug = normalize(item.inverseOf);","                if (!unicode.hasOwnProperty(slug)) {","                    throw new ReferenceError(ERR_UNKNOWN_REF + match[0] + ' -> ' + item.inverseOf);","                }","                item = unicode[slug];","                isNegated = !isNegated;","            }","","            if (!(item.bmp || isAstralMode)) {","                throw new SyntaxError(ERR_ASTRAL_ONLY + match[0]);","            }","            if (isAstralMode) {","                if (scope === 'class') {","                    throw new SyntaxError(ERR_ASTRAL_IN_CLASS);","                }","","                return cacheAstral(slug, isNegated);","            }","","            return scope === 'class' ?","                (isNegated ? cacheInvertedBmp(slug) : item.bmp) :","                (isNegated ? '[^' : '[') + item.bmp + ']';","        },","        {","            scope: 'all',","            optionalFlags: 'A',","            leadChar: '\\\\'","        }","    );","","    /**","     * Adds to the list of Unicode tokens that XRegExp regexes can match via `\\p` or `\\P`.","     *","     * @memberOf XRegExp","     * @param {Array} data Objects with named character ranges. Each object may have properties","     *   `name`, `alias`, `isBmpLast`, `inverseOf`, `bmp`, and `astral`. All but `name` are","     *   optional, although one of `bmp` or `astral` is required (unless `inverseOf` is set). If","     *   `astral` is absent, the `bmp` data is used for BMP and astral modes. If `bmp` is absent,","     *   the name errors in BMP mode but works in astral mode. If both `bmp` and `astral` are","     *   provided, the `bmp` data only is used in BMP mode, and the combination of `bmp` and","     *   `astral` data is used in astral mode. `isBmpLast` is needed when a token matches orphan","     *   high surrogates *and* uses surrogate pairs to match astral code points. The `bmp` and","     *   `astral` data should be a combination of literal characters and `\\xHH` or `\\uHHHH` escape","     *   sequences, with hyphens to create ranges. Any regex metacharacters in the data should be","     *   escaped, apart from range-creating hyphens. The `astral` data can additionally use","     *   character classes and alternation, and should use surrogate pairs to represent astral code","     *   points. `inverseOf` can be used to avoid duplicating character data if a Unicode token is","     *   defined as the exact inverse of another token.","     * @example","     *","     * // Basic use","     * XRegExp.addUnicodeData([{","     *   name: 'XDigit',","     *   alias: 'Hexadecimal',","     *   bmp: '0-9A-Fa-f'","     * }]);","     * XRegExp('\\\\p{XDigit}:\\\\p{Hexadecimal}+').test('0:3D'); // -> true","     */","    XRegExp.addUnicodeData = function(data) {","        var ERR_NO_NAME = 'Unicode token requires name';","        var ERR_NO_DATA = 'Unicode token has no character data ';","        var item;","","        for (var i = 0; i < data.length; ++i) {","            item = data[i];","            if (!item.name) {","                throw new Error(ERR_NO_NAME);","            }","            if (!(item.inverseOf || item.bmp || item.astral)) {","                throw new Error(ERR_NO_DATA + item.name);","            }","            unicode[normalize(item.name)] = item;","            if (item.alias) {","                unicode[normalize(item.alias)] = item;","            }","        }","","        // Reset the pattern cache used by the `XRegExp` constructor, since the same pattern and","        // flags might now produce different results","        XRegExp.cache.flush('patterns');","    };","","    /**","     * @ignore","     *","     * Return a reference to the internal Unicode definition structure for the given Unicode","     * Property if the given name is a legal Unicode Property for use in XRegExp `\\p` or `\\P` regex","     * constructs.","     *","     * @memberOf XRegExp","     * @param {String} name Name by which the Unicode Property may be recognized (case-insensitive),","     *   e.g. `'N'` or `'Number'`. The given name is matched against all registered Unicode","     *   Properties and Property Aliases.","     * @returns {Object} Reference to definition structure when the name matches a Unicode Property.","     *","     * @note","     * For more info on Unicode Properties, see also http://unicode.org/reports/tr18/#Categories.","     *","     * @note","     * This method is *not* part of the officially documented API and may change or be removed in","     * the future. It is meant for userland code that wishes to reuse the (large) internal Unicode","     * structures set up by XRegExp.","     */","    XRegExp._getUnicodeProperty = function(name) {","        var slug = normalize(name);","        return unicode[slug];","    };","","};","","},{}],4:[function(require,module,exports){","/*!"," * XRegExp Unicode Blocks 3.2.0"," * <xregexp.com>"," * Steven Levithan (c) 2010-2017 MIT License"," * Unicode data by Mathias Bynens <mathiasbynens.be>"," */","","module.exports = function(XRegExp) {","    'use strict';","","    /**","     * Adds support for all Unicode blocks. Block names use the prefix 'In'. E.g.,","     * `\\p{InBasicLatin}`. Token names are case insensitive, and any spaces, hyphens, and","     * underscores are ignored.","     *","     * Uses Unicode 9.0.0.","     *","     * @requires XRegExp, Unicode Base","     */","","    if (!XRegExp.addUnicodeData) {","        throw new ReferenceError('Unicode Base must be loaded before Unicode Blocks');","    }","","    XRegExp.addUnicodeData([","        {","            name: 'InAdlam',","            astral: '\\uD83A[\\uDD00-\\uDD5F]'","        },","        {","            name: 'InAegean_Numbers',","            astral: '\\uD800[\\uDD00-\\uDD3F]'","        },","        {","            name: 'InAhom',","            astral: '\\uD805[\\uDF00-\\uDF3F]'","        },","        {","            name: 'InAlchemical_Symbols',","            astral: '\\uD83D[\\uDF00-\\uDF7F]'","        },","        {","            name: 'InAlphabetic_Presentation_Forms',","            bmp: '\\uFB00-\\uFB4F'","        },","        {","            name: 'InAnatolian_Hieroglyphs',","            astral: '\\uD811[\\uDC00-\\uDE7F]'","        },","        {","            name: 'InAncient_Greek_Musical_Notation',","            astral: '\\uD834[\\uDE00-\\uDE4F]'","        },","        {","            name: 'InAncient_Greek_Numbers',","            astral: '\\uD800[\\uDD40-\\uDD8F]'","        },","        {","            name: 'InAncient_Symbols',","            astral: '\\uD800[\\uDD90-\\uDDCF]'","        },","        {","            name: 'InArabic',","            bmp: '\\u0600-\\u06FF'","        },","        {","            name: 'InArabic_Extended_A',","            bmp: '\\u08A0-\\u08FF'","        },","        {","            name: 'InArabic_Mathematical_Alphabetic_Symbols',","            astral: '\\uD83B[\\uDE00-\\uDEFF]'","        },","        {","            name: 'InArabic_Presentation_Forms_A',","            bmp: '\\uFB50-\\uFDFF'","        },","        {","            name: 'InArabic_Presentation_Forms_B',","            bmp: '\\uFE70-\\uFEFF'","        },","        {","            name: 'InArabic_Supplement',","            bmp: '\\u0750-\\u077F'","        },","        {","            name: 'InArmenian',","            bmp: '\\u0530-\\u058F'","        },","        {","            name: 'InArrows',","            bmp: '\\u2190-\\u21FF'","        },","        {","            name: 'InAvestan',","            astral: '\\uD802[\\uDF00-\\uDF3F]'","        },","        {","            name: 'InBalinese',","            bmp: '\\u1B00-\\u1B7F'","        },","        {","            name: 'InBamum',","            bmp: '\\uA6A0-\\uA6FF'","        },","        {","            name: 'InBamum_Supplement',","            astral: '\\uD81A[\\uDC00-\\uDE3F]'","        },","        {","            name: 'InBasic_Latin',","            bmp: '\\0-\\x7F'","        },","        {","            name: 'InBassa_Vah',","            astral: '\\uD81A[\\uDED0-\\uDEFF]'","        },","        {","            name: 'InBatak',","            bmp: '\\u1BC0-\\u1BFF'","        },","        {","            name: 'InBengali',","            bmp: '\\u0980-\\u09FF'","        },","        {","            name: 'InBhaiksuki',","            astral: '\\uD807[\\uDC00-\\uDC6F]'","        },","        {","            name: 'InBlock_Elements',","            bmp: '\\u2580-\\u259F'","        },","        {","            name: 'InBopomofo',","            bmp: '\\u3100-\\u312F'","        },","        {","            name: 'InBopomofo_Extended',","            bmp: '\\u31A0-\\u31BF'","        },","        {","            name: 'InBox_Drawing',","            bmp: '\\u2500-\\u257F'","        },","        {","            name: 'InBrahmi',","            astral: '\\uD804[\\uDC00-\\uDC7F]'","        },","        {","            name: 'InBraille_Patterns',","            bmp: '\\u2800-\\u28FF'","        },","        {","            name: 'InBuginese',","            bmp: '\\u1A00-\\u1A1F'","        },","        {","            name: 'InBuhid',","            bmp: '\\u1740-\\u175F'","        },","        {","            name: 'InByzantine_Musical_Symbols',","            astral: '\\uD834[\\uDC00-\\uDCFF]'","        },","        {","            name: 'InCJK_Compatibility',","            bmp: '\\u3300-\\u33FF'","        },","        {","            name: 'InCJK_Compatibility_Forms',","            bmp: '\\uFE30-\\uFE4F'","        },","        {","            name: 'InCJK_Compatibility_Ideographs',","            bmp: '\\uF900-\\uFAFF'","        },","        {","            name: 'InCJK_Compatibility_Ideographs_Supplement',","            astral: '\\uD87E[\\uDC00-\\uDE1F]'","        },","        {","            name: 'InCJK_Radicals_Supplement',","            bmp: '\\u2E80-\\u2EFF'","        },","        {","            name: 'InCJK_Strokes',","            bmp: '\\u31C0-\\u31EF'","        },","        {","            name: 'InCJK_Symbols_and_Punctuation',","            bmp: '\\u3000-\\u303F'","        },","        {","            name: 'InCJK_Unified_Ideographs',","            bmp: '\\u4E00-\\u9FFF'","        },","        {","            name: 'InCJK_Unified_Ideographs_Extension_A',","            bmp: '\\u3400-\\u4DBF'","        },","        {","            name: 'InCJK_Unified_Ideographs_Extension_B',","            astral: '[\\uD840-\\uD868][\\uDC00-\\uDFFF]|\\uD869[\\uDC00-\\uDEDF]'","        },","        {","            name: 'InCJK_Unified_Ideographs_Extension_C',","            astral: '\\uD869[\\uDF00-\\uDFFF]|[\\uD86A-\\uD86C][\\uDC00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF3F]'","        },","        {","            name: 'InCJK_Unified_Ideographs_Extension_D',","            astral: '\\uD86D[\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1F]'","        },","        {","            name: 'InCJK_Unified_Ideographs_Extension_E',","            astral: '\\uD86E[\\uDC20-\\uDFFF]|[\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD873[\\uDC00-\\uDEAF]'","        },","        {","            name: 'InCarian',","            astral: '\\uD800[\\uDEA0-\\uDEDF]'","        },","        {","            name: 'InCaucasian_Albanian',","            astral: '\\uD801[\\uDD30-\\uDD6F]'","        },","        {","            name: 'InChakma',","            astral: '\\uD804[\\uDD00-\\uDD4F]'","        },","        {","            name: 'InCham',","            bmp: '\\uAA00-\\uAA5F'","        },","        {","            name: 'InCherokee',","            bmp: '\\u13A0-\\u13FF'","        },","        {","            name: 'InCherokee_Supplement',","            bmp: '\\uAB70-\\uABBF'","        },","        {","            name: 'InCombining_Diacritical_Marks',","            bmp: '\\u0300-\\u036F'","        },","        {","            name: 'InCombining_Diacritical_Marks_Extended',","            bmp: '\\u1AB0-\\u1AFF'","        },","        {","            name: 'InCombining_Diacritical_Marks_Supplement',","            bmp: '\\u1DC0-\\u1DFF'","        },","        {","            name: 'InCombining_Diacritical_Marks_for_Symbols',","            bmp: '\\u20D0-\\u20FF'","        },","        {","            name: 'InCombining_Half_Marks',","            bmp: '\\uFE20-\\uFE2F'","        },","        {","            name: 'InCommon_Indic_Number_Forms',","            bmp: '\\uA830-\\uA83F'","        },","        {","            name: 'InControl_Pictures',","            bmp: '\\u2400-\\u243F'","        },","        {","            name: 'InCoptic',","            bmp: '\\u2C80-\\u2CFF'","        },","        {","            name: 'InCoptic_Epact_Numbers',","            astral: '\\uD800[\\uDEE0-\\uDEFF]'","        },","        {","            name: 'InCounting_Rod_Numerals',","            astral: '\\uD834[\\uDF60-\\uDF7F]'","        },","        {","            name: 'InCuneiform',","            astral: '\\uD808[\\uDC00-\\uDFFF]'","        },","        {","            name: 'InCuneiform_Numbers_and_Punctuation',","            astral: '\\uD809[\\uDC00-\\uDC7F]'","        },","        {","            name: 'InCurrency_Symbols',","            bmp: '\\u20A0-\\u20CF'","        },","        {","            name: 'InCypriot_Syllabary',","            astral: '\\uD802[\\uDC00-\\uDC3F]'","        },","        {","            name: 'InCyrillic',","            bmp: '\\u0400-\\u04FF'","        },","        {","            name: 'InCyrillic_Extended_A',","            bmp: '\\u2DE0-\\u2DFF'","        },","        {","            name: 'InCyrillic_Extended_B',","            bmp: '\\uA640-\\uA69F'","        },","        {","            name: 'InCyrillic_Extended_C',","            bmp: '\\u1C80-\\u1C8F'","        },","        {","            name: 'InCyrillic_Supplement',","            bmp: '\\u0500-\\u052F'","        },","        {","            name: 'InDeseret',","            astral: '\\uD801[\\uDC00-\\uDC4F]'","        },","        {","            name: 'InDevanagari',","            bmp: '\\u0900-\\u097F'","        },","        {","            name: 'InDevanagari_Extended',","            bmp: '\\uA8E0-\\uA8FF'","        },","        {","            name: 'InDingbats',","            bmp: '\\u2700-\\u27BF'","        },","        {","            name: 'InDomino_Tiles',","            astral: '\\uD83C[\\uDC30-\\uDC9F]'","        },","        {","            name: 'InDuployan',","            astral: '\\uD82F[\\uDC00-\\uDC9F]'","        },","        {","            name: 'InEarly_Dynastic_Cuneiform',","            astral: '\\uD809[\\uDC80-\\uDD4F]'","        },","        {","            name: 'InEgyptian_Hieroglyphs',","            astral: '\\uD80C[\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2F]'","        },","        {","            name: 'InElbasan',","            astral: '\\uD801[\\uDD00-\\uDD2F]'","        },","        {","            name: 'InEmoticons',","            astral: '\\uD83D[\\uDE00-\\uDE4F]'","        },","        {","            name: 'InEnclosed_Alphanumeric_Supplement',","            astral: '\\uD83C[\\uDD00-\\uDDFF]'","        },","        {","            name: 'InEnclosed_Alphanumerics',","            bmp: '\\u2460-\\u24FF'","        },","        {","            name: 'InEnclosed_CJK_Letters_and_Months',","            bmp: '\\u3200-\\u32FF'","        },","        {","            name: 'InEnclosed_Ideographic_Supplement',","            astral: '\\uD83C[\\uDE00-\\uDEFF]'","        },","        {","            name: 'InEthiopic',","            bmp: '\\u1200-\\u137F'","        },","        {","            name: 'InEthiopic_Extended',","            bmp: '\\u2D80-\\u2DDF'","        },","        {","            name: 'InEthiopic_Extended_A',","            bmp: '\\uAB00-\\uAB2F'","        },","        {","            name: 'InEthiopic_Supplement',","            bmp: '\\u1380-\\u139F'","        },","        {","            name: 'InGeneral_Punctuation',","            bmp: '\\u2000-\\u206F'","        },","        {","            name: 'InGeometric_Shapes',","            bmp: '\\u25A0-\\u25FF'","        },","        {","            name: 'InGeometric_Shapes_Extended',","            astral: '\\uD83D[\\uDF80-\\uDFFF]'","        },","        {","            name: 'InGeorgian',","            bmp: '\\u10A0-\\u10FF'","        },","        {","            name: 'InGeorgian_Supplement',","            bmp: '\\u2D00-\\u2D2F'","        },","        {","            name: 'InGlagolitic',","            bmp: '\\u2C00-\\u2C5F'","        },","        {","            name: 'InGlagolitic_Supplement',","            astral: '\\uD838[\\uDC00-\\uDC2F]'","        },","        {","            name: 'InGothic',","            astral: '\\uD800[\\uDF30-\\uDF4F]'","        },","        {","            name: 'InGrantha',","            astral: '\\uD804[\\uDF00-\\uDF7F]'","        },","        {","            name: 'InGreek_Extended',","            bmp: '\\u1F00-\\u1FFF'","        },","        {","            name: 'InGreek_and_Coptic',","            bmp: '\\u0370-\\u03FF'","        },","        {","            name: 'InGujarati',","            bmp: '\\u0A80-\\u0AFF'","        },","        {","            name: 'InGurmukhi',","            bmp: '\\u0A00-\\u0A7F'","        },","        {","            name: 'InHalfwidth_and_Fullwidth_Forms',","            bmp: '\\uFF00-\\uFFEF'","        },","        {","            name: 'InHangul_Compatibility_Jamo',","            bmp: '\\u3130-\\u318F'","        },","        {","            name: 'InHangul_Jamo',","            bmp: '\\u1100-\\u11FF'","        },","        {","            name: 'InHangul_Jamo_Extended_A',","            bmp: '\\uA960-\\uA97F'","        },","        {","            name: 'InHangul_Jamo_Extended_B',","            bmp: '\\uD7B0-\\uD7FF'","        },","        {","            name: 'InHangul_Syllables',","            bmp: '\\uAC00-\\uD7AF'","        },","        {","            name: 'InHanunoo',","            bmp: '\\u1720-\\u173F'","        },","        {","            name: 'InHatran',","            astral: '\\uD802[\\uDCE0-\\uDCFF]'","        },","        {","            name: 'InHebrew',","            bmp: '\\u0590-\\u05FF'","        },","        {","            name: 'InHigh_Private_Use_Surrogates',","            bmp: '\\uDB80-\\uDBFF'","        },","        {","            name: 'InHigh_Surrogates',","            bmp: '\\uD800-\\uDB7F'","        },","        {","            name: 'InHiragana',","            bmp: '\\u3040-\\u309F'","        },","        {","            name: 'InIPA_Extensions',","            bmp: '\\u0250-\\u02AF'","        },","        {","            name: 'InIdeographic_Description_Characters',","            bmp: '\\u2FF0-\\u2FFF'","        },","        {","            name: 'InIdeographic_Symbols_and_Punctuation',","            astral: '\\uD81B[\\uDFE0-\\uDFFF]'","        },","        {","            name: 'InImperial_Aramaic',","            astral: '\\uD802[\\uDC40-\\uDC5F]'","        },","        {","            name: 'InInscriptional_Pahlavi',","            astral: '\\uD802[\\uDF60-\\uDF7F]'","        },","        {","            name: 'InInscriptional_Parthian',","            astral: '\\uD802[\\uDF40-\\uDF5F]'","        },","        {","            name: 'InJavanese',","            bmp: '\\uA980-\\uA9DF'","        },","        {","            name: 'InKaithi',","            astral: '\\uD804[\\uDC80-\\uDCCF]'","        },","        {","            name: 'InKana_Supplement',","            astral: '\\uD82C[\\uDC00-\\uDCFF]'","        },","        {","            name: 'InKanbun',","            bmp: '\\u3190-\\u319F'","        },","        {","            name: 'InKangxi_Radicals',","            bmp: '\\u2F00-\\u2FDF'","        },","        {","            name: 'InKannada',","            bmp: '\\u0C80-\\u0CFF'","        },","        {","            name: 'InKatakana',","            bmp: '\\u30A0-\\u30FF'","        },","        {","            name: 'InKatakana_Phonetic_Extensions',","            bmp: '\\u31F0-\\u31FF'","        },","        {","            name: 'InKayah_Li',","            bmp: '\\uA900-\\uA92F'","        },","        {","            name: 'InKharoshthi',","            astral: '\\uD802[\\uDE00-\\uDE5F]'","        },","        {","            name: 'InKhmer',","            bmp: '\\u1780-\\u17FF'","        },","        {","            name: 'InKhmer_Symbols',","            bmp: '\\u19E0-\\u19FF'","        },","        {","            name: 'InKhojki',","            astral: '\\uD804[\\uDE00-\\uDE4F]'","        },","        {","            name: 'InKhudawadi',","            astral: '\\uD804[\\uDEB0-\\uDEFF]'","        },","        {","            name: 'InLao',","            bmp: '\\u0E80-\\u0EFF'","        },","        {","            name: 'InLatin_Extended_Additional',","            bmp: '\\u1E00-\\u1EFF'","        },","        {","            name: 'InLatin_Extended_A',","            bmp: '\\u0100-\\u017F'","        },","        {","            name: 'InLatin_Extended_B',","            bmp: '\\u0180-\\u024F'","        },","        {","            name: 'InLatin_Extended_C',","            bmp: '\\u2C60-\\u2C7F'","        },","        {","            name: 'InLatin_Extended_D',","            bmp: '\\uA720-\\uA7FF'","        },","        {","            name: 'InLatin_Extended_E',","            bmp: '\\uAB30-\\uAB6F'","        },","        {","            name: 'InLatin_1_Supplement',","            bmp: '\\x80-\\xFF'","        },","        {","            name: 'InLepcha',","            bmp: '\\u1C00-\\u1C4F'","        },","        {","            name: 'InLetterlike_Symbols',","            bmp: '\\u2100-\\u214F'","        },","        {","            name: 'InLimbu',","            bmp: '\\u1900-\\u194F'","        },","        {","            name: 'InLinear_A',","            astral: '\\uD801[\\uDE00-\\uDF7F]'","        },","        {","            name: 'InLinear_B_Ideograms',","            astral: '\\uD800[\\uDC80-\\uDCFF]'","        },","        {","            name: 'InLinear_B_Syllabary',","            astral: '\\uD800[\\uDC00-\\uDC7F]'","        },","        {","            name: 'InLisu',","            bmp: '\\uA4D0-\\uA4FF'","        },","        {","            name: 'InLow_Surrogates',","            bmp: '\\uDC00-\\uDFFF'","        },","        {","            name: 'InLycian',","            astral: '\\uD800[\\uDE80-\\uDE9F]'","        },","        {","            name: 'InLydian',","            astral: '\\uD802[\\uDD20-\\uDD3F]'","        },","        {","            name: 'InMahajani',","            astral: '\\uD804[\\uDD50-\\uDD7F]'","        },","        {","            name: 'InMahjong_Tiles',","            astral: '\\uD83C[\\uDC00-\\uDC2F]'","        },","        {","            name: 'InMalayalam',","            bmp: '\\u0D00-\\u0D7F'","        },","        {","            name: 'InMandaic',","            bmp: '\\u0840-\\u085F'","        },","        {","            name: 'InManichaean',","            astral: '\\uD802[\\uDEC0-\\uDEFF]'","        },","        {","            name: 'InMarchen',","            astral: '\\uD807[\\uDC70-\\uDCBF]'","        },","        {","            name: 'InMathematical_Alphanumeric_Symbols',","            astral: '\\uD835[\\uDC00-\\uDFFF]'","        },","        {","            name: 'InMathematical_Operators',","            bmp: '\\u2200-\\u22FF'","        },","        {","            name: 'InMeetei_Mayek',","            bmp: '\\uABC0-\\uABFF'","        },","        {","            name: 'InMeetei_Mayek_Extensions',","            bmp: '\\uAAE0-\\uAAFF'","        },","        {","            name: 'InMende_Kikakui',","            astral: '\\uD83A[\\uDC00-\\uDCDF]'","        },","        {","            name: 'InMeroitic_Cursive',","            astral: '\\uD802[\\uDDA0-\\uDDFF]'","        },","        {","            name: 'InMeroitic_Hieroglyphs',","            astral: '\\uD802[\\uDD80-\\uDD9F]'","        },","        {","            name: 'InMiao',","            astral: '\\uD81B[\\uDF00-\\uDF9F]'","        },","        {","            name: 'InMiscellaneous_Mathematical_Symbols_A',","            bmp: '\\u27C0-\\u27EF'","        },","        {","            name: 'InMiscellaneous_Mathematical_Symbols_B',","            bmp: '\\u2980-\\u29FF'","        },","        {","            name: 'InMiscellaneous_Symbols',","            bmp: '\\u2600-\\u26FF'","        },","        {","            name: 'InMiscellaneous_Symbols_and_Arrows',","            bmp: '\\u2B00-\\u2BFF'","        },","        {","            name: 'InMiscellaneous_Symbols_and_Pictographs',","            astral: '\\uD83C[\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDDFF]'","        },","        {","            name: 'InMiscellaneous_Technical',","            bmp: '\\u2300-\\u23FF'","        },","        {","            name: 'InModi',","            astral: '\\uD805[\\uDE00-\\uDE5F]'","        },","        {","            name: 'InModifier_Tone_Letters',","            bmp: '\\uA700-\\uA71F'","        },","        {","            name: 'InMongolian',","            bmp: '\\u1800-\\u18AF'","        },","        {","            name: 'InMongolian_Supplement',","            astral: '\\uD805[\\uDE60-\\uDE7F]'","        },","        {","            name: 'InMro',","            astral: '\\uD81A[\\uDE40-\\uDE6F]'","        },","        {","            name: 'InMultani',","            astral: '\\uD804[\\uDE80-\\uDEAF]'","        },","        {","            name: 'InMusical_Symbols',","            astral: '\\uD834[\\uDD00-\\uDDFF]'","        },","        {","            name: 'InMyanmar',","            bmp: '\\u1000-\\u109F'","        },","        {","            name: 'InMyanmar_Extended_A',","            bmp: '\\uAA60-\\uAA7F'","        },","        {","            name: 'InMyanmar_Extended_B',","            bmp: '\\uA9E0-\\uA9FF'","        },","        {","            name: 'InNKo',","            bmp: '\\u07C0-\\u07FF'","        },","        {","            name: 'InNabataean',","            astral: '\\uD802[\\uDC80-\\uDCAF]'","        },","        {","            name: 'InNew_Tai_Lue',","            bmp: '\\u1980-\\u19DF'","        },","        {","            name: 'InNewa',","            astral: '\\uD805[\\uDC00-\\uDC7F]'","        },","        {","            name: 'InNumber_Forms',","            bmp: '\\u2150-\\u218F'","        },","        {","            name: 'InOgham',","            bmp: '\\u1680-\\u169F'","        },","        {","            name: 'InOl_Chiki',","            bmp: '\\u1C50-\\u1C7F'","        },","        {","            name: 'InOld_Hungarian',","            astral: '\\uD803[\\uDC80-\\uDCFF]'","        },","        {","            name: 'InOld_Italic',","            astral: '\\uD800[\\uDF00-\\uDF2F]'","        },","        {","            name: 'InOld_North_Arabian',","            astral: '\\uD802[\\uDE80-\\uDE9F]'","        },","        {","            name: 'InOld_Permic',","            astral: '\\uD800[\\uDF50-\\uDF7F]'","        },","        {","            name: 'InOld_Persian',","            astral: '\\uD800[\\uDFA0-\\uDFDF]'","        },","        {","            name: 'InOld_South_Arabian',","            astral: '\\uD802[\\uDE60-\\uDE7F]'","        },","        {","            name: 'InOld_Turkic',","            astral: '\\uD803[\\uDC00-\\uDC4F]'","        },","        {","            name: 'InOptical_Character_Recognition',","            bmp: '\\u2440-\\u245F'","        },","        {","            name: 'InOriya',","            bmp: '\\u0B00-\\u0B7F'","        },","        {","            name: 'InOrnamental_Dingbats',","            astral: '\\uD83D[\\uDE50-\\uDE7F]'","        },","        {","            name: 'InOsage',","            astral: '\\uD801[\\uDCB0-\\uDCFF]'","        },","        {","            name: 'InOsmanya',","            astral: '\\uD801[\\uDC80-\\uDCAF]'","        },","        {","            name: 'InPahawh_Hmong',","            astral: '\\uD81A[\\uDF00-\\uDF8F]'","        },","        {","            name: 'InPalmyrene',","            astral: '\\uD802[\\uDC60-\\uDC7F]'","        },","        {","            name: 'InPau_Cin_Hau',","            astral: '\\uD806[\\uDEC0-\\uDEFF]'","        },","        {","            name: 'InPhags_pa',","            bmp: '\\uA840-\\uA87F'","        },","        {","            name: 'InPhaistos_Disc',","            astral: '\\uD800[\\uDDD0-\\uDDFF]'","        },","        {","            name: 'InPhoenician',","            astral: '\\uD802[\\uDD00-\\uDD1F]'","        },","        {","            name: 'InPhonetic_Extensions',","            bmp: '\\u1D00-\\u1D7F'","        },","        {","            name: 'InPhonetic_Extensions_Supplement',","            bmp: '\\u1D80-\\u1DBF'","        },","        {","            name: 'InPlaying_Cards',","            astral: '\\uD83C[\\uDCA0-\\uDCFF]'","        },","        {","            name: 'InPrivate_Use_Area',","            bmp: '\\uE000-\\uF8FF'","        },","        {","            name: 'InPsalter_Pahlavi',","            astral: '\\uD802[\\uDF80-\\uDFAF]'","        },","        {","            name: 'InRejang',","            bmp: '\\uA930-\\uA95F'","        },","        {","            name: 'InRumi_Numeral_Symbols',","            astral: '\\uD803[\\uDE60-\\uDE7F]'","        },","        {","            name: 'InRunic',","            bmp: '\\u16A0-\\u16FF'","        },","        {","            name: 'InSamaritan',","            bmp: '\\u0800-\\u083F'","        },","        {","            name: 'InSaurashtra',","            bmp: '\\uA880-\\uA8DF'","        },","        {","            name: 'InSharada',","            astral: '\\uD804[\\uDD80-\\uDDDF]'","        },","        {","            name: 'InShavian',","            astral: '\\uD801[\\uDC50-\\uDC7F]'","        },","        {","            name: 'InShorthand_Format_Controls',","            astral: '\\uD82F[\\uDCA0-\\uDCAF]'","        },","        {","            name: 'InSiddham',","            astral: '\\uD805[\\uDD80-\\uDDFF]'","        },","        {","            name: 'InSinhala',","            bmp: '\\u0D80-\\u0DFF'","        },","        {","            name: 'InSinhala_Archaic_Numbers',","            astral: '\\uD804[\\uDDE0-\\uDDFF]'","        },","        {","            name: 'InSmall_Form_Variants',","            bmp: '\\uFE50-\\uFE6F'","        },","        {","            name: 'InSora_Sompeng',","            astral: '\\uD804[\\uDCD0-\\uDCFF]'","        },","        {","            name: 'InSpacing_Modifier_Letters',","            bmp: '\\u02B0-\\u02FF'","        },","        {","            name: 'InSpecials',","            bmp: '\\uFFF0-\\uFFFF'","        },","        {","            name: 'InSundanese',","            bmp: '\\u1B80-\\u1BBF'","        },","        {","            name: 'InSundanese_Supplement',","            bmp: '\\u1CC0-\\u1CCF'","        },","        {","            name: 'InSuperscripts_and_Subscripts',","            bmp: '\\u2070-\\u209F'","        },","        {","            name: 'InSupplemental_Arrows_A',","            bmp: '\\u27F0-\\u27FF'","        },","        {","            name: 'InSupplemental_Arrows_B',","            bmp: '\\u2900-\\u297F'","        },","        {","            name: 'InSupplemental_Arrows_C',","            astral: '\\uD83E[\\uDC00-\\uDCFF]'","        },","        {","            name: 'InSupplemental_Mathematical_Operators',","            bmp: '\\u2A00-\\u2AFF'","        },","        {","            name: 'InSupplemental_Punctuation',","            bmp: '\\u2E00-\\u2E7F'","        },","        {","            name: 'InSupplemental_Symbols_and_Pictographs',","            astral: '\\uD83E[\\uDD00-\\uDDFF]'","        },","        {","            name: 'InSupplementary_Private_Use_Area_A',","            astral: '[\\uDB80-\\uDBBF][\\uDC00-\\uDFFF]'","        },","        {","            name: 'InSupplementary_Private_Use_Area_B',","            astral: '[\\uDBC0-\\uDBFF][\\uDC00-\\uDFFF]'","        },","        {","            name: 'InSutton_SignWriting',","            astral: '\\uD836[\\uDC00-\\uDEAF]'","        },","        {","            name: 'InSyloti_Nagri',","            bmp: '\\uA800-\\uA82F'","        },","        {","            name: 'InSyriac',","            bmp: '\\u0700-\\u074F'","        },","        {","            name: 'InTagalog',","            bmp: '\\u1700-\\u171F'","        },","        {","            name: 'InTagbanwa',","            bmp: '\\u1760-\\u177F'","        },","        {","            name: 'InTags',","            astral: '\\uDB40[\\uDC00-\\uDC7F]'","        },","        {","            name: 'InTai_Le',","            bmp: '\\u1950-\\u197F'","        },","        {","            name: 'InTai_Tham',","            bmp: '\\u1A20-\\u1AAF'","        },","        {","            name: 'InTai_Viet',","            bmp: '\\uAA80-\\uAADF'","        },","        {","            name: 'InTai_Xuan_Jing_Symbols',","            astral: '\\uD834[\\uDF00-\\uDF5F]'","        },","        {","            name: 'InTakri',","            astral: '\\uD805[\\uDE80-\\uDECF]'","        },","        {","            name: 'InTamil',","            bmp: '\\u0B80-\\u0BFF'","        },","        {","            name: 'InTangut',","            astral: '[\\uD81C-\\uD821][\\uDC00-\\uDFFF]'","        },","        {","            name: 'InTangut_Components',","            astral: '\\uD822[\\uDC00-\\uDEFF]'","        },","        {","            name: 'InTelugu',","            bmp: '\\u0C00-\\u0C7F'","        },","        {","            name: 'InThaana',","            bmp: '\\u0780-\\u07BF'","        },","        {","            name: 'InThai',","            bmp: '\\u0E00-\\u0E7F'","        },","        {","            name: 'InTibetan',","            bmp: '\\u0F00-\\u0FFF'","        },","        {","            name: 'InTifinagh',","            bmp: '\\u2D30-\\u2D7F'","        },","        {","            name: 'InTirhuta',","            astral: '\\uD805[\\uDC80-\\uDCDF]'","        },","        {","            name: 'InTransport_and_Map_Symbols',","            astral: '\\uD83D[\\uDE80-\\uDEFF]'","        },","        {","            name: 'InUgaritic',","            astral: '\\uD800[\\uDF80-\\uDF9F]'","        },","        {","            name: 'InUnified_Canadian_Aboriginal_Syllabics',","            bmp: '\\u1400-\\u167F'","        },","        {","            name: 'InUnified_Canadian_Aboriginal_Syllabics_Extended',","            bmp: '\\u18B0-\\u18FF'","        },","        {","            name: 'InVai',","            bmp: '\\uA500-\\uA63F'","        },","        {","            name: 'InVariation_Selectors',","            bmp: '\\uFE00-\\uFE0F'","        },","        {","            name: 'InVariation_Selectors_Supplement',","            astral: '\\uDB40[\\uDD00-\\uDDEF]'","        },","        {","            name: 'InVedic_Extensions',","            bmp: '\\u1CD0-\\u1CFF'","        },","        {","            name: 'InVertical_Forms',","            bmp: '\\uFE10-\\uFE1F'","        },","        {","            name: 'InWarang_Citi',","            astral: '\\uD806[\\uDCA0-\\uDCFF]'","        },","        {","            name: 'InYi_Radicals',","            bmp: '\\uA490-\\uA4CF'","        },","        {","            name: 'InYi_Syllables',","            bmp: '\\uA000-\\uA48F'","        },","        {","            name: 'InYijing_Hexagram_Symbols',","            bmp: '\\u4DC0-\\u4DFF'","        }","    ]);","","};","","},{}],5:[function(require,module,exports){","/*!"," * XRegExp Unicode Categories 3.2.0"," * <xregexp.com>"," * Steven Levithan (c) 2010-2017 MIT License"," * Unicode data by Mathias Bynens <mathiasbynens.be>"," */","","module.exports = function(XRegExp) {","    'use strict';","","    /**","     * Adds support for Unicode's general categories. E.g., `\\p{Lu}` or `\\p{Uppercase Letter}`. See","     * category descriptions in UAX #44 <http://unicode.org/reports/tr44/#GC_Values_Table>. Token","     * names are case insensitive, and any spaces, hyphens, and underscores are ignored.","     *","     * Uses Unicode 9.0.0.","     *","     * @requires XRegExp, Unicode Base","     */","","    if (!XRegExp.addUnicodeData) {","        throw new ReferenceError('Unicode Base must be loaded before Unicode Categories');","    }","","    XRegExp.addUnicodeData([","        {","            name: 'C',","            alias: 'Other',","            isBmpLast: true,","            bmp: '\\0-\\x1F\\x7F-\\x9F\\xAD\\u0378\\u0379\\u0380-\\u0383\\u038B\\u038D\\u03A2\\u0530\\u0557\\u0558\\u0560\\u0588\\u058B\\u058C\\u0590\\u05C8-\\u05CF\\u05EB-\\u05EF\\u05F5-\\u0605\\u061C\\u061D\\u06DD\\u070E\\u070F\\u074B\\u074C\\u07B2-\\u07BF\\u07FB-\\u07FF\\u082E\\u082F\\u083F\\u085C\\u085D\\u085F-\\u089F\\u08B5\\u08BE-\\u08D3\\u08E2\\u0984\\u098D\\u098E\\u0991\\u0992\\u09A9\\u09B1\\u09B3-\\u09B5\\u09BA\\u09BB\\u09C5\\u09C6\\u09C9\\u09CA\\u09CF-\\u09D6\\u09D8-\\u09DB\\u09DE\\u09E4\\u09E5\\u09FC-\\u0A00\\u0A04\\u0A0B-\\u0A0E\\u0A11\\u0A12\\u0A29\\u0A31\\u0A34\\u0A37\\u0A3A\\u0A3B\\u0A3D\\u0A43-\\u0A46\\u0A49\\u0A4A\\u0A4E-\\u0A50\\u0A52-\\u0A58\\u0A5D\\u0A5F-\\u0A65\\u0A76-\\u0A80\\u0A84\\u0A8E\\u0A92\\u0AA9\\u0AB1\\u0AB4\\u0ABA\\u0ABB\\u0AC6\\u0ACA\\u0ACE\\u0ACF\\u0AD1-\\u0ADF\\u0AE4\\u0AE5\\u0AF2-\\u0AF8\\u0AFA-\\u0B00\\u0B04\\u0B0D\\u0B0E\\u0B11\\u0B12\\u0B29\\u0B31\\u0B34\\u0B3A\\u0B3B\\u0B45\\u0B46\\u0B49\\u0B4A\\u0B4E-\\u0B55\\u0B58-\\u0B5B\\u0B5E\\u0B64\\u0B65\\u0B78-\\u0B81\\u0B84\\u0B8B-\\u0B8D\\u0B91\\u0B96-\\u0B98\\u0B9B\\u0B9D\\u0BA0-\\u0BA2\\u0BA5-\\u0BA7\\u0BAB-\\u0BAD\\u0BBA-\\u0BBD\\u0BC3-\\u0BC5\\u0BC9\\u0BCE\\u0BCF\\u0BD1-\\u0BD6\\u0BD8-\\u0BE5\\u0BFB-\\u0BFF\\u0C04\\u0C0D\\u0C11\\u0C29\\u0C3A-\\u0C3C\\u0C45\\u0C49\\u0C4E-\\u0C54\\u0C57\\u0C5B-\\u0C5F\\u0C64\\u0C65\\u0C70-\\u0C77\\u0C84\\u0C8D\\u0C91\\u0CA9\\u0CB4\\u0CBA\\u0CBB\\u0CC5\\u0CC9\\u0CCE-\\u0CD4\\u0CD7-\\u0CDD\\u0CDF\\u0CE4\\u0CE5\\u0CF0\\u0CF3-\\u0D00\\u0D04\\u0D0D\\u0D11\\u0D3B\\u0D3C\\u0D45\\u0D49\\u0D50-\\u0D53\\u0D64\\u0D65\\u0D80\\u0D81\\u0D84\\u0D97-\\u0D99\\u0DB2\\u0DBC\\u0DBE\\u0DBF\\u0DC7-\\u0DC9\\u0DCB-\\u0DCE\\u0DD5\\u0DD7\\u0DE0-\\u0DE5\\u0DF0\\u0DF1\\u0DF5-\\u0E00\\u0E3B-\\u0E3E\\u0E5C-\\u0E80\\u0E83\\u0E85\\u0E86\\u0E89\\u0E8B\\u0E8C\\u0E8E-\\u0E93\\u0E98\\u0EA0\\u0EA4\\u0EA6\\u0EA8\\u0EA9\\u0EAC\\u0EBA\\u0EBE\\u0EBF\\u0EC5\\u0EC7\\u0ECE\\u0ECF\\u0EDA\\u0EDB\\u0EE0-\\u0EFF\\u0F48\\u0F6D-\\u0F70\\u0F98\\u0FBD\\u0FCD\\u0FDB-\\u0FFF\\u10C6\\u10C8-\\u10CC\\u10CE\\u10CF\\u1249\\u124E\\u124F\\u1257\\u1259\\u125E\\u125F\\u1289\\u128E\\u128F\\u12B1\\u12B6\\u12B7\\u12BF\\u12C1\\u12C6\\u12C7\\u12D7\\u1311\\u1316\\u1317\\u135B\\u135C\\u137D-\\u137F\\u139A-\\u139F\\u13F6\\u13F7\\u13FE\\u13FF\\u169D-\\u169F\\u16F9-\\u16FF\\u170D\\u1715-\\u171F\\u1737-\\u173F\\u1754-\\u175F\\u176D\\u1771\\u1774-\\u177F\\u17DE\\u17DF\\u17EA-\\u17EF\\u17FA-\\u17FF\\u180E\\u180F\\u181A-\\u181F\\u1878-\\u187F\\u18AB-\\u18AF\\u18F6-\\u18FF\\u191F\\u192C-\\u192F\\u193C-\\u193F\\u1941-\\u1943\\u196E\\u196F\\u1975-\\u197F\\u19AC-\\u19AF\\u19CA-\\u19CF\\u19DB-\\u19DD\\u1A1C\\u1A1D\\u1A5F\\u1A7D\\u1A7E\\u1A8A-\\u1A8F\\u1A9A-\\u1A9F\\u1AAE\\u1AAF\\u1ABF-\\u1AFF\\u1B4C-\\u1B4F\\u1B7D-\\u1B7F\\u1BF4-\\u1BFB\\u1C38-\\u1C3A\\u1C4A-\\u1C4C\\u1C89-\\u1CBF\\u1CC8-\\u1CCF\\u1CF7\\u1CFA-\\u1CFF\\u1DF6-\\u1DFA\\u1F16\\u1F17\\u1F1E\\u1F1F\\u1F46\\u1F47\\u1F4E\\u1F4F\\u1F58\\u1F5A\\u1F5C\\u1F5E\\u1F7E\\u1F7F\\u1FB5\\u1FC5\\u1FD4\\u1FD5\\u1FDC\\u1FF0\\u1FF1\\u1FF5\\u1FFF\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u206F\\u2072\\u2073\\u208F\\u209D-\\u209F\\u20BF-\\u20CF\\u20F1-\\u20FF\\u218C-\\u218F\\u23FF\\u2427-\\u243F\\u244B-\\u245F\\u2B74\\u2B75\\u2B96\\u2B97\\u2BBA-\\u2BBC\\u2BC9\\u2BD2-\\u2BEB\\u2BF0-\\u2BFF\\u2C2F\\u2C5F\\u2CF4-\\u2CF8\\u2D26\\u2D28-\\u2D2C\\u2D2E\\u2D2F\\u2D68-\\u2D6E\\u2D71-\\u2D7E\\u2D97-\\u2D9F\\u2DA7\\u2DAF\\u2DB7\\u2DBF\\u2DC7\\u2DCF\\u2DD7\\u2DDF\\u2E45-\\u2E7F\\u2E9A\\u2EF4-\\u2EFF\\u2FD6-\\u2FEF\\u2FFC-\\u2FFF\\u3040\\u3097\\u3098\\u3100-\\u3104\\u312E-\\u3130\\u318F\\u31BB-\\u31BF\\u31E4-\\u31EF\\u321F\\u32FF\\u4DB6-\\u4DBF\\u9FD6-\\u9FFF\\uA48D-\\uA48F\\uA4C7-\\uA4CF\\uA62C-\\uA63F\\uA6F8-\\uA6FF\\uA7AF\\uA7B8-\\uA7F6\\uA82C-\\uA82F\\uA83A-\\uA83F\\uA878-\\uA87F\\uA8C6-\\uA8CD\\uA8DA-\\uA8DF\\uA8FE\\uA8FF\\uA954-\\uA95E\\uA97D-\\uA97F\\uA9CE\\uA9DA-\\uA9DD\\uA9FF\\uAA37-\\uAA3F\\uAA4E\\uAA4F\\uAA5A\\uAA5B\\uAAC3-\\uAADA\\uAAF7-\\uAB00\\uAB07\\uAB08\\uAB0F\\uAB10\\uAB17-\\uAB1F\\uAB27\\uAB2F\\uAB66-\\uAB6F\\uABEE\\uABEF\\uABFA-\\uABFF\\uD7A4-\\uD7AF\\uD7C7-\\uD7CA\\uD7FC-\\uF8FF\\uFA6E\\uFA6F\\uFADA-\\uFAFF\\uFB07-\\uFB12\\uFB18-\\uFB1C\\uFB37\\uFB3D\\uFB3F\\uFB42\\uFB45\\uFBC2-\\uFBD2\\uFD40-\\uFD4F\\uFD90\\uFD91\\uFDC8-\\uFDEF\\uFDFE\\uFDFF\\uFE1A-\\uFE1F\\uFE53\\uFE67\\uFE6C-\\uFE6F\\uFE75\\uFEFD-\\uFF00\\uFFBF-\\uFFC1\\uFFC8\\uFFC9\\uFFD0\\uFFD1\\uFFD8\\uFFD9\\uFFDD-\\uFFDF\\uFFE7\\uFFEF-\\uFFFB\\uFFFE\\uFFFF',","            astral: '\\uD800[\\uDC0C\\uDC27\\uDC3B\\uDC3E\\uDC4E\\uDC4F\\uDC5E-\\uDC7F\\uDCFB-\\uDCFF\\uDD03-\\uDD06\\uDD34-\\uDD36\\uDD8F\\uDD9C-\\uDD9F\\uDDA1-\\uDDCF\\uDDFE-\\uDE7F\\uDE9D-\\uDE9F\\uDED1-\\uDEDF\\uDEFC-\\uDEFF\\uDF24-\\uDF2F\\uDF4B-\\uDF4F\\uDF7B-\\uDF7F\\uDF9E\\uDFC4-\\uDFC7\\uDFD6-\\uDFFF]|\\uD801[\\uDC9E\\uDC9F\\uDCAA-\\uDCAF\\uDCD4-\\uDCD7\\uDCFC-\\uDCFF\\uDD28-\\uDD2F\\uDD64-\\uDD6E\\uDD70-\\uDDFF\\uDF37-\\uDF3F\\uDF56-\\uDF5F\\uDF68-\\uDFFF]|\\uD802[\\uDC06\\uDC07\\uDC09\\uDC36\\uDC39-\\uDC3B\\uDC3D\\uDC3E\\uDC56\\uDC9F-\\uDCA6\\uDCB0-\\uDCDF\\uDCF3\\uDCF6-\\uDCFA\\uDD1C-\\uDD1E\\uDD3A-\\uDD3E\\uDD40-\\uDD7F\\uDDB8-\\uDDBB\\uDDD0\\uDDD1\\uDE04\\uDE07-\\uDE0B\\uDE14\\uDE18\\uDE34-\\uDE37\\uDE3B-\\uDE3E\\uDE48-\\uDE4F\\uDE59-\\uDE5F\\uDEA0-\\uDEBF\\uDEE7-\\uDEEA\\uDEF7-\\uDEFF\\uDF36-\\uDF38\\uDF56\\uDF57\\uDF73-\\uDF77\\uDF92-\\uDF98\\uDF9D-\\uDFA8\\uDFB0-\\uDFFF]|\\uD803[\\uDC49-\\uDC7F\\uDCB3-\\uDCBF\\uDCF3-\\uDCF9\\uDD00-\\uDE5F\\uDE7F-\\uDFFF]|\\uD804[\\uDC4E-\\uDC51\\uDC70-\\uDC7E\\uDCBD\\uDCC2-\\uDCCF\\uDCE9-\\uDCEF\\uDCFA-\\uDCFF\\uDD35\\uDD44-\\uDD4F\\uDD77-\\uDD7F\\uDDCE\\uDDCF\\uDDE0\\uDDF5-\\uDDFF\\uDE12\\uDE3F-\\uDE7F\\uDE87\\uDE89\\uDE8E\\uDE9E\\uDEAA-\\uDEAF\\uDEEB-\\uDEEF\\uDEFA-\\uDEFF\\uDF04\\uDF0D\\uDF0E\\uDF11\\uDF12\\uDF29\\uDF31\\uDF34\\uDF3A\\uDF3B\\uDF45\\uDF46\\uDF49\\uDF4A\\uDF4E\\uDF4F\\uDF51-\\uDF56\\uDF58-\\uDF5C\\uDF64\\uDF65\\uDF6D-\\uDF6F\\uDF75-\\uDFFF]|\\uD805[\\uDC5A\\uDC5C\\uDC5E-\\uDC7F\\uDCC8-\\uDCCF\\uDCDA-\\uDD7F\\uDDB6\\uDDB7\\uDDDE-\\uDDFF\\uDE45-\\uDE4F\\uDE5A-\\uDE5F\\uDE6D-\\uDE7F\\uDEB8-\\uDEBF\\uDECA-\\uDEFF\\uDF1A-\\uDF1C\\uDF2C-\\uDF2F\\uDF40-\\uDFFF]|\\uD806[\\uDC00-\\uDC9F\\uDCF3-\\uDCFE\\uDD00-\\uDEBF\\uDEF9-\\uDFFF]|\\uD807[\\uDC09\\uDC37\\uDC46-\\uDC4F\\uDC6D-\\uDC6F\\uDC90\\uDC91\\uDCA8\\uDCB7-\\uDFFF]|\\uD808[\\uDF9A-\\uDFFF]|\\uD809[\\uDC6F\\uDC75-\\uDC7F\\uDD44-\\uDFFF]|[\\uD80A\\uD80B\\uD80E-\\uD810\\uD812-\\uD819\\uD823-\\uD82B\\uD82D\\uD82E\\uD830-\\uD833\\uD837\\uD839\\uD83F\\uD874-\\uD87D\\uD87F-\\uDB3F\\uDB41-\\uDBFF][\\uDC00-\\uDFFF]|\\uD80D[\\uDC2F-\\uDFFF]|\\uD811[\\uDE47-\\uDFFF]|\\uD81A[\\uDE39-\\uDE3F\\uDE5F\\uDE6A-\\uDE6D\\uDE70-\\uDECF\\uDEEE\\uDEEF\\uDEF6-\\uDEFF\\uDF46-\\uDF4F\\uDF5A\\uDF62\\uDF78-\\uDF7C\\uDF90-\\uDFFF]|\\uD81B[\\uDC00-\\uDEFF\\uDF45-\\uDF4F\\uDF7F-\\uDF8E\\uDFA0-\\uDFDF\\uDFE1-\\uDFFF]|\\uD821[\\uDFED-\\uDFFF]|\\uD822[\\uDEF3-\\uDFFF]|\\uD82C[\\uDC02-\\uDFFF]|\\uD82F[\\uDC6B-\\uDC6F\\uDC7D-\\uDC7F\\uDC89-\\uDC8F\\uDC9A\\uDC9B\\uDCA0-\\uDFFF]|\\uD834[\\uDCF6-\\uDCFF\\uDD27\\uDD28\\uDD73-\\uDD7A\\uDDE9-\\uDDFF\\uDE46-\\uDEFF\\uDF57-\\uDF5F\\uDF72-\\uDFFF]|\\uD835[\\uDC55\\uDC9D\\uDCA0\\uDCA1\\uDCA3\\uDCA4\\uDCA7\\uDCA8\\uDCAD\\uDCBA\\uDCBC\\uDCC4\\uDD06\\uDD0B\\uDD0C\\uDD15\\uDD1D\\uDD3A\\uDD3F\\uDD45\\uDD47-\\uDD49\\uDD51\\uDEA6\\uDEA7\\uDFCC\\uDFCD]|\\uD836[\\uDE8C-\\uDE9A\\uDEA0\\uDEB0-\\uDFFF]|\\uD838[\\uDC07\\uDC19\\uDC1A\\uDC22\\uDC25\\uDC2B-\\uDFFF]|\\uD83A[\\uDCC5\\uDCC6\\uDCD7-\\uDCFF\\uDD4B-\\uDD4F\\uDD5A-\\uDD5D\\uDD60-\\uDFFF]|\\uD83B[\\uDC00-\\uDDFF\\uDE04\\uDE20\\uDE23\\uDE25\\uDE26\\uDE28\\uDE33\\uDE38\\uDE3A\\uDE3C-\\uDE41\\uDE43-\\uDE46\\uDE48\\uDE4A\\uDE4C\\uDE50\\uDE53\\uDE55\\uDE56\\uDE58\\uDE5A\\uDE5C\\uDE5E\\uDE60\\uDE63\\uDE65\\uDE66\\uDE6B\\uDE73\\uDE78\\uDE7D\\uDE7F\\uDE8A\\uDE9C-\\uDEA0\\uDEA4\\uDEAA\\uDEBC-\\uDEEF\\uDEF2-\\uDFFF]|\\uD83C[\\uDC2C-\\uDC2F\\uDC94-\\uDC9F\\uDCAF\\uDCB0\\uDCC0\\uDCD0\\uDCF6-\\uDCFF\\uDD0D-\\uDD0F\\uDD2F\\uDD6C-\\uDD6F\\uDDAD-\\uDDE5\\uDE03-\\uDE0F\\uDE3C-\\uDE3F\\uDE49-\\uDE4F\\uDE52-\\uDEFF]|\\uD83D[\\uDED3-\\uDEDF\\uDEED-\\uDEEF\\uDEF7-\\uDEFF\\uDF74-\\uDF7F\\uDFD5-\\uDFFF]|\\uD83E[\\uDC0C-\\uDC0F\\uDC48-\\uDC4F\\uDC5A-\\uDC5F\\uDC88-\\uDC8F\\uDCAE-\\uDD0F\\uDD1F\\uDD28-\\uDD2F\\uDD31\\uDD32\\uDD3F\\uDD4C-\\uDD4F\\uDD5F-\\uDD7F\\uDD92-\\uDDBF\\uDDC1-\\uDFFF]|\\uD869[\\uDED7-\\uDEFF]|\\uD86D[\\uDF35-\\uDF3F]|\\uD86E[\\uDC1E\\uDC1F]|\\uD873[\\uDEA2-\\uDFFF]|\\uD87E[\\uDE1E-\\uDFFF]|\\uDB40[\\uDC00-\\uDCFF\\uDDF0-\\uDFFF]'","        },","        {","            name: 'Cc',","            alias: 'Control',","            bmp: '\\0-\\x1F\\x7F-\\x9F'","        },","        {","            name: 'Cf',","            alias: 'Format',","            bmp: '\\xAD\\u0600-\\u0605\\u061C\\u06DD\\u070F\\u08E2\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2064\\u2066-\\u206F\\uFEFF\\uFFF9-\\uFFFB',","            astral: '\\uD804\\uDCBD|\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDD73-\\uDD7A]|\\uDB40[\\uDC01\\uDC20-\\uDC7F]'","        },","        {","            name: 'Cn',","            alias: 'Unassigned',","            bmp: '\\u0378\\u0379\\u0380-\\u0383\\u038B\\u038D\\u03A2\\u0530\\u0557\\u0558\\u0560\\u0588\\u058B\\u058C\\u0590\\u05C8-\\u05CF\\u05EB-\\u05EF\\u05F5-\\u05FF\\u061D\\u070E\\u074B\\u074C\\u07B2-\\u07BF\\u07FB-\\u07FF\\u082E\\u082F\\u083F\\u085C\\u085D\\u085F-\\u089F\\u08B5\\u08BE-\\u08D3\\u0984\\u098D\\u098E\\u0991\\u0992\\u09A9\\u09B1\\u09B3-\\u09B5\\u09BA\\u09BB\\u09C5\\u09C6\\u09C9\\u09CA\\u09CF-\\u09D6\\u09D8-\\u09DB\\u09DE\\u09E4\\u09E5\\u09FC-\\u0A00\\u0A04\\u0A0B-\\u0A0E\\u0A11\\u0A12\\u0A29\\u0A31\\u0A34\\u0A37\\u0A3A\\u0A3B\\u0A3D\\u0A43-\\u0A46\\u0A49\\u0A4A\\u0A4E-\\u0A50\\u0A52-\\u0A58\\u0A5D\\u0A5F-\\u0A65\\u0A76-\\u0A80\\u0A84\\u0A8E\\u0A92\\u0AA9\\u0AB1\\u0AB4\\u0ABA\\u0ABB\\u0AC6\\u0ACA\\u0ACE\\u0ACF\\u0AD1-\\u0ADF\\u0AE4\\u0AE5\\u0AF2-\\u0AF8\\u0AFA-\\u0B00\\u0B04\\u0B0D\\u0B0E\\u0B11\\u0B12\\u0B29\\u0B31\\u0B34\\u0B3A\\u0B3B\\u0B45\\u0B46\\u0B49\\u0B4A\\u0B4E-\\u0B55\\u0B58-\\u0B5B\\u0B5E\\u0B64\\u0B65\\u0B78-\\u0B81\\u0B84\\u0B8B-\\u0B8D\\u0B91\\u0B96-\\u0B98\\u0B9B\\u0B9D\\u0BA0-\\u0BA2\\u0BA5-\\u0BA7\\u0BAB-\\u0BAD\\u0BBA-\\u0BBD\\u0BC3-\\u0BC5\\u0BC9\\u0BCE\\u0BCF\\u0BD1-\\u0BD6\\u0BD8-\\u0BE5\\u0BFB-\\u0BFF\\u0C04\\u0C0D\\u0C11\\u0C29\\u0C3A-\\u0C3C\\u0C45\\u0C49\\u0C4E-\\u0C54\\u0C57\\u0C5B-\\u0C5F\\u0C64\\u0C65\\u0C70-\\u0C77\\u0C84\\u0C8D\\u0C91\\u0CA9\\u0CB4\\u0CBA\\u0CBB\\u0CC5\\u0CC9\\u0CCE-\\u0CD4\\u0CD7-\\u0CDD\\u0CDF\\u0CE4\\u0CE5\\u0CF0\\u0CF3-\\u0D00\\u0D04\\u0D0D\\u0D11\\u0D3B\\u0D3C\\u0D45\\u0D49\\u0D50-\\u0D53\\u0D64\\u0D65\\u0D80\\u0D81\\u0D84\\u0D97-\\u0D99\\u0DB2\\u0DBC\\u0DBE\\u0DBF\\u0DC7-\\u0DC9\\u0DCB-\\u0DCE\\u0DD5\\u0DD7\\u0DE0-\\u0DE5\\u0DF0\\u0DF1\\u0DF5-\\u0E00\\u0E3B-\\u0E3E\\u0E5C-\\u0E80\\u0E83\\u0E85\\u0E86\\u0E89\\u0E8B\\u0E8C\\u0E8E-\\u0E93\\u0E98\\u0EA0\\u0EA4\\u0EA6\\u0EA8\\u0EA9\\u0EAC\\u0EBA\\u0EBE\\u0EBF\\u0EC5\\u0EC7\\u0ECE\\u0ECF\\u0EDA\\u0EDB\\u0EE0-\\u0EFF\\u0F48\\u0F6D-\\u0F70\\u0F98\\u0FBD\\u0FCD\\u0FDB-\\u0FFF\\u10C6\\u10C8-\\u10CC\\u10CE\\u10CF\\u1249\\u124E\\u124F\\u1257\\u1259\\u125E\\u125F\\u1289\\u128E\\u128F\\u12B1\\u12B6\\u12B7\\u12BF\\u12C1\\u12C6\\u12C7\\u12D7\\u1311\\u1316\\u1317\\u135B\\u135C\\u137D-\\u137F\\u139A-\\u139F\\u13F6\\u13F7\\u13FE\\u13FF\\u169D-\\u169F\\u16F9-\\u16FF\\u170D\\u1715-\\u171F\\u1737-\\u173F\\u1754-\\u175F\\u176D\\u1771\\u1774-\\u177F\\u17DE\\u17DF\\u17EA-\\u17EF\\u17FA-\\u17FF\\u180F\\u181A-\\u181F\\u1878-\\u187F\\u18AB-\\u18AF\\u18F6-\\u18FF\\u191F\\u192C-\\u192F\\u193C-\\u193F\\u1941-\\u1943\\u196E\\u196F\\u1975-\\u197F\\u19AC-\\u19AF\\u19CA-\\u19CF\\u19DB-\\u19DD\\u1A1C\\u1A1D\\u1A5F\\u1A7D\\u1A7E\\u1A8A-\\u1A8F\\u1A9A-\\u1A9F\\u1AAE\\u1AAF\\u1ABF-\\u1AFF\\u1B4C-\\u1B4F\\u1B7D-\\u1B7F\\u1BF4-\\u1BFB\\u1C38-\\u1C3A\\u1C4A-\\u1C4C\\u1C89-\\u1CBF\\u1CC8-\\u1CCF\\u1CF7\\u1CFA-\\u1CFF\\u1DF6-\\u1DFA\\u1F16\\u1F17\\u1F1E\\u1F1F\\u1F46\\u1F47\\u1F4E\\u1F4F\\u1F58\\u1F5A\\u1F5C\\u1F5E\\u1F7E\\u1F7F\\u1FB5\\u1FC5\\u1FD4\\u1FD5\\u1FDC\\u1FF0\\u1FF1\\u1FF5\\u1FFF\\u2065\\u2072\\u2073\\u208F\\u209D-\\u209F\\u20BF-\\u20CF\\u20F1-\\u20FF\\u218C-\\u218F\\u23FF\\u2427-\\u243F\\u244B-\\u245F\\u2B74\\u2B75\\u2B96\\u2B97\\u2BBA-\\u2BBC\\u2BC9\\u2BD2-\\u2BEB\\u2BF0-\\u2BFF\\u2C2F\\u2C5F\\u2CF4-\\u2CF8\\u2D26\\u2D28-\\u2D2C\\u2D2E\\u2D2F\\u2D68-\\u2D6E\\u2D71-\\u2D7E\\u2D97-\\u2D9F\\u2DA7\\u2DAF\\u2DB7\\u2DBF\\u2DC7\\u2DCF\\u2DD7\\u2DDF\\u2E45-\\u2E7F\\u2E9A\\u2EF4-\\u2EFF\\u2FD6-\\u2FEF\\u2FFC-\\u2FFF\\u3040\\u3097\\u3098\\u3100-\\u3104\\u312E-\\u3130\\u318F\\u31BB-\\u31BF\\u31E4-\\u31EF\\u321F\\u32FF\\u4DB6-\\u4DBF\\u9FD6-\\u9FFF\\uA48D-\\uA48F\\uA4C7-\\uA4CF\\uA62C-\\uA63F\\uA6F8-\\uA6FF\\uA7AF\\uA7B8-\\uA7F6\\uA82C-\\uA82F\\uA83A-\\uA83F\\uA878-\\uA87F\\uA8C6-\\uA8CD\\uA8DA-\\uA8DF\\uA8FE\\uA8FF\\uA954-\\uA95E\\uA97D-\\uA97F\\uA9CE\\uA9DA-\\uA9DD\\uA9FF\\uAA37-\\uAA3F\\uAA4E\\uAA4F\\uAA5A\\uAA5B\\uAAC3-\\uAADA\\uAAF7-\\uAB00\\uAB07\\uAB08\\uAB0F\\uAB10\\uAB17-\\uAB1F\\uAB27\\uAB2F\\uAB66-\\uAB6F\\uABEE\\uABEF\\uABFA-\\uABFF\\uD7A4-\\uD7AF\\uD7C7-\\uD7CA\\uD7FC-\\uD7FF\\uFA6E\\uFA6F\\uFADA-\\uFAFF\\uFB07-\\uFB12\\uFB18-\\uFB1C\\uFB37\\uFB3D\\uFB3F\\uFB42\\uFB45\\uFBC2-\\uFBD2\\uFD40-\\uFD4F\\uFD90\\uFD91\\uFDC8-\\uFDEF\\uFDFE\\uFDFF\\uFE1A-\\uFE1F\\uFE53\\uFE67\\uFE6C-\\uFE6F\\uFE75\\uFEFD\\uFEFE\\uFF00\\uFFBF-\\uFFC1\\uFFC8\\uFFC9\\uFFD0\\uFFD1\\uFFD8\\uFFD9\\uFFDD-\\uFFDF\\uFFE7\\uFFEF-\\uFFF8\\uFFFE\\uFFFF',","            astral: '\\uD800[\\uDC0C\\uDC27\\uDC3B\\uDC3E\\uDC4E\\uDC4F\\uDC5E-\\uDC7F\\uDCFB-\\uDCFF\\uDD03-\\uDD06\\uDD34-\\uDD36\\uDD8F\\uDD9C-\\uDD9F\\uDDA1-\\uDDCF\\uDDFE-\\uDE7F\\uDE9D-\\uDE9F\\uDED1-\\uDEDF\\uDEFC-\\uDEFF\\uDF24-\\uDF2F\\uDF4B-\\uDF4F\\uDF7B-\\uDF7F\\uDF9E\\uDFC4-\\uDFC7\\uDFD6-\\uDFFF]|\\uD801[\\uDC9E\\uDC9F\\uDCAA-\\uDCAF\\uDCD4-\\uDCD7\\uDCFC-\\uDCFF\\uDD28-\\uDD2F\\uDD64-\\uDD6E\\uDD70-\\uDDFF\\uDF37-\\uDF3F\\uDF56-\\uDF5F\\uDF68-\\uDFFF]|\\uD802[\\uDC06\\uDC07\\uDC09\\uDC36\\uDC39-\\uDC3B\\uDC3D\\uDC3E\\uDC56\\uDC9F-\\uDCA6\\uDCB0-\\uDCDF\\uDCF3\\uDCF6-\\uDCFA\\uDD1C-\\uDD1E\\uDD3A-\\uDD3E\\uDD40-\\uDD7F\\uDDB8-\\uDDBB\\uDDD0\\uDDD1\\uDE04\\uDE07-\\uDE0B\\uDE14\\uDE18\\uDE34-\\uDE37\\uDE3B-\\uDE3E\\uDE48-\\uDE4F\\uDE59-\\uDE5F\\uDEA0-\\uDEBF\\uDEE7-\\uDEEA\\uDEF7-\\uDEFF\\uDF36-\\uDF38\\uDF56\\uDF57\\uDF73-\\uDF77\\uDF92-\\uDF98\\uDF9D-\\uDFA8\\uDFB0-\\uDFFF]|\\uD803[\\uDC49-\\uDC7F\\uDCB3-\\uDCBF\\uDCF3-\\uDCF9\\uDD00-\\uDE5F\\uDE7F-\\uDFFF]|\\uD804[\\uDC4E-\\uDC51\\uDC70-\\uDC7E\\uDCC2-\\uDCCF\\uDCE9-\\uDCEF\\uDCFA-\\uDCFF\\uDD35\\uDD44-\\uDD4F\\uDD77-\\uDD7F\\uDDCE\\uDDCF\\uDDE0\\uDDF5-\\uDDFF\\uDE12\\uDE3F-\\uDE7F\\uDE87\\uDE89\\uDE8E\\uDE9E\\uDEAA-\\uDEAF\\uDEEB-\\uDEEF\\uDEFA-\\uDEFF\\uDF04\\uDF0D\\uDF0E\\uDF11\\uDF12\\uDF29\\uDF31\\uDF34\\uDF3A\\uDF3B\\uDF45\\uDF46\\uDF49\\uDF4A\\uDF4E\\uDF4F\\uDF51-\\uDF56\\uDF58-\\uDF5C\\uDF64\\uDF65\\uDF6D-\\uDF6F\\uDF75-\\uDFFF]|\\uD805[\\uDC5A\\uDC5C\\uDC5E-\\uDC7F\\uDCC8-\\uDCCF\\uDCDA-\\uDD7F\\uDDB6\\uDDB7\\uDDDE-\\uDDFF\\uDE45-\\uDE4F\\uDE5A-\\uDE5F\\uDE6D-\\uDE7F\\uDEB8-\\uDEBF\\uDECA-\\uDEFF\\uDF1A-\\uDF1C\\uDF2C-\\uDF2F\\uDF40-\\uDFFF]|\\uD806[\\uDC00-\\uDC9F\\uDCF3-\\uDCFE\\uDD00-\\uDEBF\\uDEF9-\\uDFFF]|\\uD807[\\uDC09\\uDC37\\uDC46-\\uDC4F\\uDC6D-\\uDC6F\\uDC90\\uDC91\\uDCA8\\uDCB7-\\uDFFF]|\\uD808[\\uDF9A-\\uDFFF]|\\uD809[\\uDC6F\\uDC75-\\uDC7F\\uDD44-\\uDFFF]|[\\uD80A\\uD80B\\uD80E-\\uD810\\uD812-\\uD819\\uD823-\\uD82B\\uD82D\\uD82E\\uD830-\\uD833\\uD837\\uD839\\uD83F\\uD874-\\uD87D\\uD87F-\\uDB3F\\uDB41-\\uDB7F][\\uDC00-\\uDFFF]|\\uD80D[\\uDC2F-\\uDFFF]|\\uD811[\\uDE47-\\uDFFF]|\\uD81A[\\uDE39-\\uDE3F\\uDE5F\\uDE6A-\\uDE6D\\uDE70-\\uDECF\\uDEEE\\uDEEF\\uDEF6-\\uDEFF\\uDF46-\\uDF4F\\uDF5A\\uDF62\\uDF78-\\uDF7C\\uDF90-\\uDFFF]|\\uD81B[\\uDC00-\\uDEFF\\uDF45-\\uDF4F\\uDF7F-\\uDF8E\\uDFA0-\\uDFDF\\uDFE1-\\uDFFF]|\\uD821[\\uDFED-\\uDFFF]|\\uD822[\\uDEF3-\\uDFFF]|\\uD82C[\\uDC02-\\uDFFF]|\\uD82F[\\uDC6B-\\uDC6F\\uDC7D-\\uDC7F\\uDC89-\\uDC8F\\uDC9A\\uDC9B\\uDCA4-\\uDFFF]|\\uD834[\\uDCF6-\\uDCFF\\uDD27\\uDD28\\uDDE9-\\uDDFF\\uDE46-\\uDEFF\\uDF57-\\uDF5F\\uDF72-\\uDFFF]|\\uD835[\\uDC55\\uDC9D\\uDCA0\\uDCA1\\uDCA3\\uDCA4\\uDCA7\\uDCA8\\uDCAD\\uDCBA\\uDCBC\\uDCC4\\uDD06\\uDD0B\\uDD0C\\uDD15\\uDD1D\\uDD3A\\uDD3F\\uDD45\\uDD47-\\uDD49\\uDD51\\uDEA6\\uDEA7\\uDFCC\\uDFCD]|\\uD836[\\uDE8C-\\uDE9A\\uDEA0\\uDEB0-\\uDFFF]|\\uD838[\\uDC07\\uDC19\\uDC1A\\uDC22\\uDC25\\uDC2B-\\uDFFF]|\\uD83A[\\uDCC5\\uDCC6\\uDCD7-\\uDCFF\\uDD4B-\\uDD4F\\uDD5A-\\uDD5D\\uDD60-\\uDFFF]|\\uD83B[\\uDC00-\\uDDFF\\uDE04\\uDE20\\uDE23\\uDE25\\uDE26\\uDE28\\uDE33\\uDE38\\uDE3A\\uDE3C-\\uDE41\\uDE43-\\uDE46\\uDE48\\uDE4A\\uDE4C\\uDE50\\uDE53\\uDE55\\uDE56\\uDE58\\uDE5A\\uDE5C\\uDE5E\\uDE60\\uDE63\\uDE65\\uDE66\\uDE6B\\uDE73\\uDE78\\uDE7D\\uDE7F\\uDE8A\\uDE9C-\\uDEA0\\uDEA4\\uDEAA\\uDEBC-\\uDEEF\\uDEF2-\\uDFFF]|\\uD83C[\\uDC2C-\\uDC2F\\uDC94-\\uDC9F\\uDCAF\\uDCB0\\uDCC0\\uDCD0\\uDCF6-\\uDCFF\\uDD0D-\\uDD0F\\uDD2F\\uDD6C-\\uDD6F\\uDDAD-\\uDDE5\\uDE03-\\uDE0F\\uDE3C-\\uDE3F\\uDE49-\\uDE4F\\uDE52-\\uDEFF]|\\uD83D[\\uDED3-\\uDEDF\\uDEED-\\uDEEF\\uDEF7-\\uDEFF\\uDF74-\\uDF7F\\uDFD5-\\uDFFF]|\\uD83E[\\uDC0C-\\uDC0F\\uDC48-\\uDC4F\\uDC5A-\\uDC5F\\uDC88-\\uDC8F\\uDCAE-\\uDD0F\\uDD1F\\uDD28-\\uDD2F\\uDD31\\uDD32\\uDD3F\\uDD4C-\\uDD4F\\uDD5F-\\uDD7F\\uDD92-\\uDDBF\\uDDC1-\\uDFFF]|\\uD869[\\uDED7-\\uDEFF]|\\uD86D[\\uDF35-\\uDF3F]|\\uD86E[\\uDC1E\\uDC1F]|\\uD873[\\uDEA2-\\uDFFF]|\\uD87E[\\uDE1E-\\uDFFF]|\\uDB40[\\uDC00\\uDC02-\\uDC1F\\uDC80-\\uDCFF\\uDDF0-\\uDFFF]|[\\uDBBF\\uDBFF][\\uDFFE\\uDFFF]'","        },","        {","            name: 'Co',","            alias: 'Private_Use',","            bmp: '\\uE000-\\uF8FF',","            astral: '[\\uDB80-\\uDBBE\\uDBC0-\\uDBFE][\\uDC00-\\uDFFF]|[\\uDBBF\\uDBFF][\\uDC00-\\uDFFD]'","        },","        {","            name: 'Cs',","            alias: 'Surrogate',","            bmp: '\\uD800-\\uDFFF'","        },","        {","            name: 'L',","            alias: 'Letter',","            bmp: 'A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC',","            astral: '\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF40\\uDF42-\\uDF49\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F\\uDFE0]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]'","        },","        {","            name: 'Ll',","            alias: 'Lowercase_Letter',","            bmp: 'a-z\\xB5\\xDF-\\xF6\\xF8-\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02AF\\u0371\\u0373\\u0377\\u037B-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0529\\u052B\\u052D\\u052F\\u0561-\\u0587\\u13F8-\\u13FD\\u1C80-\\u1C88\\u1D00-\\u1D2B\\u1D6B-\\u1D77\\u1D79-\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6\\u1FC7\\u1FD0-\\u1FD3\\u1FD6\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6\\u1FF7\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146-\\u2149\\u214E\\u2184\\u2C30-\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76-\\u2C7B\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2CEC\\u2CEE\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA699\\uA69B\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA793-\\uA795\\uA797\\uA799\\uA79B\\uA79D\\uA79F\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7B5\\uA7B7\\uA7FA\\uAB30-\\uAB5A\\uAB60-\\uAB65\\uAB70-\\uABBF\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A',","            astral: '\\uD801[\\uDC28-\\uDC4F\\uDCD8-\\uDCFB]|\\uD803[\\uDCC0-\\uDCF2]|\\uD806[\\uDCC0-\\uDCDF]|\\uD835[\\uDC1A-\\uDC33\\uDC4E-\\uDC54\\uDC56-\\uDC67\\uDC82-\\uDC9B\\uDCB6-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDCCF\\uDCEA-\\uDD03\\uDD1E-\\uDD37\\uDD52-\\uDD6B\\uDD86-\\uDD9F\\uDDBA-\\uDDD3\\uDDEE-\\uDE07\\uDE22-\\uDE3B\\uDE56-\\uDE6F\\uDE8A-\\uDEA5\\uDEC2-\\uDEDA\\uDEDC-\\uDEE1\\uDEFC-\\uDF14\\uDF16-\\uDF1B\\uDF36-\\uDF4E\\uDF50-\\uDF55\\uDF70-\\uDF88\\uDF8A-\\uDF8F\\uDFAA-\\uDFC2\\uDFC4-\\uDFC9\\uDFCB]|\\uD83A[\\uDD22-\\uDD43]'","        },","        {","            name: 'Lm',","            alias: 'Modifier_Letter',","            bmp: '\\u02B0-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0374\\u037A\\u0559\\u0640\\u06E5\\u06E6\\u07F4\\u07F5\\u07FA\\u081A\\u0824\\u0828\\u0971\\u0E46\\u0EC6\\u10FC\\u17D7\\u1843\\u1AA7\\u1C78-\\u1C7D\\u1D2C-\\u1D6A\\u1D78\\u1D9B-\\u1DBF\\u2071\\u207F\\u2090-\\u209C\\u2C7C\\u2C7D\\u2D6F\\u2E2F\\u3005\\u3031-\\u3035\\u303B\\u309D\\u309E\\u30FC-\\u30FE\\uA015\\uA4F8-\\uA4FD\\uA60C\\uA67F\\uA69C\\uA69D\\uA717-\\uA71F\\uA770\\uA788\\uA7F8\\uA7F9\\uA9CF\\uA9E6\\uAA70\\uAADD\\uAAF3\\uAAF4\\uAB5C-\\uAB5F\\uFF70\\uFF9E\\uFF9F',","            astral: '\\uD81A[\\uDF40-\\uDF43]|\\uD81B[\\uDF93-\\uDF9F\\uDFE0]'","        },","        {","            name: 'Lo',","            alias: 'Other_Letter',","            bmp: '\\xAA\\xBA\\u01BB\\u01C0-\\u01C3\\u0294\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u063F\\u0641-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u0800-\\u0815\\u0840-\\u0858\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0972-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E45\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10D0-\\u10FA\\u10FD-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17DC\\u1820-\\u1842\\u1844-\\u1877\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C77\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u2135-\\u2138\\u2D30-\\u2D67\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3006\\u303C\\u3041-\\u3096\\u309F\\u30A1-\\u30FA\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA014\\uA016-\\uA48C\\uA4D0-\\uA4F7\\uA500-\\uA60B\\uA610-\\uA61F\\uA62A\\uA62B\\uA66E\\uA6A0-\\uA6E5\\uA78F\\uA7F7\\uA7FB-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9E0-\\uA9E4\\uA9E7-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA6F\\uAA71-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB\\uAADC\\uAAE0-\\uAAEA\\uAAF2\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF66-\\uFF6F\\uFF71-\\uFF9D\\uFFA0-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC',","            astral: '\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF40\\uDF42-\\uDF49\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF]|\\uD801[\\uDC50-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCFF\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]'","        },","        {","            name: 'Lt',","            alias: 'Titlecase_Letter',","            bmp: '\\u01C5\\u01C8\\u01CB\\u01F2\\u1F88-\\u1F8F\\u1F98-\\u1F9F\\u1FA8-\\u1FAF\\u1FBC\\u1FCC\\u1FFC'","        },","        {","            name: 'Lu',","            alias: 'Uppercase_Letter',","            bmp: 'A-Z\\xC0-\\xD6\\xD8-\\xDE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0528\\u052A\\u052C\\u052E\\u0531-\\u0556\\u10A0-\\u10C5\\u10C7\\u10CD\\u13A0-\\u13F5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E\\u213F\\u2145\\u2183\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\u2CF2\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA698\\uA69A\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA792\\uA796\\uA798\\uA79A\\uA79C\\uA79E\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uA7AA-\\uA7AE\\uA7B0-\\uA7B4\\uA7B6\\uFF21-\\uFF3A',","            astral: '\\uD801[\\uDC00-\\uDC27\\uDCB0-\\uDCD3]|\\uD803[\\uDC80-\\uDCB2]|\\uD806[\\uDCA0-\\uDCBF]|\\uD835[\\uDC00-\\uDC19\\uDC34-\\uDC4D\\uDC68-\\uDC81\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB5\\uDCD0-\\uDCE9\\uDD04\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD38\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD6C-\\uDD85\\uDDA0-\\uDDB9\\uDDD4-\\uDDED\\uDE08-\\uDE21\\uDE3C-\\uDE55\\uDE70-\\uDE89\\uDEA8-\\uDEC0\\uDEE2-\\uDEFA\\uDF1C-\\uDF34\\uDF56-\\uDF6E\\uDF90-\\uDFA8\\uDFCA]|\\uD83A[\\uDD00-\\uDD21]'","        },","        {","            name: 'M',","            alias: 'Mark',","            bmp: '\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D4-\\u08E1\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B62\\u0B63\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0C00-\\u0C03\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0D01-\\u0D03\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D82\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F\\u109A-\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u180B-\\u180D\\u1885\\u1886\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F\\u1AB0-\\u1ABE\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF2-\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DF5\\u1DFB-\\u1DFF\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA880\\uA881\\uA8B4-\\uA8C5\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9E5\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F',","            astral: '\\uD800[\\uDDFD\\uDEE0\\uDF76-\\uDF7A]|\\uD802[\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F\\uDEE5\\uDEE6]|\\uD804[\\uDC00-\\uDC02\\uDC38-\\uDC46\\uDC7F-\\uDC82\\uDCB0-\\uDCBA\\uDD00-\\uDD02\\uDD27-\\uDD34\\uDD73\\uDD80-\\uDD82\\uDDB3-\\uDDC0\\uDDCA-\\uDDCC\\uDE2C-\\uDE37\\uDE3E\\uDEDF-\\uDEEA\\uDF00-\\uDF03\\uDF3C\\uDF3E-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF57\\uDF62\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC35-\\uDC46\\uDCB0-\\uDCC3\\uDDAF-\\uDDB5\\uDDB8-\\uDDC0\\uDDDC\\uDDDD\\uDE30-\\uDE40\\uDEAB-\\uDEB7\\uDF1D-\\uDF2B]|\\uD807[\\uDC2F-\\uDC36\\uDC38-\\uDC3F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6]|\\uD81A[\\uDEF0-\\uDEF4\\uDF30-\\uDF36]|\\uD81B[\\uDF51-\\uDF7E\\uDF8F-\\uDF92]|\\uD82F[\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]|\\uD83A[\\uDCD0-\\uDCD6\\uDD44-\\uDD4A]|\\uDB40[\\uDD00-\\uDDEF]'","        },","        {","            name: 'Mc',","            alias: 'Spacing_Mark',","            bmp: '\\u0903\\u093B\\u093E-\\u0940\\u0949-\\u094C\\u094E\\u094F\\u0982\\u0983\\u09BE-\\u09C0\\u09C7\\u09C8\\u09CB\\u09CC\\u09D7\\u0A03\\u0A3E-\\u0A40\\u0A83\\u0ABE-\\u0AC0\\u0AC9\\u0ACB\\u0ACC\\u0B02\\u0B03\\u0B3E\\u0B40\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0B57\\u0BBE\\u0BBF\\u0BC1\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD7\\u0C01-\\u0C03\\u0C41-\\u0C44\\u0C82\\u0C83\\u0CBE\\u0CC0-\\u0CC4\\u0CC7\\u0CC8\\u0CCA\\u0CCB\\u0CD5\\u0CD6\\u0D02\\u0D03\\u0D3E-\\u0D40\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D57\\u0D82\\u0D83\\u0DCF-\\u0DD1\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0F3E\\u0F3F\\u0F7F\\u102B\\u102C\\u1031\\u1038\\u103B\\u103C\\u1056\\u1057\\u1062-\\u1064\\u1067-\\u106D\\u1083\\u1084\\u1087-\\u108C\\u108F\\u109A-\\u109C\\u17B6\\u17BE-\\u17C5\\u17C7\\u17C8\\u1923-\\u1926\\u1929-\\u192B\\u1930\\u1931\\u1933-\\u1938\\u1A19\\u1A1A\\u1A55\\u1A57\\u1A61\\u1A63\\u1A64\\u1A6D-\\u1A72\\u1B04\\u1B35\\u1B3B\\u1B3D-\\u1B41\\u1B43\\u1B44\\u1B82\\u1BA1\\u1BA6\\u1BA7\\u1BAA\\u1BE7\\u1BEA-\\u1BEC\\u1BEE\\u1BF2\\u1BF3\\u1C24-\\u1C2B\\u1C34\\u1C35\\u1CE1\\u1CF2\\u1CF3\\u302E\\u302F\\uA823\\uA824\\uA827\\uA880\\uA881\\uA8B4-\\uA8C3\\uA952\\uA953\\uA983\\uA9B4\\uA9B5\\uA9BA\\uA9BB\\uA9BD-\\uA9C0\\uAA2F\\uAA30\\uAA33\\uAA34\\uAA4D\\uAA7B\\uAA7D\\uAAEB\\uAAEE\\uAAEF\\uAAF5\\uABE3\\uABE4\\uABE6\\uABE7\\uABE9\\uABEA\\uABEC',","            astral: '\\uD804[\\uDC00\\uDC02\\uDC82\\uDCB0-\\uDCB2\\uDCB7\\uDCB8\\uDD2C\\uDD82\\uDDB3-\\uDDB5\\uDDBF\\uDDC0\\uDE2C-\\uDE2E\\uDE32\\uDE33\\uDE35\\uDEE0-\\uDEE2\\uDF02\\uDF03\\uDF3E\\uDF3F\\uDF41-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF57\\uDF62\\uDF63]|\\uD805[\\uDC35-\\uDC37\\uDC40\\uDC41\\uDC45\\uDCB0-\\uDCB2\\uDCB9\\uDCBB-\\uDCBE\\uDCC1\\uDDAF-\\uDDB1\\uDDB8-\\uDDBB\\uDDBE\\uDE30-\\uDE32\\uDE3B\\uDE3C\\uDE3E\\uDEAC\\uDEAE\\uDEAF\\uDEB6\\uDF20\\uDF21\\uDF26]|\\uD807[\\uDC2F\\uDC3E\\uDCA9\\uDCB1\\uDCB4]|\\uD81B[\\uDF51-\\uDF7E]|\\uD834[\\uDD65\\uDD66\\uDD6D-\\uDD72]'","        },","        {","            name: 'Me',","            alias: 'Enclosing_Mark',","            bmp: '\\u0488\\u0489\\u1ABE\\u20DD-\\u20E0\\u20E2-\\u20E4\\uA670-\\uA672'","        },","        {","            name: 'Mn',","            alias: 'Nonspacing_Mark',","            bmp: '\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D4-\\u08E1\\u08E3-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C00\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D01\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u1885\\u1886\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A1B\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1AB0-\\u1ABD\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB-\\u1BAD\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DF5\\u1DFB-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099\\u309A\\uA66F\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA8C5\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uA9E5\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAA7C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F',","            astral: '\\uD800[\\uDDFD\\uDEE0\\uDF76-\\uDF7A]|\\uD802[\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F\\uDEE5\\uDEE6]|\\uD804[\\uDC01\\uDC38-\\uDC46\\uDC7F-\\uDC81\\uDCB3-\\uDCB6\\uDCB9\\uDCBA\\uDD00-\\uDD02\\uDD27-\\uDD2B\\uDD2D-\\uDD34\\uDD73\\uDD80\\uDD81\\uDDB6-\\uDDBE\\uDDCA-\\uDDCC\\uDE2F-\\uDE31\\uDE34\\uDE36\\uDE37\\uDE3E\\uDEDF\\uDEE3-\\uDEEA\\uDF00\\uDF01\\uDF3C\\uDF40\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC38-\\uDC3F\\uDC42-\\uDC44\\uDC46\\uDCB3-\\uDCB8\\uDCBA\\uDCBF\\uDCC0\\uDCC2\\uDCC3\\uDDB2-\\uDDB5\\uDDBC\\uDDBD\\uDDBF\\uDDC0\\uDDDC\\uDDDD\\uDE33-\\uDE3A\\uDE3D\\uDE3F\\uDE40\\uDEAB\\uDEAD\\uDEB0-\\uDEB5\\uDEB7\\uDF1D-\\uDF1F\\uDF22-\\uDF25\\uDF27-\\uDF2B]|\\uD807[\\uDC30-\\uDC36\\uDC38-\\uDC3D\\uDC3F\\uDC92-\\uDCA7\\uDCAA-\\uDCB0\\uDCB2\\uDCB3\\uDCB5\\uDCB6]|\\uD81A[\\uDEF0-\\uDEF4\\uDF30-\\uDF36]|\\uD81B[\\uDF8F-\\uDF92]|\\uD82F[\\uDC9D\\uDC9E]|\\uD834[\\uDD67-\\uDD69\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]|\\uD83A[\\uDCD0-\\uDCD6\\uDD44-\\uDD4A]|\\uDB40[\\uDD00-\\uDDEF]'","        },","        {","            name: 'N',","            alias: 'Number',","            bmp: '0-9\\xB2\\xB3\\xB9\\xBC-\\xBE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D58-\\u0D5E\\u0D66-\\u0D78\\u0DE6-\\u0DEF\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uA9F0-\\uA9F9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19',","            astral: '\\uD800[\\uDD07-\\uDD33\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDEE1-\\uDEFB\\uDF20-\\uDF23\\uDF41\\uDF4A\\uDFD1-\\uDFD5]|\\uD801[\\uDCA0-\\uDCA9]|\\uD802[\\uDC58-\\uDC5F\\uDC79-\\uDC7F\\uDCA7-\\uDCAF\\uDCFB-\\uDCFF\\uDD16-\\uDD1B\\uDDBC\\uDDBD\\uDDC0-\\uDDCF\\uDDD2-\\uDDFF\\uDE40-\\uDE47\\uDE7D\\uDE7E\\uDE9D-\\uDE9F\\uDEEB-\\uDEEF\\uDF58-\\uDF5F\\uDF78-\\uDF7F\\uDFA9-\\uDFAF]|\\uD803[\\uDCFA-\\uDCFF\\uDE60-\\uDE7E]|\\uD804[\\uDC52-\\uDC6F\\uDCF0-\\uDCF9\\uDD36-\\uDD3F\\uDDD0-\\uDDD9\\uDDE1-\\uDDF4\\uDEF0-\\uDEF9]|\\uD805[\\uDC50-\\uDC59\\uDCD0-\\uDCD9\\uDE50-\\uDE59\\uDEC0-\\uDEC9\\uDF30-\\uDF3B]|\\uD806[\\uDCE0-\\uDCF2]|\\uD807[\\uDC50-\\uDC6C]|\\uD809[\\uDC00-\\uDC6E]|\\uD81A[\\uDE60-\\uDE69\\uDF50-\\uDF59\\uDF5B-\\uDF61]|\\uD834[\\uDF60-\\uDF71]|\\uD835[\\uDFCE-\\uDFFF]|\\uD83A[\\uDCC7-\\uDCCF\\uDD50-\\uDD59]|\\uD83C[\\uDD00-\\uDD0C]'","        },","        {","            name: 'Nd',","            alias: 'Decimal_Number',","            bmp: '0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0DE6-\\u0DEF\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uA9F0-\\uA9F9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19',","            astral: '\\uD801[\\uDCA0-\\uDCA9]|\\uD804[\\uDC66-\\uDC6F\\uDCF0-\\uDCF9\\uDD36-\\uDD3F\\uDDD0-\\uDDD9\\uDEF0-\\uDEF9]|\\uD805[\\uDC50-\\uDC59\\uDCD0-\\uDCD9\\uDE50-\\uDE59\\uDEC0-\\uDEC9\\uDF30-\\uDF39]|\\uD806[\\uDCE0-\\uDCE9]|\\uD807[\\uDC50-\\uDC59]|\\uD81A[\\uDE60-\\uDE69\\uDF50-\\uDF59]|\\uD835[\\uDFCE-\\uDFFF]|\\uD83A[\\uDD50-\\uDD59]'","        },","        {","            name: 'Nl',","            alias: 'Letter_Number',","            bmp: '\\u16EE-\\u16F0\\u2160-\\u2182\\u2185-\\u2188\\u3007\\u3021-\\u3029\\u3038-\\u303A\\uA6E6-\\uA6EF',","            astral: '\\uD800[\\uDD40-\\uDD74\\uDF41\\uDF4A\\uDFD1-\\uDFD5]|\\uD809[\\uDC00-\\uDC6E]'","        },","        {","            name: 'No',","            alias: 'Other_Number',","            bmp: '\\xB2\\xB3\\xB9\\xBC-\\xBE\\u09F4-\\u09F9\\u0B72-\\u0B77\\u0BF0-\\u0BF2\\u0C78-\\u0C7E\\u0D58-\\u0D5E\\u0D70-\\u0D78\\u0F2A-\\u0F33\\u1369-\\u137C\\u17F0-\\u17F9\\u19DA\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u215F\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA830-\\uA835',","            astral: '\\uD800[\\uDD07-\\uDD33\\uDD75-\\uDD78\\uDD8A\\uDD8B\\uDEE1-\\uDEFB\\uDF20-\\uDF23]|\\uD802[\\uDC58-\\uDC5F\\uDC79-\\uDC7F\\uDCA7-\\uDCAF\\uDCFB-\\uDCFF\\uDD16-\\uDD1B\\uDDBC\\uDDBD\\uDDC0-\\uDDCF\\uDDD2-\\uDDFF\\uDE40-\\uDE47\\uDE7D\\uDE7E\\uDE9D-\\uDE9F\\uDEEB-\\uDEEF\\uDF58-\\uDF5F\\uDF78-\\uDF7F\\uDFA9-\\uDFAF]|\\uD803[\\uDCFA-\\uDCFF\\uDE60-\\uDE7E]|\\uD804[\\uDC52-\\uDC65\\uDDE1-\\uDDF4]|\\uD805[\\uDF3A\\uDF3B]|\\uD806[\\uDCEA-\\uDCF2]|\\uD807[\\uDC5A-\\uDC6C]|\\uD81A[\\uDF5B-\\uDF61]|\\uD834[\\uDF60-\\uDF71]|\\uD83A[\\uDCC7-\\uDCCF]|\\uD83C[\\uDD00-\\uDD0C]'","        },","        {","            name: 'P',","            alias: 'Punctuation',","            bmp: '\\x21-\\x23\\x25-\\\\x2A\\x2C-\\x2F\\x3A\\x3B\\\\x3F\\x40\\\\x5B-\\\\x5D\\x5F\\\\x7B\\x7D\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E44\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65',","            astral: '\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC9\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDC4B-\\uDC4F\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDF3C-\\uDF3E]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]|\\uD83A[\\uDD5E\\uDD5F]'","        },","        {","            name: 'Pc',","            alias: 'Connector_Punctuation',","            bmp: '\\x5F\\u203F\\u2040\\u2054\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF3F'","        },","        {","            name: 'Pd',","            alias: 'Dash_Punctuation',","            bmp: '\\\\x2D\\u058A\\u05BE\\u1400\\u1806\\u2010-\\u2015\\u2E17\\u2E1A\\u2E3A\\u2E3B\\u2E40\\u301C\\u3030\\u30A0\\uFE31\\uFE32\\uFE58\\uFE63\\uFF0D'","        },","        {","            name: 'Pe',","            alias: 'Close_Punctuation',","            bmp: '\\\\x29\\\\x5D\\x7D\\u0F3B\\u0F3D\\u169C\\u2046\\u207E\\u208E\\u2309\\u230B\\u232A\\u2769\\u276B\\u276D\\u276F\\u2771\\u2773\\u2775\\u27C6\\u27E7\\u27E9\\u27EB\\u27ED\\u27EF\\u2984\\u2986\\u2988\\u298A\\u298C\\u298E\\u2990\\u2992\\u2994\\u2996\\u2998\\u29D9\\u29DB\\u29FD\\u2E23\\u2E25\\u2E27\\u2E29\\u3009\\u300B\\u300D\\u300F\\u3011\\u3015\\u3017\\u3019\\u301B\\u301E\\u301F\\uFD3E\\uFE18\\uFE36\\uFE38\\uFE3A\\uFE3C\\uFE3E\\uFE40\\uFE42\\uFE44\\uFE48\\uFE5A\\uFE5C\\uFE5E\\uFF09\\uFF3D\\uFF5D\\uFF60\\uFF63'","        },","        {","            name: 'Pf',","            alias: 'Final_Punctuation',","            bmp: '\\xBB\\u2019\\u201D\\u203A\\u2E03\\u2E05\\u2E0A\\u2E0D\\u2E1D\\u2E21'","        },","        {","            name: 'Pi',","            alias: 'Initial_Punctuation',","            bmp: '\\xAB\\u2018\\u201B\\u201C\\u201F\\u2039\\u2E02\\u2E04\\u2E09\\u2E0C\\u2E1C\\u2E20'","        },","        {","            name: 'Po',","            alias: 'Other_Punctuation',","            bmp: '\\x21-\\x23\\x25-\\x27\\\\x2A\\x2C\\\\x2E\\x2F\\x3A\\x3B\\\\x3F\\x40\\\\x5C\\xA1\\xA7\\xB6\\xB7\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u166D\\u166E\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u1805\\u1807-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2016\\u2017\\u2020-\\u2027\\u2030-\\u2038\\u203B-\\u203E\\u2041-\\u2043\\u2047-\\u2051\\u2053\\u2055-\\u205E\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00\\u2E01\\u2E06-\\u2E08\\u2E0B\\u2E0E-\\u2E16\\u2E18\\u2E19\\u2E1B\\u2E1E\\u2E1F\\u2E2A-\\u2E2E\\u2E30-\\u2E39\\u2E3C-\\u2E3F\\u2E41\\u2E43\\u2E44\\u3001-\\u3003\\u303D\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFE10-\\uFE16\\uFE19\\uFE30\\uFE45\\uFE46\\uFE49-\\uFE4C\\uFE50-\\uFE52\\uFE54-\\uFE57\\uFE5F-\\uFE61\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF07\\uFF0A\\uFF0C\\uFF0E\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3C\\uFF61\\uFF64\\uFF65',","            astral: '\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC9\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDC4B-\\uDC4F\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDF3C-\\uDF3E]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]|\\uD83A[\\uDD5E\\uDD5F]'","        },","        {","            name: 'Ps',","            alias: 'Open_Punctuation',","            bmp: '\\\\x28\\\\x5B\\\\x7B\\u0F3A\\u0F3C\\u169B\\u201A\\u201E\\u2045\\u207D\\u208D\\u2308\\u230A\\u2329\\u2768\\u276A\\u276C\\u276E\\u2770\\u2772\\u2774\\u27C5\\u27E6\\u27E8\\u27EA\\u27EC\\u27EE\\u2983\\u2985\\u2987\\u2989\\u298B\\u298D\\u298F\\u2991\\u2993\\u2995\\u2997\\u29D8\\u29DA\\u29FC\\u2E22\\u2E24\\u2E26\\u2E28\\u2E42\\u3008\\u300A\\u300C\\u300E\\u3010\\u3014\\u3016\\u3018\\u301A\\u301D\\uFD3F\\uFE17\\uFE35\\uFE37\\uFE39\\uFE3B\\uFE3D\\uFE3F\\uFE41\\uFE43\\uFE47\\uFE59\\uFE5B\\uFE5D\\uFF08\\uFF3B\\uFF5B\\uFF5F\\uFF62'","        },","        {","            name: 'S',","            alias: 'Symbol',","            bmp: '\\\\x24\\\\x2B\\x3C-\\x3E\\\\x5E\\x60\\\\x7C\\x7E\\xA2-\\xA6\\xA8\\xA9\\xAC\\xAE-\\xB1\\xB4\\xB8\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u0384\\u0385\\u03F6\\u0482\\u058D-\\u058F\\u0606-\\u0608\\u060B\\u060E\\u060F\\u06DE\\u06E9\\u06FD\\u06FE\\u07F6\\u09F2\\u09F3\\u09FA\\u09FB\\u0AF1\\u0B70\\u0BF3-\\u0BFA\\u0C7F\\u0D4F\\u0D79\\u0E3F\\u0F01-\\u0F03\\u0F13\\u0F15-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE\\u0FCF\\u0FD5-\\u0FD8\\u109E\\u109F\\u1390-\\u1399\\u17DB\\u1940\\u19DE-\\u19FF\\u1B61-\\u1B6A\\u1B74-\\u1B7C\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u2044\\u2052\\u207A-\\u207C\\u208A-\\u208C\\u20A0-\\u20BE\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F\\u218A\\u218B\\u2190-\\u2307\\u230C-\\u2328\\u232B-\\u23FE\\u2400-\\u2426\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u2767\\u2794-\\u27C4\\u27C7-\\u27E5\\u27F0-\\u2982\\u2999-\\u29D7\\u29DC-\\u29FB\\u29FE-\\u2B73\\u2B76-\\u2B95\\u2B98-\\u2BB9\\u2BBD-\\u2BC8\\u2BCA-\\u2BD1\\u2BEC-\\u2BEF\\u2CE5-\\u2CEA\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFB\\u3004\\u3012\\u3013\\u3020\\u3036\\u3037\\u303E\\u303F\\u309B\\u309C\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E3\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u32FE\\u3300-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA828-\\uA82B\\uA836-\\uA839\\uAA77-\\uAA79\\uAB5B\\uFB29\\uFBB2-\\uFBC1\\uFDFC\\uFDFD\\uFE62\\uFE64-\\uFE66\\uFE69\\uFF04\\uFF0B\\uFF1C-\\uFF1E\\uFF3E\\uFF40\\uFF5C\\uFF5E\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFFC\\uFFFD',","            astral: '\\uD800[\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C-\\uDD8E\\uDD90-\\uDD9B\\uDDA0\\uDDD0-\\uDDFC]|\\uD802[\\uDC77\\uDC78\\uDEC8]|\\uD805\\uDF3F|\\uD81A[\\uDF3C-\\uDF3F\\uDF45]|\\uD82F\\uDC9C|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDE8\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]|\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85\\uDE86]|\\uD83B[\\uDEF0\\uDEF1]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD10-\\uDD2E\\uDD30-\\uDD6B\\uDD70-\\uDDAC\\uDDE6-\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDED2\\uDEE0-\\uDEEC\\uDEF0-\\uDEF6\\uDF00-\\uDF73\\uDF80-\\uDFD4]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDD10-\\uDD1E\\uDD20-\\uDD27\\uDD30\\uDD33-\\uDD3E\\uDD40-\\uDD4B\\uDD50-\\uDD5E\\uDD80-\\uDD91\\uDDC0]'","        },","        {","            name: 'Sc',","            alias: 'Currency_Symbol',","            bmp: '\\\\x24\\xA2-\\xA5\\u058F\\u060B\\u09F2\\u09F3\\u09FB\\u0AF1\\u0BF9\\u0E3F\\u17DB\\u20A0-\\u20BE\\uA838\\uFDFC\\uFE69\\uFF04\\uFFE0\\uFFE1\\uFFE5\\uFFE6'","        },","        {","            name: 'Sk',","            alias: 'Modifier_Symbol',","            bmp: '\\\\x5E\\x60\\xA8\\xAF\\xB4\\xB8\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u0384\\u0385\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u309B\\u309C\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uAB5B\\uFBB2-\\uFBC1\\uFF3E\\uFF40\\uFFE3',","            astral: '\\uD83C[\\uDFFB-\\uDFFF]'","        },","        {","            name: 'Sm',","            alias: 'Math_Symbol',","            bmp: '\\\\x2B\\x3C-\\x3E\\\\x7C\\x7E\\xAC\\xB1\\xD7\\xF7\\u03F6\\u0606-\\u0608\\u2044\\u2052\\u207A-\\u207C\\u208A-\\u208C\\u2118\\u2140-\\u2144\\u214B\\u2190-\\u2194\\u219A\\u219B\\u21A0\\u21A3\\u21A6\\u21AE\\u21CE\\u21CF\\u21D2\\u21D4\\u21F4-\\u22FF\\u2320\\u2321\\u237C\\u239B-\\u23B3\\u23DC-\\u23E1\\u25B7\\u25C1\\u25F8-\\u25FF\\u266F\\u27C0-\\u27C4\\u27C7-\\u27E5\\u27F0-\\u27FF\\u2900-\\u2982\\u2999-\\u29D7\\u29DC-\\u29FB\\u29FE-\\u2AFF\\u2B30-\\u2B44\\u2B47-\\u2B4C\\uFB29\\uFE62\\uFE64-\\uFE66\\uFF0B\\uFF1C-\\uFF1E\\uFF5C\\uFF5E\\uFFE2\\uFFE9-\\uFFEC',","            astral: '\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]|\\uD83B[\\uDEF0\\uDEF1]'","        },","        {","            name: 'So',","            alias: 'Other_Symbol',","            bmp: '\\xA6\\xA9\\xAE\\xB0\\u0482\\u058D\\u058E\\u060E\\u060F\\u06DE\\u06E9\\u06FD\\u06FE\\u07F6\\u09FA\\u0B70\\u0BF3-\\u0BF8\\u0BFA\\u0C7F\\u0D4F\\u0D79\\u0F01-\\u0F03\\u0F13\\u0F15-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE\\u0FCF\\u0FD5-\\u0FD8\\u109E\\u109F\\u1390-\\u1399\\u1940\\u19DE-\\u19FF\\u1B61-\\u1B6A\\u1B74-\\u1B7C\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116\\u2117\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u214A\\u214C\\u214D\\u214F\\u218A\\u218B\\u2195-\\u2199\\u219C-\\u219F\\u21A1\\u21A2\\u21A4\\u21A5\\u21A7-\\u21AD\\u21AF-\\u21CD\\u21D0\\u21D1\\u21D3\\u21D5-\\u21F3\\u2300-\\u2307\\u230C-\\u231F\\u2322-\\u2328\\u232B-\\u237B\\u237D-\\u239A\\u23B4-\\u23DB\\u23E2-\\u23FE\\u2400-\\u2426\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u25B6\\u25B8-\\u25C0\\u25C2-\\u25F7\\u2600-\\u266E\\u2670-\\u2767\\u2794-\\u27BF\\u2800-\\u28FF\\u2B00-\\u2B2F\\u2B45\\u2B46\\u2B4D-\\u2B73\\u2B76-\\u2B95\\u2B98-\\u2BB9\\u2BBD-\\u2BC8\\u2BCA-\\u2BD1\\u2BEC-\\u2BEF\\u2CE5-\\u2CEA\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFB\\u3004\\u3012\\u3013\\u3020\\u3036\\u3037\\u303E\\u303F\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E3\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u32FE\\u3300-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA828-\\uA82B\\uA836\\uA837\\uA839\\uAA77-\\uAA79\\uFDFD\\uFFE4\\uFFE8\\uFFED\\uFFEE\\uFFFC\\uFFFD',","            astral: '\\uD800[\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C-\\uDD8E\\uDD90-\\uDD9B\\uDDA0\\uDDD0-\\uDDFC]|\\uD802[\\uDC77\\uDC78\\uDEC8]|\\uD805\\uDF3F|\\uD81A[\\uDF3C-\\uDF3F\\uDF45]|\\uD82F\\uDC9C|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDE8\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85\\uDE86]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD10-\\uDD2E\\uDD30-\\uDD6B\\uDD70-\\uDDAC\\uDDE6-\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDF00-\\uDFFA]|\\uD83D[\\uDC00-\\uDED2\\uDEE0-\\uDEEC\\uDEF0-\\uDEF6\\uDF00-\\uDF73\\uDF80-\\uDFD4]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDD10-\\uDD1E\\uDD20-\\uDD27\\uDD30\\uDD33-\\uDD3E\\uDD40-\\uDD4B\\uDD50-\\uDD5E\\uDD80-\\uDD91\\uDDC0]'","        },","        {","            name: 'Z',","            alias: 'Separator',","            bmp: '\\x20\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000'","        },","        {","            name: 'Zl',","            alias: 'Line_Separator',","            bmp: '\\u2028'","        },","        {","            name: 'Zp',","            alias: 'Paragraph_Separator',","            bmp: '\\u2029'","        },","        {","            name: 'Zs',","            alias: 'Space_Separator',","            bmp: '\\x20\\xA0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000'","        }","    ]);","","};","","},{}],6:[function(require,module,exports){","/*!"," * XRegExp Unicode Properties 3.2.0"," * <xregexp.com>"," * Steven Levithan (c) 2012-2017 MIT License"," * Unicode data by Mathias Bynens <mathiasbynens.be>"," */","","module.exports = function(XRegExp) {","    'use strict';","","    /**","     * Adds properties to meet the UTS #18 Level 1 RL1.2 requirements for Unicode regex support. See","     * <http://unicode.org/reports/tr18/#RL1.2>. Following are definitions of these properties from","     * UAX #44 <http://unicode.org/reports/tr44/>:","     *","     * - Alphabetic","     *   Characters with the Alphabetic property. Generated from: Lowercase + Uppercase + Lt + Lm +","     *   Lo + Nl + Other_Alphabetic.","     *","     * - Default_Ignorable_Code_Point","     *   For programmatic determination of default ignorable code points. New characters that should","     *   be ignored in rendering (unless explicitly supported) will be assigned in these ranges,","     *   permitting programs to correctly handle the default rendering of such characters when not","     *   otherwise supported.","     *","     * - Lowercase","     *   Characters with the Lowercase property. Generated from: Ll + Other_Lowercase.","     *","     * - Noncharacter_Code_Point","     *   Code points permanently reserved for internal use.","     *","     * - Uppercase","     *   Characters with the Uppercase property. Generated from: Lu + Other_Uppercase.","     *","     * - White_Space","     *   Spaces, separator characters and other control characters which should be treated by","     *   programming languages as \"white space\" for the purpose of parsing elements.","     *","     * The properties ASCII, Any, and Assigned are also included but are not defined in UAX #44. UTS","     * #18 RL1.2 additionally requires support for Unicode scripts and general categories. These are","     * included in XRegExp's Unicode Categories and Unicode Scripts addons.","     *","     * Token names are case insensitive, and any spaces, hyphens, and underscores are ignored.","     *","     * Uses Unicode 9.0.0.","     *","     * @requires XRegExp, Unicode Base","     */","","    if (!XRegExp.addUnicodeData) {","        throw new ReferenceError('Unicode Base must be loaded before Unicode Properties');","    }","","    var unicodeData = [","        {","            name: 'ASCII',","            bmp: '\\0-\\x7F'","        },","        {","            name: 'Alphabetic',","            bmp: 'A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0345\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05B0-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0657\\u0659-\\u065F\\u066E-\\u06D3\\u06D5-\\u06DC\\u06E1-\\u06E8\\u06ED-\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710-\\u073F\\u074D-\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0817\\u081A-\\u082C\\u0840-\\u0858\\u08A0-\\u08B4\\u08B6-\\u08BD\\u08D4-\\u08DF\\u08E3-\\u08E9\\u08F0-\\u093B\\u093D-\\u094C\\u094E-\\u0950\\u0955-\\u0963\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD-\\u09C4\\u09C7\\u09C8\\u09CB\\u09CC\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09F0\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B\\u0A4C\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A70-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB\\u0ACC\\u0AD0\\u0AE0-\\u0AE3\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D-\\u0B44\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD0\\u0BD7\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4C\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCC\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D4E\\u0D54-\\u0D57\\u0D5F-\\u0D63\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E46\\u0E4D\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0ECD\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F81\\u0F88-\\u0F97\\u0F99-\\u0FBC\\u1000-\\u1036\\u1038\\u103B-\\u103F\\u1050-\\u1062\\u1065-\\u1068\\u106E-\\u1086\\u108E\\u109C\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135F\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1713\\u1720-\\u1733\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17B3\\u17B6-\\u17C8\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u1938\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A61-\\u1A74\\u1AA7\\u1B00-\\u1B33\\u1B35-\\u1B43\\u1B45-\\u1B4B\\u1B80-\\u1BA9\\u1BAC-\\u1BAF\\u1BBA-\\u1BE5\\u1BE7-\\u1BF1\\u1C00-\\u1C35\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1DE7-\\u1DF4\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u24B6-\\u24E9\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA674-\\uA67B\\uA67F-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA827\\uA840-\\uA873\\uA880-\\uA8C3\\uA8C5\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA92A\\uA930-\\uA952\\uA960-\\uA97C\\uA980-\\uA9B2\\uA9B4-\\uA9BF\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAABE\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF5\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC',","            astral: '\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC45\\uDC82-\\uDCB8\\uDCD0-\\uDCE8\\uDD00-\\uDD32\\uDD50-\\uDD72\\uDD76\\uDD80-\\uDDBF\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE34\\uDE37\\uDE3E\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEE8\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D-\\uDF44\\uDF47\\uDF48\\uDF4B\\uDF4C\\uDF50\\uDF57\\uDF5D-\\uDF63]|\\uD805[\\uDC00-\\uDC41\\uDC43-\\uDC45\\uDC47-\\uDC4A\\uDC80-\\uDCC1\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDB5\\uDDB8-\\uDDBE\\uDDD8-\\uDDDD\\uDE00-\\uDE3E\\uDE40\\uDE44\\uDE80-\\uDEB5\\uDF00-\\uDF19\\uDF1D-\\uDF2A]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC36\\uDC38-\\uDC3E\\uDC40\\uDC72-\\uDC8F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF93-\\uDF9F\\uDFE0]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9E]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43\\uDD47]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD83C[\\uDD30-\\uDD49\\uDD50-\\uDD69\\uDD70-\\uDD89]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]'","        },","        {","            name: 'Any',","            isBmpLast: true,","            bmp: '\\0-\\uFFFF',","            astral: '[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]'","        },","        {","            name: 'Default_Ignorable_Code_Point',","            bmp: '\\xAD\\u034F\\u061C\\u115F\\u1160\\u17B4\\u17B5\\u180B-\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u206F\\u3164\\uFE00-\\uFE0F\\uFEFF\\uFFA0\\uFFF0-\\uFFF8',","            astral: '\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDD73-\\uDD7A]|[\\uDB40-\\uDB43][\\uDC00-\\uDFFF]'","        },","        {","            name: 'Lowercase',","            bmp: 'a-z\\xAA\\xB5\\xBA\\xDF-\\xF6\\xF8-\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02B8\\u02C0\\u02C1\\u02E0-\\u02E4\\u0345\\u0371\\u0373\\u0377\\u037A-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0529\\u052B\\u052D\\u052F\\u0561-\\u0587\\u13F8-\\u13FD\\u1C80-\\u1C88\\u1D00-\\u1DBF\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6\\u1FC7\\u1FD0-\\u1FD3\\u1FD6\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6\\u1FF7\\u2071\\u207F\\u2090-\\u209C\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146-\\u2149\\u214E\\u2170-\\u217F\\u2184\\u24D0-\\u24E9\\u2C30-\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76-\\u2C7D\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2CEC\\u2CEE\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA699\\uA69B-\\uA69D\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA793-\\uA795\\uA797\\uA799\\uA79B\\uA79D\\uA79F\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7B5\\uA7B7\\uA7F8-\\uA7FA\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABBF\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A',","            astral: '\\uD801[\\uDC28-\\uDC4F\\uDCD8-\\uDCFB]|\\uD803[\\uDCC0-\\uDCF2]|\\uD806[\\uDCC0-\\uDCDF]|\\uD835[\\uDC1A-\\uDC33\\uDC4E-\\uDC54\\uDC56-\\uDC67\\uDC82-\\uDC9B\\uDCB6-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDCCF\\uDCEA-\\uDD03\\uDD1E-\\uDD37\\uDD52-\\uDD6B\\uDD86-\\uDD9F\\uDDBA-\\uDDD3\\uDDEE-\\uDE07\\uDE22-\\uDE3B\\uDE56-\\uDE6F\\uDE8A-\\uDEA5\\uDEC2-\\uDEDA\\uDEDC-\\uDEE1\\uDEFC-\\uDF14\\uDF16-\\uDF1B\\uDF36-\\uDF4E\\uDF50-\\uDF55\\uDF70-\\uDF88\\uDF8A-\\uDF8F\\uDFAA-\\uDFC2\\uDFC4-\\uDFC9\\uDFCB]|\\uD83A[\\uDD22-\\uDD43]'","        },","        {","            name: 'Noncharacter_Code_Point',","            bmp: '\\uFDD0-\\uFDEF\\uFFFE\\uFFFF',","            astral: '[\\uD83F\\uD87F\\uD8BF\\uD8FF\\uD93F\\uD97F\\uD9BF\\uD9FF\\uDA3F\\uDA7F\\uDABF\\uDAFF\\uDB3F\\uDB7F\\uDBBF\\uDBFF][\\uDFFE\\uDFFF]'","        },","        {","            name: 'Uppercase',","            bmp: 'A-Z\\xC0-\\xD6\\xD8-\\xDE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0528\\u052A\\u052C\\u052E\\u0531-\\u0556\\u10A0-\\u10C5\\u10C7\\u10CD\\u13A0-\\u13F5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E\\u213F\\u2145\\u2160-\\u216F\\u2183\\u24B6-\\u24CF\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\u2CF2\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA698\\uA69A\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA792\\uA796\\uA798\\uA79A\\uA79C\\uA79E\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uA7AA-\\uA7AE\\uA7B0-\\uA7B4\\uA7B6\\uFF21-\\uFF3A',","            astral: '\\uD801[\\uDC00-\\uDC27\\uDCB0-\\uDCD3]|\\uD803[\\uDC80-\\uDCB2]|\\uD806[\\uDCA0-\\uDCBF]|\\uD835[\\uDC00-\\uDC19\\uDC34-\\uDC4D\\uDC68-\\uDC81\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB5\\uDCD0-\\uDCE9\\uDD04\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD38\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD6C-\\uDD85\\uDDA0-\\uDDB9\\uDDD4-\\uDDED\\uDE08-\\uDE21\\uDE3C-\\uDE55\\uDE70-\\uDE89\\uDEA8-\\uDEC0\\uDEE2-\\uDEFA\\uDF1C-\\uDF34\\uDF56-\\uDF6E\\uDF90-\\uDFA8\\uDFCA]|\\uD83A[\\uDD00-\\uDD21]|\\uD83C[\\uDD30-\\uDD49\\uDD50-\\uDD69\\uDD70-\\uDD89]'","        },","        {","            name: 'White_Space',","            bmp: '\\x09-\\x0D\\x20\\x85\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000'","        }","    ];","","    // Add non-generated data","    unicodeData.push({","        name: 'Assigned',","        // Since this is defined as the inverse of Unicode category Cn (Unassigned), the Unicode","        // Categories addon is required to use this property","        inverseOf: 'Cn'","    });","","    XRegExp.addUnicodeData(unicodeData);","","};","","},{}],7:[function(require,module,exports){","/*!"," * XRegExp Unicode Scripts 3.2.0"," * <xregexp.com>"," * Steven Levithan (c) 2010-2017 MIT License"," * Unicode data by Mathias Bynens <mathiasbynens.be>"," */","","module.exports = function(XRegExp) {","    'use strict';","","    /**","     * Adds support for all Unicode scripts. E.g., `\\p{Latin}`. Token names are case insensitive,","     * and any spaces, hyphens, and underscores are ignored.","     *","     * Uses Unicode 9.0.0.","     *","     * @requires XRegExp, Unicode Base","     */","","    if (!XRegExp.addUnicodeData) {","        throw new ReferenceError('Unicode Base must be loaded before Unicode Scripts');","    }","","    XRegExp.addUnicodeData([","        {","            name: 'Adlam',","            astral: '\\uD83A[\\uDD00-\\uDD4A\\uDD50-\\uDD59\\uDD5E\\uDD5F]'","        },","        {","            name: 'Ahom',","            astral: '\\uD805[\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF3F]'","        },","        {","            name: 'Anatolian_Hieroglyphs',","            astral: '\\uD811[\\uDC00-\\uDE46]'","        },","        {","            name: 'Arabic',","            bmp: '\\u0600-\\u0604\\u0606-\\u060B\\u060D-\\u061A\\u061E\\u0620-\\u063F\\u0641-\\u064A\\u0656-\\u066F\\u0671-\\u06DC\\u06DE-\\u06FF\\u0750-\\u077F\\u08A0-\\u08B4\\u08B6-\\u08BD\\u08D4-\\u08E1\\u08E3-\\u08FF\\uFB50-\\uFBC1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFD\\uFE70-\\uFE74\\uFE76-\\uFEFC',","            astral: '\\uD803[\\uDE60-\\uDE7E]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB\\uDEF0\\uDEF1]'","        },","        {","            name: 'Armenian',","            bmp: '\\u0531-\\u0556\\u0559-\\u055F\\u0561-\\u0587\\u058A\\u058D-\\u058F\\uFB13-\\uFB17'","        },","        {","            name: 'Avestan',","            astral: '\\uD802[\\uDF00-\\uDF35\\uDF39-\\uDF3F]'","        },","        {","            name: 'Balinese',","            bmp: '\\u1B00-\\u1B4B\\u1B50-\\u1B7C'","        },","        {","            name: 'Bamum',","            bmp: '\\uA6A0-\\uA6F7',","            astral: '\\uD81A[\\uDC00-\\uDE38]'","        },","        {","            name: 'Bassa_Vah',","            astral: '\\uD81A[\\uDED0-\\uDEED\\uDEF0-\\uDEF5]'","        },","        {","            name: 'Batak',","            bmp: '\\u1BC0-\\u1BF3\\u1BFC-\\u1BFF'","        },","        {","            name: 'Bengali',","            bmp: '\\u0980-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09FB'","        },","        {","            name: 'Bhaiksuki',","            astral: '\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC36\\uDC38-\\uDC45\\uDC50-\\uDC6C]'","        },","        {","            name: 'Bopomofo',","            bmp: '\\u02EA\\u02EB\\u3105-\\u312D\\u31A0-\\u31BA'","        },","        {","            name: 'Brahmi',","            astral: '\\uD804[\\uDC00-\\uDC4D\\uDC52-\\uDC6F\\uDC7F]'","        },","        {","            name: 'Braille',","            bmp: '\\u2800-\\u28FF'","        },","        {","            name: 'Buginese',","            bmp: '\\u1A00-\\u1A1B\\u1A1E\\u1A1F'","        },","        {","            name: 'Buhid',","            bmp: '\\u1740-\\u1753'","        },","        {","            name: 'Canadian_Aboriginal',","            bmp: '\\u1400-\\u167F\\u18B0-\\u18F5'","        },","        {","            name: 'Carian',","            astral: '\\uD800[\\uDEA0-\\uDED0]'","        },","        {","            name: 'Caucasian_Albanian',","            astral: '\\uD801[\\uDD30-\\uDD63\\uDD6F]'","        },","        {","            name: 'Chakma',","            astral: '\\uD804[\\uDD00-\\uDD34\\uDD36-\\uDD43]'","        },","        {","            name: 'Cham',","            bmp: '\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA5C-\\uAA5F'","        },","        {","            name: 'Cherokee',","            bmp: '\\u13A0-\\u13F5\\u13F8-\\u13FD\\uAB70-\\uABBF'","        },","        {","            name: 'Common',","            bmp: '\\0-\\x40\\\\x5B-\\x60\\\\x7B-\\xA9\\xAB-\\xB9\\xBB-\\xBF\\xD7\\xF7\\u02B9-\\u02DF\\u02E5-\\u02E9\\u02EC-\\u02FF\\u0374\\u037E\\u0385\\u0387\\u0589\\u0605\\u060C\\u061B\\u061C\\u061F\\u0640\\u06DD\\u08E2\\u0964\\u0965\\u0E3F\\u0FD5-\\u0FD8\\u10FB\\u16EB-\\u16ED\\u1735\\u1736\\u1802\\u1803\\u1805\\u1CD3\\u1CE1\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u2000-\\u200B\\u200E-\\u2064\\u2066-\\u2070\\u2074-\\u207E\\u2080-\\u208E\\u20A0-\\u20BE\\u2100-\\u2125\\u2127-\\u2129\\u212C-\\u2131\\u2133-\\u214D\\u214F-\\u215F\\u2189-\\u218B\\u2190-\\u23FE\\u2400-\\u2426\\u2440-\\u244A\\u2460-\\u27FF\\u2900-\\u2B73\\u2B76-\\u2B95\\u2B98-\\u2BB9\\u2BBD-\\u2BC8\\u2BCA-\\u2BD1\\u2BEC-\\u2BEF\\u2E00-\\u2E44\\u2FF0-\\u2FFB\\u3000-\\u3004\\u3006\\u3008-\\u3020\\u3030-\\u3037\\u303C-\\u303F\\u309B\\u309C\\u30A0\\u30FB\\u30FC\\u3190-\\u319F\\u31C0-\\u31E3\\u3220-\\u325F\\u327F-\\u32CF\\u3358-\\u33FF\\u4DC0-\\u4DFF\\uA700-\\uA721\\uA788-\\uA78A\\uA830-\\uA839\\uA92E\\uA9CF\\uAB5B\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE66\\uFE68-\\uFE6B\\uFEFF\\uFF01-\\uFF20\\uFF3B-\\uFF40\\uFF5B-\\uFF65\\uFF70\\uFF9E\\uFF9F\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFF9-\\uFFFD',","            astral: '\\uD800[\\uDD00-\\uDD02\\uDD07-\\uDD33\\uDD37-\\uDD3F\\uDD90-\\uDD9B\\uDDD0-\\uDDFC\\uDEE1-\\uDEFB]|\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD66\\uDD6A-\\uDD7A\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDE8\\uDF00-\\uDF56\\uDF60-\\uDF71]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDFCB\\uDFCE-\\uDFFF]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD00-\\uDD0C\\uDD10-\\uDD2E\\uDD30-\\uDD6B\\uDD70-\\uDDAC\\uDDE6-\\uDDFF\\uDE01\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDED2\\uDEE0-\\uDEEC\\uDEF0-\\uDEF6\\uDF00-\\uDF73\\uDF80-\\uDFD4]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDD10-\\uDD1E\\uDD20-\\uDD27\\uDD30\\uDD33-\\uDD3E\\uDD40-\\uDD4B\\uDD50-\\uDD5E\\uDD80-\\uDD91\\uDDC0]|\\uDB40[\\uDC01\\uDC20-\\uDC7F]'","        },","        {","            name: 'Coptic',","            bmp: '\\u03E2-\\u03EF\\u2C80-\\u2CF3\\u2CF9-\\u2CFF'","        },","        {","            name: 'Cuneiform',","            astral: '\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC70-\\uDC74\\uDC80-\\uDD43]'","        },","        {","            name: 'Cypriot',","            astral: '\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F]'","        },","        {","            name: 'Cyrillic',","            bmp: '\\u0400-\\u0484\\u0487-\\u052F\\u1C80-\\u1C88\\u1D2B\\u1D78\\u2DE0-\\u2DFF\\uA640-\\uA69F\\uFE2E\\uFE2F'","        },","        {","            name: 'Deseret',","            astral: '\\uD801[\\uDC00-\\uDC4F]'","        },","        {","            name: 'Devanagari',","            bmp: '\\u0900-\\u0950\\u0953-\\u0963\\u0966-\\u097F\\uA8E0-\\uA8FD'","        },","        {","            name: 'Duployan',","            astral: '\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9C-\\uDC9F]'","        },","        {","            name: 'Egyptian_Hieroglyphs',","            astral: '\\uD80C[\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]'","        },","        {","            name: 'Elbasan',","            astral: '\\uD801[\\uDD00-\\uDD27]'","        },","        {","            name: 'Ethiopic',","            bmp: '\\u1200-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u137C\\u1380-\\u1399\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E'","        },","        {","            name: 'Georgian',","            bmp: '\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u10FF\\u2D00-\\u2D25\\u2D27\\u2D2D'","        },","        {","            name: 'Glagolitic',","            bmp: '\\u2C00-\\u2C2E\\u2C30-\\u2C5E',","            astral: '\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]'","        },","        {","            name: 'Gothic',","            astral: '\\uD800[\\uDF30-\\uDF4A]'","        },","        {","            name: 'Grantha',","            astral: '\\uD804[\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]'","        },","        {","            name: 'Greek',","            bmp: '\\u0370-\\u0373\\u0375-\\u0377\\u037A-\\u037D\\u037F\\u0384\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03E1\\u03F0-\\u03FF\\u1D26-\\u1D2A\\u1D5D-\\u1D61\\u1D66-\\u1D6A\\u1DBF\\u1F00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FC4\\u1FC6-\\u1FD3\\u1FD6-\\u1FDB\\u1FDD-\\u1FEF\\u1FF2-\\u1FF4\\u1FF6-\\u1FFE\\u2126\\uAB65',","            astral: '\\uD800[\\uDD40-\\uDD8E\\uDDA0]|\\uD834[\\uDE00-\\uDE45]'","        },","        {","            name: 'Gujarati',","            bmp: '\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AF1\\u0AF9'","        },","        {","            name: 'Gurmukhi',","            bmp: '\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75'","        },","        {","            name: 'Han',","            bmp: '\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u3005\\u3007\\u3021-\\u3029\\u3038-\\u303B\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uF900-\\uFA6D\\uFA70-\\uFAD9',","            astral: '[\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]'","        },","        {","            name: 'Hangul',","            bmp: '\\u1100-\\u11FF\\u302E\\u302F\\u3131-\\u318E\\u3200-\\u321E\\u3260-\\u327E\\uA960-\\uA97C\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uFFA0-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC'","        },","        {","            name: 'Hanunoo',","            bmp: '\\u1720-\\u1734'","        },","        {","            name: 'Hatran',","            astral: '\\uD802[\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDCFB-\\uDCFF]'","        },","        {","            name: 'Hebrew',","            bmp: '\\u0591-\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F4\\uFB1D-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFB4F'","        },","        {","            name: 'Hiragana',","            bmp: '\\u3041-\\u3096\\u309D-\\u309F',","            astral: '\\uD82C\\uDC01|\\uD83C\\uDE00'","        },","        {","            name: 'Imperial_Aramaic',","            astral: '\\uD802[\\uDC40-\\uDC55\\uDC57-\\uDC5F]'","        },","        {","            name: 'Inherited',","            bmp: '\\u0300-\\u036F\\u0485\\u0486\\u064B-\\u0655\\u0670\\u0951\\u0952\\u1AB0-\\u1ABE\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DF5\\u1DFB-\\u1DFF\\u200C\\u200D\\u20D0-\\u20F0\\u302A-\\u302D\\u3099\\u309A\\uFE00-\\uFE0F\\uFE20-\\uFE2D',","            astral: '\\uD800[\\uDDFD\\uDEE0]|\\uD834[\\uDD67-\\uDD69\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD]|\\uDB40[\\uDD00-\\uDDEF]'","        },","        {","            name: 'Inscriptional_Pahlavi',","            astral: '\\uD802[\\uDF60-\\uDF72\\uDF78-\\uDF7F]'","        },","        {","            name: 'Inscriptional_Parthian',","            astral: '\\uD802[\\uDF40-\\uDF55\\uDF58-\\uDF5F]'","        },","        {","            name: 'Javanese',","            bmp: '\\uA980-\\uA9CD\\uA9D0-\\uA9D9\\uA9DE\\uA9DF'","        },","        {","            name: 'Kaithi',","            astral: '\\uD804[\\uDC80-\\uDCC1]'","        },","        {","            name: 'Kannada',","            bmp: '\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2'","        },","        {","            name: 'Katakana',","            bmp: '\\u30A1-\\u30FA\\u30FD-\\u30FF\\u31F0-\\u31FF\\u32D0-\\u32FE\\u3300-\\u3357\\uFF66-\\uFF6F\\uFF71-\\uFF9D',","            astral: '\\uD82C\\uDC00'","        },","        {","            name: 'Kayah_Li',","            bmp: '\\uA900-\\uA92D\\uA92F'","        },","        {","            name: 'Kharoshthi',","            astral: '\\uD802[\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F-\\uDE47\\uDE50-\\uDE58]'","        },","        {","            name: 'Khmer',","            bmp: '\\u1780-\\u17DD\\u17E0-\\u17E9\\u17F0-\\u17F9\\u19E0-\\u19FF'","        },","        {","            name: 'Khojki',","            astral: '\\uD804[\\uDE00-\\uDE11\\uDE13-\\uDE3E]'","        },","        {","            name: 'Khudawadi',","            astral: '\\uD804[\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9]'","        },","        {","            name: 'Lao',","            bmp: '\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF'","        },","        {","            name: 'Latin',","            bmp: 'A-Za-z\\xAA\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02B8\\u02E0-\\u02E4\\u1D00-\\u1D25\\u1D2C-\\u1D5C\\u1D62-\\u1D65\\u1D6B-\\u1D77\\u1D79-\\u1DBE\\u1E00-\\u1EFF\\u2071\\u207F\\u2090-\\u209C\\u212A\\u212B\\u2132\\u214E\\u2160-\\u2188\\u2C60-\\u2C7F\\uA722-\\uA787\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA7FF\\uAB30-\\uAB5A\\uAB5C-\\uAB64\\uFB00-\\uFB06\\uFF21-\\uFF3A\\uFF41-\\uFF5A'","        },","        {","            name: 'Lepcha',","            bmp: '\\u1C00-\\u1C37\\u1C3B-\\u1C49\\u1C4D-\\u1C4F'","        },","        {","            name: 'Limbu',","            bmp: '\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1940\\u1944-\\u194F'","        },","        {","            name: 'Linear_A',","            astral: '\\uD801[\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]'","        },","        {","            name: 'Linear_B',","            astral: '\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA]'","        },","        {","            name: 'Lisu',","            bmp: '\\uA4D0-\\uA4FF'","        },","        {","            name: 'Lycian',","            astral: '\\uD800[\\uDE80-\\uDE9C]'","        },","        {","            name: 'Lydian',","            astral: '\\uD802[\\uDD20-\\uDD39\\uDD3F]'","        },","        {","            name: 'Mahajani',","            astral: '\\uD804[\\uDD50-\\uDD76]'","        },","        {","            name: 'Malayalam',","            bmp: '\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4F\\u0D54-\\u0D63\\u0D66-\\u0D7F'","        },","        {","            name: 'Mandaic',","            bmp: '\\u0840-\\u085B\\u085E'","        },","        {","            name: 'Manichaean',","            astral: '\\uD802[\\uDEC0-\\uDEE6\\uDEEB-\\uDEF6]'","        },","        {","            name: 'Marchen',","            astral: '\\uD807[\\uDC70-\\uDC8F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6]'","        },","        {","            name: 'Meetei_Mayek',","            bmp: '\\uAAE0-\\uAAF6\\uABC0-\\uABED\\uABF0-\\uABF9'","        },","        {","            name: 'Mende_Kikakui',","            astral: '\\uD83A[\\uDC00-\\uDCC4\\uDCC7-\\uDCD6]'","        },","        {","            name: 'Meroitic_Cursive',","            astral: '\\uD802[\\uDDA0-\\uDDB7\\uDDBC-\\uDDCF\\uDDD2-\\uDDFF]'","        },","        {","            name: 'Meroitic_Hieroglyphs',","            astral: '\\uD802[\\uDD80-\\uDD9F]'","        },","        {","            name: 'Miao',","            astral: '\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]'","        },","        {","            name: 'Modi',","            astral: '\\uD805[\\uDE00-\\uDE44\\uDE50-\\uDE59]'","        },","        {","            name: 'Mongolian',","            bmp: '\\u1800\\u1801\\u1804\\u1806-\\u180E\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA',","            astral: '\\uD805[\\uDE60-\\uDE6C]'","        },","        {","            name: 'Mro',","            astral: '\\uD81A[\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDE6E\\uDE6F]'","        },","        {","            name: 'Multani',","            astral: '\\uD804[\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA9]'","        },","        {","            name: 'Myanmar',","            bmp: '\\u1000-\\u109F\\uA9E0-\\uA9FE\\uAA60-\\uAA7F'","        },","        {","            name: 'Nabataean',","            astral: '\\uD802[\\uDC80-\\uDC9E\\uDCA7-\\uDCAF]'","        },","        {","            name: 'New_Tai_Lue',","            bmp: '\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u19DE\\u19DF'","        },","        {","            name: 'Newa',","            astral: '\\uD805[\\uDC00-\\uDC59\\uDC5B\\uDC5D]'","        },","        {","            name: 'Nko',","            bmp: '\\u07C0-\\u07FA'","        },","        {","            name: 'Ogham',","            bmp: '\\u1680-\\u169C'","        },","        {","            name: 'Ol_Chiki',","            bmp: '\\u1C50-\\u1C7F'","        },","        {","            name: 'Old_Hungarian',","            astral: '\\uD803[\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDCFA-\\uDCFF]'","        },","        {","            name: 'Old_Italic',","            astral: '\\uD800[\\uDF00-\\uDF23]'","        },","        {","            name: 'Old_North_Arabian',","            astral: '\\uD802[\\uDE80-\\uDE9F]'","        },","        {","            name: 'Old_Permic',","            astral: '\\uD800[\\uDF50-\\uDF7A]'","        },","        {","            name: 'Old_Persian',","            astral: '\\uD800[\\uDFA0-\\uDFC3\\uDFC8-\\uDFD5]'","        },","        {","            name: 'Old_South_Arabian',","            astral: '\\uD802[\\uDE60-\\uDE7F]'","        },","        {","            name: 'Old_Turkic',","            astral: '\\uD803[\\uDC00-\\uDC48]'","        },","        {","            name: 'Oriya',","            bmp: '\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B77'","        },","        {","            name: 'Osage',","            astral: '\\uD801[\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB]'","        },","        {","            name: 'Osmanya',","            astral: '\\uD801[\\uDC80-\\uDC9D\\uDCA0-\\uDCA9]'","        },","        {","            name: 'Pahawh_Hmong',","            astral: '\\uD81A[\\uDF00-\\uDF45\\uDF50-\\uDF59\\uDF5B-\\uDF61\\uDF63-\\uDF77\\uDF7D-\\uDF8F]'","        },","        {","            name: 'Palmyrene',","            astral: '\\uD802[\\uDC60-\\uDC7F]'","        },","        {","            name: 'Pau_Cin_Hau',","            astral: '\\uD806[\\uDEC0-\\uDEF8]'","        },","        {","            name: 'Phags_Pa',","            bmp: '\\uA840-\\uA877'","        },","        {","            name: 'Phoenician',","            astral: '\\uD802[\\uDD00-\\uDD1B\\uDD1F]'","        },","        {","            name: 'Psalter_Pahlavi',","            astral: '\\uD802[\\uDF80-\\uDF91\\uDF99-\\uDF9C\\uDFA9-\\uDFAF]'","        },","        {","            name: 'Rejang',","            bmp: '\\uA930-\\uA953\\uA95F'","        },","        {","            name: 'Runic',","            bmp: '\\u16A0-\\u16EA\\u16EE-\\u16F8'","        },","        {","            name: 'Samaritan',","            bmp: '\\u0800-\\u082D\\u0830-\\u083E'","        },","        {","            name: 'Saurashtra',","            bmp: '\\uA880-\\uA8C5\\uA8CE-\\uA8D9'","        },","        {","            name: 'Sharada',","            astral: '\\uD804[\\uDD80-\\uDDCD\\uDDD0-\\uDDDF]'","        },","        {","            name: 'Shavian',","            astral: '\\uD801[\\uDC50-\\uDC7F]'","        },","        {","            name: 'Siddham',","            astral: '\\uD805[\\uDD80-\\uDDB5\\uDDB8-\\uDDDD]'","        },","        {","            name: 'SignWriting',","            astral: '\\uD836[\\uDC00-\\uDE8B\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]'","        },","        {","            name: 'Sinhala',","            bmp: '\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2-\\u0DF4',","            astral: '\\uD804[\\uDDE1-\\uDDF4]'","        },","        {","            name: 'Sora_Sompeng',","            astral: '\\uD804[\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9]'","        },","        {","            name: 'Sundanese',","            bmp: '\\u1B80-\\u1BBF\\u1CC0-\\u1CC7'","        },","        {","            name: 'Syloti_Nagri',","            bmp: '\\uA800-\\uA82B'","        },","        {","            name: 'Syriac',","            bmp: '\\u0700-\\u070D\\u070F-\\u074A\\u074D-\\u074F'","        },","        {","            name: 'Tagalog',","            bmp: '\\u1700-\\u170C\\u170E-\\u1714'","        },","        {","            name: 'Tagbanwa',","            bmp: '\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773'","        },","        {","            name: 'Tai_Le',","            bmp: '\\u1950-\\u196D\\u1970-\\u1974'","        },","        {","            name: 'Tai_Tham',","            bmp: '\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA0-\\u1AAD'","        },","        {","            name: 'Tai_Viet',","            bmp: '\\uAA80-\\uAAC2\\uAADB-\\uAADF'","        },","        {","            name: 'Takri',","            astral: '\\uD805[\\uDE80-\\uDEB7\\uDEC0-\\uDEC9]'","        },","        {","            name: 'Tamil',","            bmp: '\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BFA'","        },","        {","            name: 'Tangut',","            astral: '\\uD81B\\uDFE0|[\\uD81C-\\uD820][\\uDC00-\\uDFFF]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]'","        },","        {","            name: 'Telugu',","            bmp: '\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C78-\\u0C7F'","        },","        {","            name: 'Thaana',","            bmp: '\\u0780-\\u07B1'","        },","        {","            name: 'Thai',","            bmp: '\\u0E01-\\u0E3A\\u0E40-\\u0E5B'","        },","        {","            name: 'Tibetan',","            bmp: '\\u0F00-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F97\\u0F99-\\u0FBC\\u0FBE-\\u0FCC\\u0FCE-\\u0FD4\\u0FD9\\u0FDA'","        },","        {","            name: 'Tifinagh',","            bmp: '\\u2D30-\\u2D67\\u2D6F\\u2D70\\u2D7F'","        },","        {","            name: 'Tirhuta',","            astral: '\\uD805[\\uDC80-\\uDCC7\\uDCD0-\\uDCD9]'","        },","        {","            name: 'Ugaritic',","            astral: '\\uD800[\\uDF80-\\uDF9D\\uDF9F]'","        },","        {","            name: 'Vai',","            bmp: '\\uA500-\\uA62B'","        },","        {","            name: 'Warang_Citi',","            astral: '\\uD806[\\uDCA0-\\uDCF2\\uDCFF]'","        },","        {","            name: 'Yi',","            bmp: '\\uA000-\\uA48C\\uA490-\\uA4C6'","        }","    ]);","","};","","},{}],8:[function(require,module,exports){","var XRegExp = require('./xregexp');","","require('./addons/build')(XRegExp);","require('./addons/matchrecursive')(XRegExp);","require('./addons/unicode-base')(XRegExp);","require('./addons/unicode-blocks')(XRegExp);","require('./addons/unicode-categories')(XRegExp);","require('./addons/unicode-properties')(XRegExp);","require('./addons/unicode-scripts')(XRegExp);","","module.exports = XRegExp;","","},{\"./addons/build\":1,\"./addons/matchrecursive\":2,\"./addons/unicode-base\":3,\"./addons/unicode-blocks\":4,\"./addons/unicode-categories\":5,\"./addons/unicode-properties\":6,\"./addons/unicode-scripts\":7,\"./xregexp\":9}],9:[function(require,module,exports){","/*!"," * XRegExp 3.2.0"," * <xregexp.com>"," * Steven Levithan (c) 2007-2017 MIT License"," */","","'use strict';","","/**"," * XRegExp provides augmented, extensible regular expressions. You get additional regex syntax and"," * flags, beyond what browsers support natively. XRegExp is also a regex utility belt with tools to"," * make your client-side grepping simpler and more powerful, while freeing you from related"," * cross-browser inconsistencies."," */","","// ==--------------------------==","// Private stuff","// ==--------------------------==","","// Property name used for extended regex instance data","var REGEX_DATA = 'xregexp';","// Optional features that can be installed and uninstalled","var features = {","    astral: false,","    natives: false","};","// Native methods to use and restore ('native' is an ES3 reserved keyword)","var nativ = {","    exec: RegExp.prototype.exec,","    test: RegExp.prototype.test,","    match: String.prototype.match,","    replace: String.prototype.replace,","    split: String.prototype.split","};","// Storage for fixed/extended native methods","var fixed = {};","// Storage for regexes cached by `XRegExp.cache`","var regexCache = {};","// Storage for pattern details cached by the `XRegExp` constructor","var patternCache = {};","// Storage for regex syntax tokens added internally or by `XRegExp.addToken`","var tokens = [];","// Token scopes","var defaultScope = 'default';","var classScope = 'class';","// Regexes that match native regex syntax, including octals","var nativeTokens = {","    // Any native multicharacter token in default scope, or any single character","    'default': /\\\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9]\\d*|x[\\dA-Fa-f]{2}|u(?:[\\dA-Fa-f]{4}|{[\\dA-Fa-f]+})|c[A-Za-z]|[\\s\\S])|\\(\\?(?:[:=!]|<[=!])|[?*+]\\?|{\\d+(?:,\\d*)?}\\??|[\\s\\S]/,","    // Any native multicharacter token in character class scope, or any single character","    'class': /\\\\(?:[0-3][0-7]{0,2}|[4-7][0-7]?|x[\\dA-Fa-f]{2}|u(?:[\\dA-Fa-f]{4}|{[\\dA-Fa-f]+})|c[A-Za-z]|[\\s\\S])|[\\s\\S]/","};","// Any backreference or dollar-prefixed character in replacement strings","var replacementToken = /\\$(?:{([\\w$]+)}|(\\d\\d?|[\\s\\S]))/g;","// Check for correct `exec` handling of nonparticipating capturing groups","var correctExecNpcg = nativ.exec.call(/()??/, '')[1] === undefined;","// Check for ES6 `flags` prop support","var hasFlagsProp = /x/.flags !== undefined;","// Shortcut to `Object.prototype.toString`","var toString = {}.toString;","","function hasNativeFlag(flag) {","    // Can't check based on the presence of properties/getters since browsers might support such","    // properties even when they don't support the corresponding flag in regex construction (tested","    // in Chrome 48, where `'unicode' in /x/` is true but trying to construct a regex with flag `u`","    // throws an error)","    var isSupported = true;","    try {","        // Can't use regex literals for testing even in a `try` because regex literals with","        // unsupported flags cause a compilation error in IE","        new RegExp('', flag);","    } catch (exception) {","        isSupported = false;","    }","    return isSupported;","}","// Check for ES6 `u` flag support","var hasNativeU = hasNativeFlag('u');","// Check for ES6 `y` flag support","var hasNativeY = hasNativeFlag('y');","// Tracker for known flags, including addon flags","var registeredFlags = {","    g: true,","    i: true,","    m: true,","    u: hasNativeU,","    y: hasNativeY","};","","/**"," * Attaches extended data and `XRegExp.prototype` properties to a regex object."," *"," * @private"," * @param {RegExp} regex Regex to augment."," * @param {Array} captureNames Array with capture names, or `null`."," * @param {String} xSource XRegExp pattern used to generate `regex`, or `null` if N/A."," * @param {String} xFlags XRegExp flags used to generate `regex`, or `null` if N/A."," * @param {Boolean} [isInternalOnly=false] Whether the regex will be used only for internal"," *   operations, and never exposed to users. For internal-only regexes, we can improve perf by"," *   skipping some operations like attaching `XRegExp.prototype` properties."," * @returns {RegExp} Augmented regex."," */","function augment(regex, captureNames, xSource, xFlags, isInternalOnly) {","    var p;","","    regex[REGEX_DATA] = {","        captureNames: captureNames","    };","","    if (isInternalOnly) {","        return regex;","    }","","    // Can't auto-inherit these since the XRegExp constructor returns a nonprimitive value","    if (regex.__proto__) {","        regex.__proto__ = XRegExp.prototype;","    } else {","        for (p in XRegExp.prototype) {","            // An `XRegExp.prototype.hasOwnProperty(p)` check wouldn't be worth it here, since this","            // is performance sensitive, and enumerable `Object.prototype` or `RegExp.prototype`","            // extensions exist on `regex.prototype` anyway","            regex[p] = XRegExp.prototype[p];","        }","    }","","    regex[REGEX_DATA].source = xSource;","    // Emulate the ES6 `flags` prop by ensuring flags are in alphabetical order","    regex[REGEX_DATA].flags = xFlags ? xFlags.split('').sort().join('') : xFlags;","","    return regex;","}","","/**"," * Removes any duplicate characters from the provided string."," *"," * @private"," * @param {String} str String to remove duplicate characters from."," * @returns {String} String with any duplicate characters removed."," */","function clipDuplicates(str) {","    return nativ.replace.call(str, /([\\s\\S])(?=[\\s\\S]*\\1)/g, '');","}","","/**"," * Copies a regex object while preserving extended data and augmenting with `XRegExp.prototype`"," * properties. The copy has a fresh `lastIndex` property (set to zero). Allows adding and removing"," * flags g and y while copying the regex."," *"," * @private"," * @param {RegExp} regex Regex to copy."," * @param {Object} [options] Options object with optional properties:"," *   - `addG` {Boolean} Add flag g while copying the regex."," *   - `addY` {Boolean} Add flag y while copying the regex."," *   - `removeG` {Boolean} Remove flag g while copying the regex."," *   - `removeY` {Boolean} Remove flag y while copying the regex."," *   - `isInternalOnly` {Boolean} Whether the copied regex will be used only for internal"," *     operations, and never exposed to users. For internal-only regexes, we can improve perf by"," *     skipping some operations like attaching `XRegExp.prototype` properties."," *   - `source` {String} Overrides `<regex>.source`, for special cases."," * @returns {RegExp} Copy of the provided regex, possibly with modified flags."," */","function copyRegex(regex, options) {","    if (!XRegExp.isRegExp(regex)) {","        throw new TypeError('Type RegExp expected');","    }","","    var xData = regex[REGEX_DATA] || {};","    var flags = getNativeFlags(regex);","    var flagsToAdd = '';","    var flagsToRemove = '';","    var xregexpSource = null;","    var xregexpFlags = null;","","    options = options || {};","","    if (options.removeG) {flagsToRemove += 'g';}","    if (options.removeY) {flagsToRemove += 'y';}","    if (flagsToRemove) {","        flags = nativ.replace.call(flags, new RegExp('[' + flagsToRemove + ']+', 'g'), '');","    }","","    if (options.addG) {flagsToAdd += 'g';}","    if (options.addY) {flagsToAdd += 'y';}","    if (flagsToAdd) {","        flags = clipDuplicates(flags + flagsToAdd);","    }","","    if (!options.isInternalOnly) {","        if (xData.source !== undefined) {","            xregexpSource = xData.source;","        }","        // null or undefined; don't want to add to `flags` if the previous value was null, since","        // that indicates we're not tracking original precompilation flags","        if (xData.flags != null) {","            // Flags are only added for non-internal regexes by `XRegExp.globalize`. Flags are never","            // removed for non-internal regexes, so don't need to handle it","            xregexpFlags = flagsToAdd ? clipDuplicates(xData.flags + flagsToAdd) : xData.flags;","        }","    }","","    // Augment with `XRegExp.prototype` properties, but use the native `RegExp` constructor to avoid","    // searching for special tokens. That would be wrong for regexes constructed by `RegExp`, and","    // unnecessary for regexes constructed by `XRegExp` because the regex has already undergone the","    // translation to native regex syntax","    regex = augment(","        new RegExp(options.source || regex.source, flags),","        hasNamedCapture(regex) ? xData.captureNames.slice(0) : null,","        xregexpSource,","        xregexpFlags,","        options.isInternalOnly","    );","","    return regex;","}","","/**"," * Converts hexadecimal to decimal."," *"," * @private"," * @param {String} hex"," * @returns {Number}"," */","function dec(hex) {","    return parseInt(hex, 16);","}","","/**"," * Returns a pattern that can be used in a native RegExp in place of an ignorable token such as an"," * inline comment or whitespace with flag x. This is used directly as a token handler function"," * passed to `XRegExp.addToken`."," *"," * @private"," * @param {String} match Match arg of `XRegExp.addToken` handler"," * @param {String} scope Scope arg of `XRegExp.addToken` handler"," * @param {String} flags Flags arg of `XRegExp.addToken` handler"," * @returns {String} Either '' or '(?:)', depending on which is needed in the context of the match."," */","function getContextualTokenSeparator(match, scope, flags) {","    if (","        // No need to separate tokens if at the beginning or end of a group","        match.input.charAt(match.index - 1) === '(' ||","        match.input.charAt(match.index + match[0].length) === ')' ||","        // Avoid separating tokens when the following token is a quantifier","        isPatternNext(match.input, match.index + match[0].length, flags, '[?*+]|{\\\\d+(?:,\\\\d*)?}')","    ) {","        return '';","    }","    // Keep tokens separated. This avoids e.g. inadvertedly changing `\\1 1` or `\\1(?#)1` to `\\11`.","    // This also ensures all tokens remain as discrete atoms, e.g. it avoids converting the syntax","    // error `(? :` into `(?:`.","    return '(?:)';","}","","/**"," * Returns native `RegExp` flags used by a regex object."," *"," * @private"," * @param {RegExp} regex Regex to check."," * @returns {String} Native flags in use."," */","function getNativeFlags(regex) {","    return hasFlagsProp ?","        regex.flags :","        // Explicitly using `RegExp.prototype.toString` (rather than e.g. `String` or concatenation","        // with an empty string) allows this to continue working predictably when","        // `XRegExp.proptotype.toString` is overridden","        nativ.exec.call(/\\/([a-z]*)$/i, RegExp.prototype.toString.call(regex))[1];","}","","/**"," * Determines whether a regex has extended instance data used to track capture names."," *"," * @private"," * @param {RegExp} regex Regex to check."," * @returns {Boolean} Whether the regex uses named capture."," */","function hasNamedCapture(regex) {","    return !!(regex[REGEX_DATA] && regex[REGEX_DATA].captureNames);","}","","/**"," * Converts decimal to hexadecimal."," *"," * @private"," * @param {Number|String} dec"," * @returns {String}"," */","function hex(dec) {","    return parseInt(dec, 10).toString(16);","}","","/**"," * Returns the first index at which a given value can be found in an array."," *"," * @private"," * @param {Array} array Array to search."," * @param {*} value Value to locate in the array."," * @returns {Number} Zero-based index at which the item is found, or -1."," */","function indexOf(array, value) {","    var len = array.length;","    var i;","","    for (i = 0; i < len; ++i) {","        if (array[i] === value) {","            return i;","        }","    }","","    return -1;","}","","/**"," * Checks whether the next nonignorable token after the specified position matches the"," * `needlePattern`"," *"," * @private"," * @param {String} pattern Pattern to search within."," * @param {Number} pos Index in `pattern` to search at."," * @param {String} flags Flags used by the pattern."," * @param {String} needlePattern Pattern to match the next token against."," * @returns {Boolean} Whether the next nonignorable token matches `needlePattern`"," */","function isPatternNext(pattern, pos, flags, needlePattern) {","    var inlineCommentPattern = '\\\\(\\\\?#[^)]*\\\\)';","    var lineCommentPattern = '#[^#\\\\n]*';","    var patternsToIgnore = flags.indexOf('x') > -1 ?","        // Ignore any leading whitespace, line comments, and inline comments","        ['\\\\s', lineCommentPattern, inlineCommentPattern] :","        // Ignore any leading inline comments","        [inlineCommentPattern];","    return nativ.test.call(","        new RegExp('^(?:' + patternsToIgnore.join('|') + ')*(?:' + needlePattern + ')'),","        pattern.slice(pos)","    );","}","","/**"," * Determines whether a value is of the specified type, by resolving its internal [[Class]]."," *"," * @private"," * @param {*} value Object to check."," * @param {String} type Type to check for, in TitleCase."," * @returns {Boolean} Whether the object matches the type."," */","function isType(value, type) {","    return toString.call(value) === '[object ' + type + ']';","}","","/**"," * Adds leading zeros if shorter than four characters. Used for fixed-length hexadecimal values."," *"," * @private"," * @param {String} str"," * @returns {String}"," */","function pad4(str) {","    while (str.length < 4) {","        str = '0' + str;","    }","    return str;","}","","/**"," * Checks for flag-related errors, and strips/applies flags in a leading mode modifier. Offloads"," * the flag preparation logic from the `XRegExp` constructor."," *"," * @private"," * @param {String} pattern Regex pattern, possibly with a leading mode modifier."," * @param {String} flags Any combination of flags."," * @returns {Object} Object with properties `pattern` and `flags`."," */","function prepareFlags(pattern, flags) {","    var i;","","    // Recent browsers throw on duplicate flags, so copy this behavior for nonnative flags","    if (clipDuplicates(flags) !== flags) {","        throw new SyntaxError('Invalid duplicate regex flag ' + flags);","    }","","    // Strip and apply a leading mode modifier with any combination of flags except g or y","    pattern = nativ.replace.call(pattern, /^\\(\\?([\\w$]+)\\)/, function($0, $1) {","        if (nativ.test.call(/[gy]/, $1)) {","            throw new SyntaxError('Cannot use flag g or y in mode modifier ' + $0);","        }","        // Allow duplicate flags within the mode modifier","        flags = clipDuplicates(flags + $1);","        return '';","    });","","    // Throw on unknown native or nonnative flags","    for (i = 0; i < flags.length; ++i) {","        if (!registeredFlags[flags.charAt(i)]) {","            throw new SyntaxError('Unknown regex flag ' + flags.charAt(i));","        }","    }","","    return {","        pattern: pattern,","        flags: flags","    };","}","","/**"," * Prepares an options object from the given value."," *"," * @private"," * @param {String|Object} value Value to convert to an options object."," * @returns {Object} Options object."," */","function prepareOptions(value) {","    var options = {};","","    if (isType(value, 'String')) {","        XRegExp.forEach(value, /[^\\s,]+/, function(match) {","            options[match] = true;","        });","","        return options;","    }","","    return value;","}","","/**"," * Registers a flag so it doesn't throw an 'unknown flag' error."," *"," * @private"," * @param {String} flag Single-character flag to register."," */","function registerFlag(flag) {","    if (!/^[\\w$]$/.test(flag)) {","        throw new Error('Flag must be a single character A-Za-z0-9_$');","    }","","    registeredFlags[flag] = true;","}","","/**"," * Runs built-in and custom regex syntax tokens in reverse insertion order at the specified"," * position, until a match is found."," *"," * @private"," * @param {String} pattern Original pattern from which an XRegExp object is being built."," * @param {String} flags Flags being used to construct the regex."," * @param {Number} pos Position to search for tokens within `pattern`."," * @param {Number} scope Regex scope to apply: 'default' or 'class'."," * @param {Object} context Context object to use for token handler functions."," * @returns {Object} Object with properties `matchLength`, `output`, and `reparse`; or `null`."," */","function runTokens(pattern, flags, pos, scope, context) {","    var i = tokens.length;","    var leadChar = pattern.charAt(pos);","    var result = null;","    var match;","    var t;","","    // Run in reverse insertion order","    while (i--) {","        t = tokens[i];","        if (","            (t.leadChar && t.leadChar !== leadChar) ||","            (t.scope !== scope && t.scope !== 'all') ||","            (t.flag && flags.indexOf(t.flag) === -1)","        ) {","            continue;","        }","","        match = XRegExp.exec(pattern, t.regex, pos, 'sticky');","        if (match) {","            result = {","                matchLength: match[0].length,","                output: t.handler.call(context, match, scope, flags),","                reparse: t.reparse","            };","            // Finished with token tests","            break;","        }","    }","","    return result;","}","","/**"," * Enables or disables implicit astral mode opt-in. When enabled, flag A is automatically added to"," * all new regexes created by XRegExp. This causes an error to be thrown when creating regexes if"," * the Unicode Base addon is not available, since flag A is registered by that addon."," *"," * @private"," * @param {Boolean} on `true` to enable; `false` to disable."," */","function setAstral(on) {","    features.astral = on;","}","","/**"," * Enables or disables native method overrides."," *"," * @private"," * @param {Boolean} on `true` to enable; `false` to disable."," */","function setNatives(on) {","    RegExp.prototype.exec = (on ? fixed : nativ).exec;","    RegExp.prototype.test = (on ? fixed : nativ).test;","    String.prototype.match = (on ? fixed : nativ).match;","    String.prototype.replace = (on ? fixed : nativ).replace;","    String.prototype.split = (on ? fixed : nativ).split;","","    features.natives = on;","}","","/**"," * Returns the object, or throws an error if it is `null` or `undefined`. This is used to follow"," * the ES5 abstract operation `ToObject`."," *"," * @private"," * @param {*} value Object to check and return."," * @returns {*} The provided object."," */","function toObject(value) {","    // null or undefined","    if (value == null) {","        throw new TypeError('Cannot convert null or undefined to object');","    }","","    return value;","}","","// ==--------------------------==","// Constructor","// ==--------------------------==","","/**"," * Creates an extended regular expression object for matching text with a pattern. Differs from a"," * native regular expression in that additional syntax and flags are supported. The returned object"," * is in fact a native `RegExp` and works with all native methods."," *"," * @class XRegExp"," * @constructor"," * @param {String|RegExp} pattern Regex pattern string, or an existing regex object to copy."," * @param {String} [flags] Any combination of flags."," *   Native flags:"," *     - `g` - global"," *     - `i` - ignore case"," *     - `m` - multiline anchors"," *     - `u` - unicode (ES6)"," *     - `y` - sticky (Firefox 3+, ES6)"," *   Additional XRegExp flags:"," *     - `n` - explicit capture"," *     - `s` - dot matches all (aka singleline)"," *     - `x` - free-spacing and line comments (aka extended)"," *     - `A` - astral (requires the Unicode Base addon)"," *   Flags cannot be provided when constructing one `RegExp` from another."," * @returns {RegExp} Extended regular expression object."," * @example"," *"," * // With named capture and flag x"," * XRegExp('(?<year>  [0-9]{4} ) -?  # year  \\n\\"," *          (?<month> [0-9]{2} ) -?  # month \\n\\"," *          (?<day>   [0-9]{2} )     # day   ', 'x');"," *"," * // Providing a regex object copies it. Native regexes are recompiled using native (not XRegExp)"," * // syntax. Copies maintain extended data, are augmented with `XRegExp.prototype` properties, and"," * // have fresh `lastIndex` properties (set to zero)."," * XRegExp(/regex/);"," */","function XRegExp(pattern, flags) {","    if (XRegExp.isRegExp(pattern)) {","        if (flags !== undefined) {","            throw new TypeError('Cannot supply flags when copying a RegExp');","        }","        return copyRegex(pattern);","    }","","    // Copy the argument behavior of `RegExp`","    pattern = pattern === undefined ? '' : String(pattern);","    flags = flags === undefined ? '' : String(flags);","","    if (XRegExp.isInstalled('astral') && flags.indexOf('A') === -1) {","        // This causes an error to be thrown if the Unicode Base addon is not available","        flags += 'A';","    }","","    if (!patternCache[pattern]) {","        patternCache[pattern] = {};","    }","","    if (!patternCache[pattern][flags]) {","        var context = {","            hasNamedCapture: false,","            captureNames: []","        };","        var scope = defaultScope;","        var output = '';","        var pos = 0;","        var result;","","        // Check for flag-related errors, and strip/apply flags in a leading mode modifier","        var applied = prepareFlags(pattern, flags);","        var appliedPattern = applied.pattern;","        var appliedFlags = applied.flags;","","        // Use XRegExp's tokens to translate the pattern to a native regex pattern.","        // `appliedPattern.length` may change on each iteration if tokens use `reparse`","        while (pos < appliedPattern.length) {","            do {","                // Check for custom tokens at the current position","                result = runTokens(appliedPattern, appliedFlags, pos, scope, context);","                // If the matched token used the `reparse` option, splice its output into the","                // pattern before running tokens again at the same position","                if (result && result.reparse) {","                    appliedPattern = appliedPattern.slice(0, pos) +","                        result.output +","                        appliedPattern.slice(pos + result.matchLength);","                }","            } while (result && result.reparse);","","            if (result) {","                output += result.output;","                pos += (result.matchLength || 1);","            } else {","                // Get the native token at the current position","                var token = XRegExp.exec(appliedPattern, nativeTokens[scope], pos, 'sticky')[0];","                output += token;","                pos += token.length;","                if (token === '[' && scope === defaultScope) {","                    scope = classScope;","                } else if (token === ']' && scope === classScope) {","                    scope = defaultScope;","                }","            }","        }","","        patternCache[pattern][flags] = {","            // Use basic cleanup to collapse repeated empty groups like `(?:)(?:)` to `(?:)`. Empty","            // groups are sometimes inserted during regex transpilation in order to keep tokens","            // separated. However, more than one empty group in a row is never needed.","            pattern: nativ.replace.call(output, /(?:\\(\\?:\\))+/g, '(?:)'),","            // Strip all but native flags","            flags: nativ.replace.call(appliedFlags, /[^gimuy]+/g, ''),","            // `context.captureNames` has an item for each capturing group, even if unnamed","            captures: context.hasNamedCapture ? context.captureNames : null","        };","    }","","    var generated = patternCache[pattern][flags];","    return augment(","        new RegExp(generated.pattern, generated.flags),","        generated.captures,","        pattern,","        flags","    );","}","","// Add `RegExp.prototype` to the prototype chain","XRegExp.prototype = new RegExp();","","// ==--------------------------==","// Public properties","// ==--------------------------==","","/**"," * The XRegExp version number as a string containing three dot-separated parts. For example,"," * '2.0.0-beta-3'."," *"," * @static"," * @memberOf XRegExp"," * @type String"," */","XRegExp.version = '3.2.0';","","// ==--------------------------==","// Public methods","// ==--------------------------==","","// Intentionally undocumented; used in tests and addons","XRegExp._clipDuplicates = clipDuplicates;","XRegExp._hasNativeFlag = hasNativeFlag;","XRegExp._dec = dec;","XRegExp._hex = hex;","XRegExp._pad4 = pad4;","","/**"," * Extends XRegExp syntax and allows custom flags. This is used internally and can be used to"," * create XRegExp addons. If more than one token can match the same string, the last added wins."," *"," * @memberOf XRegExp"," * @param {RegExp} regex Regex object that matches the new token."," * @param {Function} handler Function that returns a new pattern string (using native regex syntax)"," *   to replace the matched token within all future XRegExp regexes. Has access to persistent"," *   properties of the regex being built, through `this`. Invoked with three arguments:"," *   - The match array, with named backreference properties."," *   - The regex scope where the match was found: 'default' or 'class'."," *   - The flags used by the regex, including any flags in a leading mode modifier."," *   The handler function becomes part of the XRegExp construction process, so be careful not to"," *   construct XRegExps within the function or you will trigger infinite recursion."," * @param {Object} [options] Options object with optional properties:"," *   - `scope` {String} Scope where the token applies: 'default', 'class', or 'all'."," *   - `flag` {String} Single-character flag that triggers the token. This also registers the"," *     flag, which prevents XRegExp from throwing an 'unknown flag' error when the flag is used."," *   - `optionalFlags` {String} Any custom flags checked for within the token `handler` that are"," *     not required to trigger the token. This registers the flags, to prevent XRegExp from"," *     throwing an 'unknown flag' error when any of the flags are used."," *   - `reparse` {Boolean} Whether the `handler` function's output should not be treated as"," *     final, and instead be reparseable by other tokens (including the current token). Allows"," *     token chaining or deferring."," *   - `leadChar` {String} Single character that occurs at the beginning of any successful match"," *     of the token (not always applicable). This doesn't change the behavior of the token unless"," *     you provide an erroneous value. However, providing it can increase the token's performance"," *     since the token can be skipped at any positions where this character doesn't appear."," * @example"," *"," * // Basic usage: Add \\a for the ALERT control code"," * XRegExp.addToken("," *   /\\\\a/,"," *   function() {return '\\\\x07';},"," *   {scope: 'all'}"," * );"," * XRegExp('\\\\a[\\\\a-\\\\n]+').test('\\x07\\n\\x07'); // -> true"," *"," * // Add the U (ungreedy) flag from PCRE and RE2, which reverses greedy and lazy quantifiers."," * // Since `scope` is not specified, it uses 'default' (i.e., transformations apply outside of"," * // character classes only)"," * XRegExp.addToken("," *   /([?*+]|{\\d+(?:,\\d*)?})(\\??)/,"," *   function(match) {return match[1] + (match[2] ? '' : '?');},"," *   {flag: 'U'}"," * );"," * XRegExp('a+', 'U').exec('aaa')[0]; // -> 'a'"," * XRegExp('a+?', 'U').exec('aaa')[0]; // -> 'aaa'"," */","XRegExp.addToken = function(regex, handler, options) {","    options = options || {};","    var optionalFlags = options.optionalFlags;","    var i;","","    if (options.flag) {","        registerFlag(options.flag);","    }","","    if (optionalFlags) {","        optionalFlags = nativ.split.call(optionalFlags, '');","        for (i = 0; i < optionalFlags.length; ++i) {","            registerFlag(optionalFlags[i]);","        }","    }","","    // Add to the private list of syntax tokens","    tokens.push({","        regex: copyRegex(regex, {","            addG: true,","            addY: hasNativeY,","            isInternalOnly: true","        }),","        handler: handler,","        scope: options.scope || defaultScope,","        flag: options.flag,","        reparse: options.reparse,","        leadChar: options.leadChar","    });","","    // Reset the pattern cache used by the `XRegExp` constructor, since the same pattern and flags","    // might now produce different results","    XRegExp.cache.flush('patterns');","};","","/**"," * Caches and returns the result of calling `XRegExp(pattern, flags)`. On any subsequent call with"," * the same pattern and flag combination, the cached copy of the regex is returned."," *"," * @memberOf XRegExp"," * @param {String} pattern Regex pattern string."," * @param {String} [flags] Any combination of XRegExp flags."," * @returns {RegExp} Cached XRegExp object."," * @example"," *"," * while (match = XRegExp.cache('.', 'gs').exec(str)) {"," *   // The regex is compiled once only"," * }"," */","XRegExp.cache = function(pattern, flags) {","    if (!regexCache[pattern]) {","        regexCache[pattern] = {};","    }","    return regexCache[pattern][flags] || (","        regexCache[pattern][flags] = XRegExp(pattern, flags)","    );","};","","// Intentionally undocumented; used in tests","XRegExp.cache.flush = function(cacheName) {","    if (cacheName === 'patterns') {","        // Flush the pattern cache used by the `XRegExp` constructor","        patternCache = {};","    } else {","        // Flush the regex cache populated by `XRegExp.cache`","        regexCache = {};","    }","};","","/**"," * Escapes any regular expression metacharacters, for use when matching literal strings. The result"," * can safely be used at any point within a regex that uses any flags."," *"," * @memberOf XRegExp"," * @param {String} str String to escape."," * @returns {String} String with regex metacharacters escaped."," * @example"," *"," * XRegExp.escape('Escaped? <.>');"," * // -> 'Escaped\\?\\ <\\.>'"," */","XRegExp.escape = function(str) {","    return nativ.replace.call(toObject(str), /[-\\[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');","};","","/**"," * Executes a regex search in a specified string. Returns a match array or `null`. If the provided"," * regex uses named capture, named backreference properties are included on the match array."," * Optional `pos` and `sticky` arguments specify the search start position, and whether the match"," * must start at the specified position only. The `lastIndex` property of the provided regex is not"," * used, but is updated for compatibility. Also fixes browser bugs compared to the native"," * `RegExp.prototype.exec` and can be used reliably cross-browser."," *"," * @memberOf XRegExp"," * @param {String} str String to search."," * @param {RegExp} regex Regex to search with."," * @param {Number} [pos=0] Zero-based index at which to start the search."," * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position"," *   only. The string `'sticky'` is accepted as an alternative to `true`."," * @returns {Array} Match array with named backreference properties, or `null`."," * @example"," *"," * // Basic use, with named backreference"," * var match = XRegExp.exec('U+2620', XRegExp('U\\\\+(?<hex>[0-9A-F]{4})'));"," * match.hex; // -> '2620'"," *"," * // With pos and sticky, in a loop"," * var pos = 2, result = [], match;"," * while (match = XRegExp.exec('<1><2><3><4>5<6>', /<(\\d)>/, pos, 'sticky')) {"," *   result.push(match[1]);"," *   pos = match.index + match[0].length;"," * }"," * // result -> ['2', '3', '4']"," */","XRegExp.exec = function(str, regex, pos, sticky) {","    var cacheKey = 'g';","    var addY = false;","    var fakeY = false;","    var match;","    var r2;","","    addY = hasNativeY && !!(sticky || (regex.sticky && sticky !== false));","    if (addY) {","        cacheKey += 'y';","    } else if (sticky) {","        // Simulate sticky matching by appending an empty capture to the original regex. The","        // resulting regex will succeed no matter what at the current index (set with `lastIndex`),","        // and will not search the rest of the subject string. We'll know that the original regex","        // has failed if that last capture is `''` rather than `undefined` (i.e., if that last","        // capture participated in the match).","        fakeY = true;","        cacheKey += 'FakeY';","    }","","    regex[REGEX_DATA] = regex[REGEX_DATA] || {};","","    // Shares cached copies with `XRegExp.match`/`replace`","    r2 = regex[REGEX_DATA][cacheKey] || (","        regex[REGEX_DATA][cacheKey] = copyRegex(regex, {","            addG: true,","            addY: addY,","            source: fakeY ? regex.source + '|()' : undefined,","            removeY: sticky === false,","            isInternalOnly: true","        })","    );","","    pos = pos || 0;","    r2.lastIndex = pos;","","    // Fixed `exec` required for `lastIndex` fix, named backreferences, etc.","    match = fixed.exec.call(r2, str);","","    // Get rid of the capture added by the pseudo-sticky matcher if needed. An empty string means","    // the original regexp failed (see above).","    if (fakeY && match && match.pop() === '') {","        match = null;","    }","","    if (regex.global) {","        regex.lastIndex = match ? r2.lastIndex : 0;","    }","","    return match;","};","","/**"," * Executes a provided function once per regex match. Searches always start at the beginning of the"," * string and continue until the end, regardless of the state of the regex's `global` property and"," * initial `lastIndex`."," *"," * @memberOf XRegExp"," * @param {String} str String to search."," * @param {RegExp} regex Regex to search with."," * @param {Function} callback Function to execute for each match. Invoked with four arguments:"," *   - The match array, with named backreference properties."," *   - The zero-based match index."," *   - The string being traversed."," *   - The regex object being used to traverse the string."," * @example"," *"," * // Extracts every other digit from a string"," * var evens = [];"," * XRegExp.forEach('1a2345', /\\d/, function(match, i) {"," *   if (i % 2) evens.push(+match[0]);"," * });"," * // evens -> [2, 4]"," */","XRegExp.forEach = function(str, regex, callback) {","    var pos = 0;","    var i = -1;","    var match;","","    while ((match = XRegExp.exec(str, regex, pos))) {","        // Because `regex` is provided to `callback`, the function could use the deprecated/","        // nonstandard `RegExp.prototype.compile` to mutate the regex. However, since `XRegExp.exec`","        // doesn't use `lastIndex` to set the search position, this can't lead to an infinite loop,","        // at least. Actually, because of the way `XRegExp.exec` caches globalized versions of","        // regexes, mutating the regex will not have any effect on the iteration or matched strings,","        // which is a nice side effect that brings extra safety.","        callback(match, ++i, str, regex);","","        pos = match.index + (match[0].length || 1);","    }","};","","/**"," * Copies a regex object and adds flag `g`. The copy maintains extended data, is augmented with"," * `XRegExp.prototype` properties, and has a fresh `lastIndex` property (set to zero). Native"," * regexes are not recompiled using XRegExp syntax."," *"," * @memberOf XRegExp"," * @param {RegExp} regex Regex to globalize."," * @returns {RegExp} Copy of the provided regex with flag `g` added."," * @example"," *"," * var globalCopy = XRegExp.globalize(/regex/);"," * globalCopy.global; // -> true"," */","XRegExp.globalize = function(regex) {","    return copyRegex(regex, {addG: true});","};","","/**"," * Installs optional features according to the specified options. Can be undone using"," * `XRegExp.uninstall`."," *"," * @memberOf XRegExp"," * @param {Object|String} options Options object or string."," * @example"," *"," * // With an options object"," * XRegExp.install({"," *   // Enables support for astral code points in Unicode addons (implicitly sets flag A)"," *   astral: true,"," *"," *   // DEPRECATED: Overrides native regex methods with fixed/extended versions"," *   natives: true"," * });"," *"," * // With an options string"," * XRegExp.install('astral natives');"," */","XRegExp.install = function(options) {","    options = prepareOptions(options);","","    if (!features.astral && options.astral) {","        setAstral(true);","    }","","    if (!features.natives && options.natives) {","        setNatives(true);","    }","};","","/**"," * Checks whether an individual optional feature is installed."," *"," * @memberOf XRegExp"," * @param {String} feature Name of the feature to check. One of:"," *   - `astral`"," *   - `natives`"," * @returns {Boolean} Whether the feature is installed."," * @example"," *"," * XRegExp.isInstalled('astral');"," */","XRegExp.isInstalled = function(feature) {","    return !!(features[feature]);","};","","/**"," * Returns `true` if an object is a regex; `false` if it isn't. This works correctly for regexes"," * created in another frame, when `instanceof` and `constructor` checks would fail."," *"," * @memberOf XRegExp"," * @param {*} value Object to check."," * @returns {Boolean} Whether the object is a `RegExp` object."," * @example"," *"," * XRegExp.isRegExp('string'); // -> false"," * XRegExp.isRegExp(/regex/i); // -> true"," * XRegExp.isRegExp(RegExp('^', 'm')); // -> true"," * XRegExp.isRegExp(XRegExp('(?s).')); // -> true"," */","XRegExp.isRegExp = function(value) {","    return toString.call(value) === '[object RegExp]';","    //return isType(value, 'RegExp');","};","","/**"," * Returns the first matched string, or in global mode, an array containing all matched strings."," * This is essentially a more convenient re-implementation of `String.prototype.match` that gives"," * the result types you actually want (string instead of `exec`-style array in match-first mode,"," * and an empty array instead of `null` when no matches are found in match-all mode). It also lets"," * you override flag g and ignore `lastIndex`, and fixes browser bugs."," *"," * @memberOf XRegExp"," * @param {String} str String to search."," * @param {RegExp} regex Regex to search with."," * @param {String} [scope='one'] Use 'one' to return the first match as a string. Use 'all' to"," *   return an array of all matched strings. If not explicitly specified and `regex` uses flag g,"," *   `scope` is 'all'."," * @returns {String|Array} In match-first mode: First match as a string, or `null`. In match-all"," *   mode: Array of all matched strings, or an empty array."," * @example"," *"," * // Match first"," * XRegExp.match('abc', /\\w/); // -> 'a'"," * XRegExp.match('abc', /\\w/g, 'one'); // -> 'a'"," * XRegExp.match('abc', /x/g, 'one'); // -> null"," *"," * // Match all"," * XRegExp.match('abc', /\\w/g); // -> ['a', 'b', 'c']"," * XRegExp.match('abc', /\\w/, 'all'); // -> ['a', 'b', 'c']"," * XRegExp.match('abc', /x/, 'all'); // -> []"," */","XRegExp.match = function(str, regex, scope) {","    var global = (regex.global && scope !== 'one') || scope === 'all';","    var cacheKey = ((global ? 'g' : '') + (regex.sticky ? 'y' : '')) || 'noGY';","    var result;","    var r2;","","    regex[REGEX_DATA] = regex[REGEX_DATA] || {};","","    // Shares cached copies with `XRegExp.exec`/`replace`","    r2 = regex[REGEX_DATA][cacheKey] || (","        regex[REGEX_DATA][cacheKey] = copyRegex(regex, {","            addG: !!global,","            removeG: scope === 'one',","            isInternalOnly: true","        })","    );","","    result = nativ.match.call(toObject(str), r2);","","    if (regex.global) {","        regex.lastIndex = (","            (scope === 'one' && result) ?","                // Can't use `r2.lastIndex` since `r2` is nonglobal in this case","                (result.index + result[0].length) : 0","        );","    }","","    return global ? (result || []) : (result && result[0]);","};","","/**"," * Retrieves the matches from searching a string using a chain of regexes that successively search"," * within previous matches. The provided `chain` array can contain regexes and or objects with"," * `regex` and `backref` properties. When a backreference is specified, the named or numbered"," * backreference is passed forward to the next regex or returned."," *"," * @memberOf XRegExp"," * @param {String} str String to search."," * @param {Array} chain Regexes that each search for matches within preceding results."," * @returns {Array} Matches by the last regex in the chain, or an empty array."," * @example"," *"," * // Basic usage; matches numbers within <b> tags"," * XRegExp.matchChain('1 <b>2</b> 3 <b>4 a 56</b>', ["," *   XRegExp('(?is)<b>.*?</b>'),"," *   /\\d+/"," * ]);"," * // -> ['2', '4', '56']"," *"," * // Passing forward and returning specific backreferences"," * html = '<a href=\"http://xregexp.com/api/\">XRegExp</a>\\"," *         <a href=\"http://www.google.com/\">Google</a>';"," * XRegExp.matchChain(html, ["," *   {regex: /<a href=\"([^\"]+)\">/i, backref: 1},"," *   {regex: XRegExp('(?i)^https?://(?<domain>[^/?#]+)'), backref: 'domain'}"," * ]);"," * // -> ['xregexp.com', 'www.google.com']"," */","XRegExp.matchChain = function(str, chain) {","    return (function recurseChain(values, level) {","        var item = chain[level].regex ? chain[level] : {regex: chain[level]};","        var matches = [];","","        function addMatch(match) {","            if (item.backref) {","                // Safari 4.0.5 (but not 5.0.5+) inappropriately uses sparse arrays to hold the","                // `undefined`s for backreferences to nonparticipating capturing groups. In such","                // cases, a `hasOwnProperty` or `in` check on its own would inappropriately throw","                // the exception, so also check if the backreference is a number that is within the","                // bounds of the array.","                if (!(match.hasOwnProperty(item.backref) || +item.backref < match.length)) {","                    throw new ReferenceError('Backreference to undefined group: ' + item.backref);","                }","","                matches.push(match[item.backref] || '');","            } else {","                matches.push(match[0]);","            }","        }","","        for (var i = 0; i < values.length; ++i) {","            XRegExp.forEach(values[i], item.regex, addMatch);","        }","","        return ((level === chain.length - 1) || !matches.length) ?","            matches :","            recurseChain(matches, level + 1);","    }([str], 0));","};","","/**"," * Returns a new string with one or all matches of a pattern replaced. The pattern can be a string"," * or regex, and the replacement can be a string or a function to be called for each match. To"," * perform a global search and replace, use the optional `scope` argument or include flag g if using"," * a regex. Replacement strings can use `${n}` for named and numbered backreferences. Replacement"," * functions can use named backreferences via `arguments[0].name`. Also fixes browser bugs compared"," * to the native `String.prototype.replace` and can be used reliably cross-browser."," *"," * @memberOf XRegExp"," * @param {String} str String to search."," * @param {RegExp|String} search Search pattern to be replaced."," * @param {String|Function} replacement Replacement string or a function invoked to create it."," *   Replacement strings can include special replacement syntax:"," *     - $$ - Inserts a literal $ character."," *     - $&, $0 - Inserts the matched substring."," *     - $` - Inserts the string that precedes the matched substring (left context)."," *     - $' - Inserts the string that follows the matched substring (right context)."," *     - $n, $nn - Where n/nn are digits referencing an existent capturing group, inserts"," *       backreference n/nn."," *     - ${n} - Where n is a name or any number of digits that reference an existent capturing"," *       group, inserts backreference n."," *   Replacement functions are invoked with three or more arguments:"," *     - The matched substring (corresponds to $& above). Named backreferences are accessible as"," *       properties of this first argument."," *     - 0..n arguments, one for each backreference (corresponding to $1, $2, etc. above)."," *     - The zero-based index of the match within the total search string."," *     - The total string being searched."," * @param {String} [scope='one'] Use 'one' to replace the first match only, or 'all'. If not"," *   explicitly specified and using a regex with flag g, `scope` is 'all'."," * @returns {String} New string with one or all matches replaced."," * @example"," *"," * // Regex search, using named backreferences in replacement string"," * var name = XRegExp('(?<first>\\\\w+) (?<last>\\\\w+)');"," * XRegExp.replace('John Smith', name, '${last}, ${first}');"," * // -> 'Smith, John'"," *"," * // Regex search, using named backreferences in replacement function"," * XRegExp.replace('John Smith', name, function(match) {"," *   return match.last + ', ' + match.first;"," * });"," * // -> 'Smith, John'"," *"," * // String search, with replace-all"," * XRegExp.replace('RegExp builds RegExps', 'RegExp', 'XRegExp', 'all');"," * // -> 'XRegExp builds XRegExps'"," */","XRegExp.replace = function(str, search, replacement, scope) {","    var isRegex = XRegExp.isRegExp(search);","    var global = (search.global && scope !== 'one') || scope === 'all';","    var cacheKey = ((global ? 'g' : '') + (search.sticky ? 'y' : '')) || 'noGY';","    var s2 = search;","    var result;","","    if (isRegex) {","        search[REGEX_DATA] = search[REGEX_DATA] || {};","","        // Shares cached copies with `XRegExp.exec`/`match`. Since a copy is used, `search`'s","        // `lastIndex` isn't updated *during* replacement iterations","        s2 = search[REGEX_DATA][cacheKey] || (","            search[REGEX_DATA][cacheKey] = copyRegex(search, {","                addG: !!global,","                removeG: scope === 'one',","                isInternalOnly: true","            })","        );","    } else if (global) {","        s2 = new RegExp(XRegExp.escape(String(search)), 'g');","    }","","    // Fixed `replace` required for named backreferences, etc.","    result = fixed.replace.call(toObject(str), s2, replacement);","","    if (isRegex && search.global) {","        // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)","        search.lastIndex = 0;","    }","","    return result;","};","","/**"," * Performs batch processing of string replacements. Used like `XRegExp.replace`, but accepts an"," * array of replacement details. Later replacements operate on the output of earlier replacements."," * Replacement details are accepted as an array with a regex or string to search for, the"," * replacement string or function, and an optional scope of 'one' or 'all'. Uses the XRegExp"," * replacement text syntax, which supports named backreference properties via `${name}`."," *"," * @memberOf XRegExp"," * @param {String} str String to search."," * @param {Array} replacements Array of replacement detail arrays."," * @returns {String} New string with all replacements."," * @example"," *"," * str = XRegExp.replaceEach(str, ["," *   [XRegExp('(?<name>a)'), 'z${name}'],"," *   [/b/gi, 'y'],"," *   [/c/g, 'x', 'one'], // scope 'one' overrides /g"," *   [/d/, 'w', 'all'],  // scope 'all' overrides lack of /g"," *   ['e', 'v', 'all'],  // scope 'all' allows replace-all for strings"," *   [/f/g, function($0) {"," *     return $0.toUpperCase();"," *   }]"," * ]);"," */","XRegExp.replaceEach = function(str, replacements) {","    var i;","    var r;","","    for (i = 0; i < replacements.length; ++i) {","        r = replacements[i];","        str = XRegExp.replace(str, r[0], r[1], r[2]);","    }","","    return str;","};","","/**"," * Splits a string into an array of strings using a regex or string separator. Matches of the"," * separator are not included in the result array. However, if `separator` is a regex that contains"," * capturing groups, backreferences are spliced into the result each time `separator` is matched."," * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably"," * cross-browser."," *"," * @memberOf XRegExp"," * @param {String} str String to split."," * @param {RegExp|String} separator Regex or string to use for separating the string."," * @param {Number} [limit] Maximum number of items to include in the result array."," * @returns {Array} Array of substrings."," * @example"," *"," * // Basic use"," * XRegExp.split('a b c', ' ');"," * // -> ['a', 'b', 'c']"," *"," * // With limit"," * XRegExp.split('a b c', ' ', 2);"," * // -> ['a', 'b']"," *"," * // Backreferences in result array"," * XRegExp.split('..word1..', /([a-z]+)(\\d+)/i);"," * // -> ['..', 'word', '1', '..']"," */","XRegExp.split = function(str, separator, limit) {","    return fixed.split.call(toObject(str), separator, limit);","};","","/**"," * Executes a regex search in a specified string. Returns `true` or `false`. Optional `pos` and"," * `sticky` arguments specify the search start position, and whether the match must start at the"," * specified position only. The `lastIndex` property of the provided regex is not used, but is"," * updated for compatibility. Also fixes browser bugs compared to the native"," * `RegExp.prototype.test` and can be used reliably cross-browser."," *"," * @memberOf XRegExp"," * @param {String} str String to search."," * @param {RegExp} regex Regex to search with."," * @param {Number} [pos=0] Zero-based index at which to start the search."," * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position"," *   only. The string `'sticky'` is accepted as an alternative to `true`."," * @returns {Boolean} Whether the regex matched the provided value."," * @example"," *"," * // Basic use"," * XRegExp.test('abc', /c/); // -> true"," *"," * // With pos and sticky"," * XRegExp.test('abc', /c/, 0, 'sticky'); // -> false"," * XRegExp.test('abc', /c/, 2, 'sticky'); // -> true"," */","XRegExp.test = function(str, regex, pos, sticky) {","    // Do this the easy way :-)","    return !!XRegExp.exec(str, regex, pos, sticky);","};","","/**"," * Uninstalls optional features according to the specified options. All optional features start out"," * uninstalled, so this is used to undo the actions of `XRegExp.install`."," *"," * @memberOf XRegExp"," * @param {Object|String} options Options object or string."," * @example"," *"," * // With an options object"," * XRegExp.uninstall({"," *   // Disables support for astral code points in Unicode addons"," *   astral: true,"," *"," *   // DEPRECATED: Restores native regex methods"," *   natives: true"," * });"," *"," * // With an options string"," * XRegExp.uninstall('astral natives');"," */","XRegExp.uninstall = function(options) {","    options = prepareOptions(options);","","    if (features.astral && options.astral) {","        setAstral(false);","    }","","    if (features.natives && options.natives) {","        setNatives(false);","    }","};","","/**"," * Returns an XRegExp object that is the union of the given patterns. Patterns can be provided as"," * regex objects or strings. Metacharacters are escaped in patterns provided as strings."," * Backreferences in provided regex objects are automatically renumbered to work correctly within"," * the larger combined pattern. Native flags used by provided regexes are ignored in favor of the"," * `flags` argument."," *"," * @memberOf XRegExp"," * @param {Array} patterns Regexes and strings to combine."," * @param {String} [flags] Any combination of XRegExp flags."," * @param {Object} [options] Options object with optional properties:"," *   - `conjunction` {String} Type of conjunction to use: 'or' (default) or 'none'."," * @returns {RegExp} Union of the provided regexes and strings."," * @example"," *"," * XRegExp.union(['a+b*c', /(dogs)\\1/, /(cats)\\1/], 'i');"," * // -> /a\\+b\\*c|(dogs)\\1|(cats)\\2/i"," *"," * XRegExp.union([/man/, /bear/, /pig/], 'i', {conjunction: 'none'});"," * // -> /manbearpig/i"," */","XRegExp.union = function(patterns, flags, options) {","    options = options || {};","    var conjunction = options.conjunction || 'or';","    var numCaptures = 0;","    var numPriorCaptures;","    var captureNames;","","    function rewrite(match, paren, backref) {","        var name = captureNames[numCaptures - numPriorCaptures];","","        // Capturing group","        if (paren) {","            ++numCaptures;","            // If the current capture has a name, preserve the name","            if (name) {","                return '(?<' + name + '>';","            }","        // Backreference","        } else if (backref) {","            // Rewrite the backreference","            return '\\\\' + (+backref + numPriorCaptures);","        }","","        return match;","    }","","    if (!(isType(patterns, 'Array') && patterns.length)) {","        throw new TypeError('Must provide a nonempty array of patterns to merge');","    }","","    var parts = /(\\()(?!\\?)|\\\\([1-9]\\d*)|\\\\[\\s\\S]|\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/g;","    var output = [];","    var pattern;","    for (var i = 0; i < patterns.length; ++i) {","        pattern = patterns[i];","","        if (XRegExp.isRegExp(pattern)) {","            numPriorCaptures = numCaptures;","            captureNames = (pattern[REGEX_DATA] && pattern[REGEX_DATA].captureNames) || [];","","            // Rewrite backreferences. Passing to XRegExp dies on octals and ensures patterns are","            // independently valid; helps keep this simple. Named captures are put back","            output.push(nativ.replace.call(XRegExp(pattern.source).source, parts, rewrite));","        } else {","            output.push(XRegExp.escape(pattern));","        }","    }","","    var separator = conjunction === 'none' ? '' : '|';","    return XRegExp(output.join(separator), flags);","};","","// ==--------------------------==","// Fixed/extended native methods","// ==--------------------------==","","/**"," * Adds named capture support (with backreferences returned as `result.name`), and fixes browser"," * bugs in the native `RegExp.prototype.exec`. Calling `XRegExp.install('natives')` uses this to"," * override the native method. Use via `XRegExp.exec` without overriding natives."," *"," * @memberOf RegExp"," * @param {String} str String to search."," * @returns {Array} Match array with named backreference properties, or `null`."," */","fixed.exec = function(str) {","    var origLastIndex = this.lastIndex;","    var match = nativ.exec.apply(this, arguments);","    var name;","    var r2;","    var i;","","    if (match) {","        // Fix browsers whose `exec` methods don't return `undefined` for nonparticipating capturing","        // groups. This fixes IE 5.5-8, but not IE 9's quirks mode or emulation of older IEs. IE 9","        // in standards mode follows the spec.","        if (!correctExecNpcg && match.length > 1 && indexOf(match, '') > -1) {","            r2 = copyRegex(this, {","                removeG: true,","                isInternalOnly: true","            });","            // Using `str.slice(match.index)` rather than `match[0]` in case lookahead allowed","            // matching due to characters outside the match","            nativ.replace.call(String(str).slice(match.index), r2, function() {","                var len = arguments.length;","                var i;","                // Skip index 0 and the last 2","                for (i = 1; i < len - 2; ++i) {","                    if (arguments[i] === undefined) {","                        match[i] = undefined;","                    }","                }","            });","        }","","        // Attach named capture properties","        if (this[REGEX_DATA] && this[REGEX_DATA].captureNames) {","            // Skip index 0","            for (i = 1; i < match.length; ++i) {","                name = this[REGEX_DATA].captureNames[i - 1];","                if (name) {","                    match[name] = match[i];","                }","            }","        }","","        // Fix browsers that increment `lastIndex` after zero-length matches","        if (this.global && !match[0].length && (this.lastIndex > match.index)) {","            this.lastIndex = match.index;","        }","    }","","    if (!this.global) {","        // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)","        this.lastIndex = origLastIndex;","    }","","    return match;","};","","/**"," * Fixes browser bugs in the native `RegExp.prototype.test`. Calling `XRegExp.install('natives')`"," * uses this to override the native method."," *"," * @memberOf RegExp"," * @param {String} str String to search."," * @returns {Boolean} Whether the regex matched the provided value."," */","fixed.test = function(str) {","    // Do this the easy way :-)","    return !!fixed.exec.call(this, str);","};","","/**"," * Adds named capture support (with backreferences returned as `result.name`), and fixes browser"," * bugs in the native `String.prototype.match`. Calling `XRegExp.install('natives')` uses this to"," * override the native method."," *"," * @memberOf String"," * @param {RegExp|*} regex Regex to search with. If not a regex object, it is passed to `RegExp`."," * @returns {Array} If `regex` uses flag g, an array of match strings or `null`. Without flag g,"," *   the result of calling `regex.exec(this)`."," */","fixed.match = function(regex) {","    var result;","","    if (!XRegExp.isRegExp(regex)) {","        // Use the native `RegExp` rather than `XRegExp`","        regex = new RegExp(regex);","    } else if (regex.global) {","        result = nativ.match.apply(this, arguments);","        // Fixes IE bug","        regex.lastIndex = 0;","","        return result;","    }","","    return fixed.exec.call(regex, toObject(this));","};","","/**"," * Adds support for `${n}` tokens for named and numbered backreferences in replacement text, and"," * provides named backreferences to replacement functions as `arguments[0].name`. Also fixes browser"," * bugs in replacement text syntax when performing a replacement using a nonregex search value, and"," * the value of a replacement regex's `lastIndex` property during replacement iterations and upon"," * completion. Calling `XRegExp.install('natives')` uses this to override the native method. Note"," * that this doesn't support SpiderMonkey's proprietary third (`flags`) argument. Use via"," * `XRegExp.replace` without overriding natives."," *"," * @memberOf String"," * @param {RegExp|String} search Search pattern to be replaced."," * @param {String|Function} replacement Replacement string or a function invoked to create it."," * @returns {String} New string with one or all matches replaced."," */","fixed.replace = function(search, replacement) {","    var isRegex = XRegExp.isRegExp(search);","    var origLastIndex;","    var captureNames;","    var result;","","    if (isRegex) {","        if (search[REGEX_DATA]) {","            captureNames = search[REGEX_DATA].captureNames;","        }","        // Only needed if `search` is nonglobal","        origLastIndex = search.lastIndex;","    } else {","        search += ''; // Type-convert","    }","","    // Don't use `typeof`; some older browsers return 'function' for regex objects","    if (isType(replacement, 'Function')) {","        // Stringifying `this` fixes a bug in IE < 9 where the last argument in replacement","        // functions isn't type-converted to a string","        result = nativ.replace.call(String(this), search, function() {","            var args = arguments;","            var i;","            if (captureNames) {","                // Change the `arguments[0]` string primitive to a `String` object that can store","                // properties. This really does need to use `String` as a constructor","                args[0] = new String(args[0]);","                // Store named backreferences on the first argument","                for (i = 0; i < captureNames.length; ++i) {","                    if (captureNames[i]) {","                        args[0][captureNames[i]] = args[i + 1];","                    }","                }","            }","            // Update `lastIndex` before calling `replacement`. Fixes IE, Chrome, Firefox, Safari","            // bug (last tested IE 9, Chrome 17, Firefox 11, Safari 5.1)","            if (isRegex && search.global) {","                search.lastIndex = args[args.length - 2] + args[0].length;","            }","            // ES6 specs the context for replacement functions as `undefined`","            return replacement.apply(undefined, args);","        });","    } else {","        // Ensure that the last value of `args` will be a string when given nonstring `this`,","        // while still throwing on null or undefined context","        result = nativ.replace.call(this == null ? this : String(this), search, function() {","            // Keep this function's `arguments` available through closure","            var args = arguments;","            return nativ.replace.call(String(replacement), replacementToken, function($0, $1, $2) {","                var n;","                // Named or numbered backreference with curly braces","                if ($1) {","                    // XRegExp behavior for `${n}`:","                    // 1. Backreference to numbered capture, if `n` is an integer. Use `0` for the","                    //    entire match. Any number of leading zeros may be used.","                    // 2. Backreference to named capture `n`, if it exists and is not an integer","                    //    overridden by numbered capture. In practice, this does not overlap with","                    //    numbered capture since XRegExp does not allow named capture to use a bare","                    //    integer as the name.","                    // 3. If the name or number does not refer to an existing capturing group, it's","                    //    an error.","                    n = +$1; // Type-convert; drop leading zeros","                    if (n <= args.length - 3) {","                        return args[n] || '';","                    }","                    // Groups with the same name is an error, else would need `lastIndexOf`","                    n = captureNames ? indexOf(captureNames, $1) : -1;","                    if (n < 0) {","                        throw new SyntaxError('Backreference to undefined group ' + $0);","                    }","                    return args[n + 1] || '';","                }","                // Else, special variable or numbered backreference without curly braces","                if ($2 === '$') { // $$","                    return '$';","                }","                if ($2 === '&' || +$2 === 0) { // $&, $0 (not followed by 1-9), $00","                    return args[0];","                }","                if ($2 === '`') { // $` (left context)","                    return args[args.length - 1].slice(0, args[args.length - 2]);","                }","                if ($2 === \"'\") { // $' (right context)","                    return args[args.length - 1].slice(args[args.length - 2] + args[0].length);","                }","                // Else, numbered backreference without curly braces","                $2 = +$2; // Type-convert; drop leading zero","                // XRegExp behavior for `$n` and `$nn`:","                // - Backrefs end after 1 or 2 digits. Use `${..}` for more digits.","                // - `$1` is an error if no capturing groups.","                // - `$10` is an error if less than 10 capturing groups. Use `${1}0` instead.","                // - `$01` is `$1` if at least one capturing group, else it's an error.","                // - `$0` (not followed by 1-9) and `$00` are the entire match.","                // Native behavior, for comparison:","                // - Backrefs end after 1 or 2 digits. Cannot reference capturing group 100+.","                // - `$1` is a literal `$1` if no capturing groups.","                // - `$10` is `$1` followed by a literal `0` if less than 10 capturing groups.","                // - `$01` is `$1` if at least one capturing group, else it's a literal `$01`.","                // - `$0` is a literal `$0`.","                if (!isNaN($2)) {","                    if ($2 > args.length - 3) {","                        throw new SyntaxError('Backreference to undefined group ' + $0);","                    }","                    return args[$2] || '';","                }","                // `$` followed by an unsupported char is an error, unlike native JS","                throw new SyntaxError('Invalid token ' + $0);","            });","        });","    }","","    if (isRegex) {","        if (search.global) {","            // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)","            search.lastIndex = 0;","        } else {","            // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)","            search.lastIndex = origLastIndex;","        }","    }","","    return result;","};","","/**"," * Fixes browser bugs in the native `String.prototype.split`. Calling `XRegExp.install('natives')`"," * uses this to override the native method. Use via `XRegExp.split` without overriding natives."," *"," * @memberOf String"," * @param {RegExp|String} separator Regex or string to use for separating the string."," * @param {Number} [limit] Maximum number of items to include in the result array."," * @returns {Array} Array of substrings."," */","fixed.split = function(separator, limit) {","    if (!XRegExp.isRegExp(separator)) {","        // Browsers handle nonregex split correctly, so use the faster native method","        return nativ.split.apply(this, arguments);","    }","","    var str = String(this);","    var output = [];","    var origLastIndex = separator.lastIndex;","    var lastLastIndex = 0;","    var lastLength;","","    // Values for `limit`, per the spec:","    // If undefined: pow(2,32) - 1","    // If 0, Infinity, or NaN: 0","    // If positive number: limit = floor(limit); if (limit >= pow(2,32)) limit -= pow(2,32);","    // If negative number: pow(2,32) - floor(abs(limit))","    // If other: Type-convert, then use the above rules","    // This line fails in very strange ways for some values of `limit` in Opera 10.5-10.63, unless","    // Opera Dragonfly is open (go figure). It works in at least Opera 9.5-10.1 and 11+","    limit = (limit === undefined ? -1 : limit) >>> 0;","","    XRegExp.forEach(str, separator, function(match) {","        // This condition is not the same as `if (match[0].length)`","        if ((match.index + match[0].length) > lastLastIndex) {","            output.push(str.slice(lastLastIndex, match.index));","            if (match.length > 1 && match.index < str.length) {","                Array.prototype.push.apply(output, match.slice(1));","            }","            lastLength = match[0].length;","            lastLastIndex = match.index + lastLength;","        }","    });","","    if (lastLastIndex === str.length) {","        if (!nativ.test.call(separator, '') || lastLength) {","            output.push('');","        }","    } else {","        output.push(str.slice(lastLastIndex));","    }","","    separator.lastIndex = origLastIndex;","    return output.length > limit ? output.slice(0, limit) : output;","};","","// ==--------------------------==","// Built-in syntax/flag tokens","// ==--------------------------==","","/*"," * Letter escapes that natively match literal characters: `\\a`, `\\A`, etc. These should be"," * SyntaxErrors but are allowed in web reality. XRegExp makes them errors for cross-browser"," * consistency and to reserve their syntax, but lets them be superseded by addons."," */","XRegExp.addToken(","    /\\\\([ABCE-RTUVXYZaeg-mopqyz]|c(?![A-Za-z])|u(?![\\dA-Fa-f]{4}|{[\\dA-Fa-f]+})|x(?![\\dA-Fa-f]{2}))/,","    function(match, scope) {","        // \\B is allowed in default scope only","        if (match[1] === 'B' && scope === defaultScope) {","            return match[0];","        }","        throw new SyntaxError('Invalid escape ' + match[0]);","    },","    {","        scope: 'all',","        leadChar: '\\\\'","    }",");","","/*"," * Unicode code point escape with curly braces: `\\u{N..}`. `N..` is any one or more digit"," * hexadecimal number from 0-10FFFF, and can include leading zeros. Requires the native ES6 `u` flag"," * to support code points greater than U+FFFF. Avoids converting code points above U+FFFF to"," * surrogate pairs (which could be done without flag `u`), since that could lead to broken behavior"," * if you follow a `\\u{N..}` token that references a code point above U+FFFF with a quantifier, or"," * if you use the same in a character class."," */","XRegExp.addToken(","    /\\\\u{([\\dA-Fa-f]+)}/,","    function(match, scope, flags) {","        var code = dec(match[1]);","        if (code > 0x10FFFF) {","            throw new SyntaxError('Invalid Unicode code point ' + match[0]);","        }","        if (code <= 0xFFFF) {","            // Converting to \\uNNNN avoids needing to escape the literal character and keep it","            // separate from preceding tokens","            return '\\\\u' + pad4(hex(code));","        }","        // If `code` is between 0xFFFF and 0x10FFFF, require and defer to native handling","        if (hasNativeU && flags.indexOf('u') > -1) {","            return match[0];","        }","        throw new SyntaxError('Cannot use Unicode code point above \\\\u{FFFF} without flag u');","    },","    {","        scope: 'all',","        leadChar: '\\\\'","    }",");","","/*"," * Empty character class: `[]` or `[^]`. This fixes a critical cross-browser syntax inconsistency."," * Unless this is standardized (per the ES spec), regex syntax can't be accurately parsed because"," * character class endings can't be determined."," */","XRegExp.addToken(","    /\\[(\\^?)\\]/,","    function(match) {","        // For cross-browser compatibility with ES3, convert [] to \\b\\B and [^] to [\\s\\S].","        // (?!) should work like \\b\\B, but is unreliable in some versions of Firefox","        return match[1] ? '[\\\\s\\\\S]' : '\\\\b\\\\B';","    },","    {leadChar: '['}",");","","/*"," * Comment pattern: `(?# )`. Inline comments are an alternative to the line comments allowed in"," * free-spacing mode (flag x)."," */","XRegExp.addToken(","    /\\(\\?#[^)]*\\)/,","    getContextualTokenSeparator,","    {leadChar: '('}",");","","/*"," * Whitespace and line comments, in free-spacing mode (aka extended mode, flag x) only."," */","XRegExp.addToken(","    /\\s+|#[^\\n]*\\n?/,","    getContextualTokenSeparator,","    {flag: 'x'}",");","","/*"," * Dot, in dotall mode (aka singleline mode, flag s) only."," */","XRegExp.addToken(","    /\\./,","    function() {","        return '[\\\\s\\\\S]';","    },","    {","        flag: 's',","        leadChar: '.'","    }",");","","/*"," * Named backreference: `\\k<name>`. Backreference names can use the characters A-Z, a-z, 0-9, _,"," * and $ only. Also allows numbered backreferences as `\\k<n>`."," */","XRegExp.addToken(","    /\\\\k<([\\w$]+)>/,","    function(match) {","        // Groups with the same name is an error, else would need `lastIndexOf`","        var index = isNaN(match[1]) ? (indexOf(this.captureNames, match[1]) + 1) : +match[1];","        var endIndex = match.index + match[0].length;","        if (!index || index > this.captureNames.length) {","            throw new SyntaxError('Backreference to undefined group ' + match[0]);","        }","        // Keep backreferences separate from subsequent literal numbers. This avoids e.g.","        // inadvertedly changing `(?<n>)\\k<n>1` to `()\\11`.","        return '\\\\' + index + (","            endIndex === match.input.length || isNaN(match.input.charAt(endIndex)) ?","                '' : '(?:)'","        );","    },","    {leadChar: '\\\\'}",");","","/*"," * Numbered backreference or octal, plus any following digits: `\\0`, `\\11`, etc. Octals except `\\0`"," * not followed by 0-9 and backreferences to unopened capture groups throw an error. Other matches"," * are returned unaltered. IE < 9 doesn't support backreferences above `\\99` in regex syntax."," */","XRegExp.addToken(","    /\\\\(\\d+)/,","    function(match, scope) {","        if (","            !(","                scope === defaultScope &&","                /^[1-9]/.test(match[1]) &&","                +match[1] <= this.captureNames.length","            ) &&","            match[1] !== '0'","        ) {","            throw new SyntaxError('Cannot use octal escape or backreference to undefined group ' +","                match[0]);","        }","        return match[0];","    },","    {","        scope: 'all',","        leadChar: '\\\\'","    }",");","","/*"," * Named capturing group; match the opening delimiter only: `(?<name>`. Capture names can use the"," * characters A-Z, a-z, 0-9, _, and $ only. Names can't be integers. Supports Python-style"," * `(?P<name>` as an alternate syntax to avoid issues in some older versions of Opera which natively"," * supported the Python-style syntax. Otherwise, XRegExp might treat numbered backreferences to"," * Python-style named capture as octals."," */","XRegExp.addToken(","    /\\(\\?P?<([\\w$]+)>/,","    function(match) {","        // Disallow bare integers as names because named backreferences are added to match arrays","        // and therefore numeric properties may lead to incorrect lookups","        if (!isNaN(match[1])) {","            throw new SyntaxError('Cannot use integer as capture name ' + match[0]);","        }","        if (match[1] === 'length' || match[1] === '__proto__') {","            throw new SyntaxError('Cannot use reserved word as capture name ' + match[0]);","        }","        if (indexOf(this.captureNames, match[1]) > -1) {","            throw new SyntaxError('Cannot use same name for multiple groups ' + match[0]);","        }","        this.captureNames.push(match[1]);","        this.hasNamedCapture = true;","        return '(';","    },","    {leadChar: '('}",");","","/*"," * Capturing group; match the opening parenthesis only. Required for support of named capturing"," * groups. Also adds explicit capture mode (flag n)."," */","XRegExp.addToken(","    /\\((?!\\?)/,","    function(match, scope, flags) {","        if (flags.indexOf('n') > -1) {","            return '(?:';","        }","        this.captureNames.push(null);","        return '(';","    },","    {","        optionalFlags: 'n',","        leadChar: '('","    }",");","","module.exports = XRegExp;","","},{}]},{},[8])(8)","});"],"l":{"1":10,"9":1,"12":1,"13":1,"14":1,"25":1,"28":0,"29":0,"31":0,"37":0,"40":0,"52":1,"53":0,"54":0,"90":1,"91":0,"95":0,"96":0,"98":0,"99":0,"102":0,"103":0,"104":0,"109":0,"110":0,"121":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"135":0,"136":0,"137":0,"140":0,"141":0,"142":0,"145":0,"147":0,"149":0,"150":0,"152":0,"153":0,"154":0,"156":0,"157":0,"160":0,"161":0,"163":0,"168":0,"172":0,"173":0,"174":0,"176":0,"177":0,"180":0,"181":0,"183":0,"188":0,"191":0,"203":1,"211":1,"212":0,"270":1,"271":0,"272":0,"273":0,"274":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"292":0,"293":0,"294":0,"296":0,"302":0,"315":0,"318":0,"319":0,"321":0,"322":0,"324":0,"325":0,"326":0,"328":0,"341":0,"342":0,"343":0,"344":0,"345":0,"347":0,"348":0,"350":0,"351":0,"352":0,"353":0,"355":0,"356":0,"357":0,"358":0,"359":0,"360":0,"362":0,"363":0,"365":0,"366":0,"368":0,"369":0,"372":0,"374":0,"375":0,"376":0,"380":0,"383":0,"384":0,"388":0,"389":0,"392":0,"404":1,"426":1,"429":1,"430":1,"431":1,"434":1,"435":493,"439":1,"440":0,"441":0,"447":1,"448":0,"449":0,"451":0,"455":0,"456":0,"457":0,"458":0,"459":0,"462":0,"466":0,"467":0,"468":0,"469":0,"473":0,"477":1,"478":0,"479":0,"486":1,"487":0,"488":0,"490":0,"491":0,"493":0,"494":0,"496":0,"497":0,"501":0,"507":1,"508":0,"509":0,"522":1,"526":0,"527":0,"528":0,"529":0,"530":0,"532":0,"534":0,"536":0,"538":0,"540":0,"541":0,"543":0,"544":0,"548":0,"549":0,"550":0,"551":0,"553":0,"554":0,"557":0,"558":0,"560":0,"561":0,"562":0,"565":0,"568":0,"607":1,"608":4,"609":4,"610":4,"612":4,"613":456,"614":456,"615":0,"617":456,"618":0,"620":456,"621":456,"622":37,"628":4,"652":1,"653":0,"654":0,"667":1,"680":1,"681":0,"684":1,"1789":1,"1802":1,"1803":0,"1806":1,"2027":1,"2069":1,"2070":0,"2073":1,"2116":1,"2123":1,"2135":1,"2147":1,"2148":0,"2151":1,"2716":1,"2718":1,"2719":1,"2720":1,"2721":1,"2722":1,"2723":1,"2724":1,"2726":1,"2749":1,"2751":1,"2756":1,"2764":1,"2766":1,"2768":1,"2770":1,"2772":1,"2773":1,"2775":1,"2782":1,"2784":1,"2786":1,"2788":1,"2790":1,"2795":2,"2796":2,"2799":2,"2801":0,"2803":2,"2806":1,"2808":1,"2810":1,"2831":1,"2832":24,"2834":24,"2838":24,"2839":21,"2843":3,"2844":3,"2846":0,"2850":0,"2854":3,"2856":3,"2858":3,"2868":1,"2869":24,"2890":1,"2891":21,"2892":0,"2895":21,"2896":21,"2897":21,"2898":21,"2899":21,"2900":21,"2902":21,"2904":21,"2905":21,"2906":21,"2907":0,"2910":21,"2911":21,"2912":21,"2913":21,"2916":21,"2917":0,"2918":0,"2922":0,"2925":0,"2933":21,"2941":21,"2951":1,"2952":0,"2966":1,"2967":0,"2974":0,"2979":0,"2989":1,"2990":21,"3005":1,"3006":21,"3016":1,"3017":0,"3028":1,"3029":0,"3030":0,"3032":0,"3033":0,"3034":0,"3038":0,"3052":1,"3053":0,"3054":0,"3055":0,"3060":0,"3074":1,"3075":1,"3085":1,"3086":0,"3087":0,"3089":0,"3101":1,"3102":3,"3105":3,"3106":0,"3110":3,"3111":0,"3112":0,"3115":0,"3116":0,"3120":3,"3121":1,"3122":0,"3126":3,"3139":1,"3140":0,"3142":0,"3143":0,"3144":0,"3147":0,"3150":0,"3159":1,"3160":4,"3161":0,"3164":4,"3179":1,"3180":131,"3181":131,"3182":131,"3183":131,"3184":131,"3187":131,"3188":1238,"3189":1238,"3194":1078,"3197":160,"3198":160,"3199":8,"3205":8,"3209":131,"3220":1,"3221":0,"3230":1,"3231":0,"3232":0,"3233":0,"3234":0,"3235":0,"3237":0,"3248":1,"3250":0,"3251":0,"3254":0,"3295":1,"3296":3,"3297":0,"3298":0,"3300":0,"3304":3,"3305":3,"3307":3,"3309":0,"3312":3,"3313":3,"3316":3,"3317":3,"3321":3,"3322":3,"3323":3,"3324":3,"3327":3,"3328":3,"3329":3,"3333":3,"3334":131,"3336":131,"3339":131,"3340":0,"3346":131,"3347":8,"3348":8,"3351":123,"3352":123,"3353":123,"3354":123,"3355":12,"3356":111,"3357":12,"3362":3,"3374":3,"3375":3,"3384":1,"3398":1,"3405":1,"3406":1,"3407":1,"3408":1,"3409":1,"3460":1,"3461":11,"3462":11,"3463":11,"3465":11,"3466":2,"3469":11,"3470":2,"3471":2,"3472":2,"3477":11,"3492":11,"3509":1,"3510":0,"3511":0,"3513":0,"3519":1,"3520":15,"3522":15,"3525":0,"3541":1,"3542":0,"3574":1,"3575":283,"3576":283,"3577":283,"3578":283,"3579":283,"3581":283,"3582":283,"3583":283,"3584":0,"3590":0,"3591":0,"3594":283,"3597":283,"3607":283,"3608":283,"3611":283,"3615":283,"3616":0,"3619":283,"3620":160,"3623":283,"3648":1,"3649":0,"3650":0,"3651":0,"3653":0,"3660":0,"3662":0,"3679":1,"3680":0,"3703":1,"3704":0,"3706":0,"3707":0,"3710":0,"3711":0,"3727":1,"3728":3,"3745":1,"3746":26,"3777":1,"3778":0,"3779":0,"3780":0,"3781":0,"3783":0,"3786":0,"3794":0,"3796":0,"3797":0,"3804":0,"3835":1,"3836":0,"3837":0,"3838":0,"3840":1,"3841":0,"3847":0,"3848":0,"3851":0,"3853":0,"3857":0,"3858":0,"3861":0,"3914":1,"3915":0,"3916":0,"3917":0,"3918":0,"3919":0,"3921":0,"3922":0,"3926":0,"3933":0,"3934":0,"3938":0,"3940":0,"3942":0,"3945":0,"3972":1,"3973":0,"3974":0,"3976":0,"3977":0,"3978":0,"3981":0,"4010":1,"4011":0,"4037":1,"4039":0,"4062":1,"4063":0,"4065":0,"4066":0,"4069":0,"4070":0,"4095":1,"4096":1,"4097":1,"4098":1,"4099":1,"4100":1,"4102":1,"4103":20,"4106":20,"4107":4,"4109":4,"4110":0,"4113":16,"4115":0,"4118":20,"4121":1,"4122":0,"4125":1,"4126":1,"4127":1,"4128":1,"4129":2,"4131":2,"4132":2,"4133":2,"4137":2,"4139":0,"4143":1,"4144":1,"4160":1,"4161":283,"4162":283,"4163":283,"4164":283,"4165":283,"4167":283,"4171":131,"4172":0,"4178":0,"4179":0,"4180":0,"4182":0,"4183":0,"4184":0,"4191":131,"4193":0,"4194":0,"4195":0,"4196":0,"4202":131,"4203":0,"4207":283,"4209":0,"4212":283,"4223":1,"4225":0,"4238":1,"4239":0,"4241":0,"4243":0,"4244":0,"4245":0,"4247":0,"4249":0,"4252":0,"4269":1,"4270":0,"4271":0,"4272":0,"4273":0,"4275":0,"4276":0,"4277":0,"4280":0,"4282":0,"4286":0,"4289":0,"4290":0,"4291":0,"4292":0,"4295":0,"4297":0,"4298":0,"4299":0,"4305":0,"4306":0,"4309":0,"4314":0,"4316":0,"4317":0,"4318":0,"4320":0,"4330":0,"4331":0,"4332":0,"4335":0,"4336":0,"4337":0,"4339":0,"4342":0,"4343":0,"4345":0,"4346":0,"4348":0,"4349":0,"4351":0,"4352":0,"4355":0,"4368":0,"4369":0,"4370":0,"4372":0,"4375":0,"4380":0,"4381":0,"4383":0,"4386":0,"4390":0,"4402":1,"4403":0,"4405":0,"4408":0,"4409":0,"4410":0,"4411":0,"4412":0,"4422":0,"4424":0,"4426":0,"4427":0,"4428":0,"4429":0,"4431":0,"4432":0,"4436":0,"4437":0,"4438":0,"4441":0,"4444":0,"4445":0,"4457":1,"4461":0,"4462":0,"4464":0,"4480":1,"4483":0,"4484":0,"4485":0,"4487":0,"4490":0,"4493":0,"4494":0,"4496":0,"4509":1,"4514":0,"4523":1,"4532":1,"4541":1,"4544":0,"4556":1,"4560":0,"4561":0,"4562":0,"4563":0,"4567":0,"4580":1,"4583":0,"4591":0,"4594":0,"4609":1,"4614":0,"4615":0,"4617":0,"4618":0,"4620":0,"4621":0,"4623":0,"4624":0,"4625":0,"4634":1,"4637":8,"4638":0,"4640":8,"4641":8,"4649":1}},"/home/travis/build/npmtest/node-npmtest-xregexp/node_modules/xregexp/src/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-xregexp/node_modules/xregexp/src/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":35}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":35}},"3":{"start":{"line":4,"column":0},"end":{"line":4,"column":44}},"4":{"start":{"line":5,"column":0},"end":{"line":5,"column":42}},"5":{"start":{"line":6,"column":0},"end":{"line":6,"column":44}},"6":{"start":{"line":7,"column":0},"end":{"line":7,"column":48}},"7":{"start":{"line":8,"column":0},"end":{"line":8,"column":48}},"8":{"start":{"line":9,"column":0},"end":{"line":9,"column":45}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":25}}},"branchMap":{},"code":["var XRegExp = require('./xregexp');","","require('./addons/build')(XRegExp);","require('./addons/matchrecursive')(XRegExp);","require('./addons/unicode-base')(XRegExp);","require('./addons/unicode-blocks')(XRegExp);","require('./addons/unicode-categories')(XRegExp);","require('./addons/unicode-properties')(XRegExp);","require('./addons/unicode-scripts')(XRegExp);","","module.exports = XRegExp;",""],"l":{"1":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"11":1}},"/home/travis/build/npmtest/node-npmtest-xregexp/node_modules/xregexp/src/xregexp.js":{"path":"/home/travis/build/npmtest/node-npmtest-xregexp/node_modules/xregexp/src/xregexp.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":2,"17":2,"18":2,"19":0,"20":2,"21":1,"22":1,"23":1,"24":1,"25":24,"26":24,"27":24,"28":21,"29":3,"30":3,"31":0,"32":0,"33":3,"34":3,"35":3,"36":1,"37":24,"38":1,"39":21,"40":0,"41":21,"42":21,"43":21,"44":21,"45":21,"46":21,"47":21,"48":21,"49":0,"50":21,"51":0,"52":21,"53":0,"54":21,"55":21,"56":21,"57":21,"58":21,"59":21,"60":21,"61":0,"62":0,"63":0,"64":0,"65":21,"66":21,"67":1,"68":0,"69":1,"70":0,"71":0,"72":0,"73":1,"74":21,"75":1,"76":21,"77":1,"78":0,"79":1,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":1,"87":0,"88":0,"89":0,"90":0,"91":1,"92":1,"93":1,"94":0,"95":0,"96":0,"97":1,"98":3,"99":3,"100":0,"101":3,"102":0,"103":0,"104":0,"105":0,"106":3,"107":1,"108":0,"109":3,"110":1,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":1,"118":4,"119":0,"120":4,"121":1,"122":131,"123":131,"124":131,"125":131,"126":131,"127":131,"128":1238,"129":1238,"130":1078,"131":160,"132":160,"133":8,"134":8,"135":131,"136":1,"137":0,"138":1,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":1,"146":0,"147":0,"148":0,"149":1,"150":3,"151":0,"152":0,"153":0,"154":3,"155":3,"156":3,"157":0,"158":3,"159":3,"160":3,"161":3,"162":3,"163":3,"164":3,"165":3,"166":3,"167":3,"168":3,"169":3,"170":131,"171":131,"172":131,"173":0,"174":131,"175":8,"176":8,"177":123,"178":123,"179":123,"180":123,"181":12,"182":111,"183":12,"184":3,"185":3,"186":3,"187":1,"188":1,"189":1,"190":1,"191":1,"192":1,"193":1,"194":1,"195":11,"196":11,"197":11,"198":11,"199":2,"200":11,"201":2,"202":2,"203":2,"204":11,"205":11,"206":1,"207":0,"208":0,"209":0,"210":1,"211":15,"212":15,"213":0,"214":1,"215":0,"216":1,"217":283,"218":283,"219":283,"220":283,"221":283,"222":283,"223":283,"224":283,"225":0,"226":0,"227":0,"228":283,"229":283,"230":283,"231":283,"232":283,"233":283,"234":0,"235":283,"236":160,"237":283,"238":1,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":1,"246":0,"247":1,"248":0,"249":0,"250":0,"251":0,"252":0,"253":1,"254":3,"255":1,"256":26,"257":1,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":1,"269":0,"270":0,"271":0,"272":1,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":1,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":1,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":1,"304":0,"305":1,"306":0,"307":1,"308":0,"309":0,"310":0,"311":0,"312":0,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"319":1,"320":20,"321":20,"322":4,"323":4,"324":0,"325":16,"326":0,"327":20,"328":1,"329":0,"330":1,"331":1,"332":1,"333":1,"334":2,"335":2,"336":2,"337":2,"338":2,"339":0,"340":1,"341":1,"342":1,"343":283,"344":283,"345":283,"346":283,"347":283,"348":283,"349":131,"350":0,"351":0,"352":0,"353":0,"354":0,"355":0,"356":0,"357":131,"358":0,"359":0,"360":0,"361":0,"362":131,"363":0,"364":283,"365":0,"366":283,"367":1,"368":0,"369":1,"370":0,"371":0,"372":0,"373":0,"374":0,"375":0,"376":0,"377":0,"378":1,"379":0,"380":0,"381":0,"382":0,"383":0,"384":0,"385":0,"386":0,"387":0,"388":0,"389":0,"390":0,"391":0,"392":0,"393":0,"394":0,"395":0,"396":0,"397":0,"398":0,"399":0,"400":0,"401":0,"402":0,"403":0,"404":0,"405":0,"406":0,"407":0,"408":0,"409":0,"410":0,"411":0,"412":0,"413":0,"414":0,"415":0,"416":0,"417":0,"418":0,"419":0,"420":0,"421":0,"422":0,"423":0,"424":0,"425":0,"426":0,"427":0,"428":0,"429":0,"430":0,"431":1,"432":0,"433":0,"434":0,"435":0,"436":0,"437":0,"438":0,"439":0,"440":0,"441":0,"442":0,"443":0,"444":0,"445":0,"446":0,"447":0,"448":0,"449":0,"450":0,"451":0,"452":0,"453":1,"454":0,"455":0,"456":0,"457":1,"458":0,"459":0,"460":0,"461":0,"462":0,"463":0,"464":0,"465":0,"466":1,"467":0,"468":1,"469":1,"470":1,"471":0,"472":1,"473":0,"474":0,"475":0,"476":0,"477":0,"478":1,"479":0,"480":0,"481":0,"482":1,"483":0,"484":0,"485":0,"486":0,"487":0,"488":0,"489":0,"490":0,"491":0,"492":1,"493":8,"494":0,"495":8,"496":8,"497":1},"b":{"1":[21,3],"2":[3,0],"3":[1,2],"4":[0,21],"5":[21,11],"6":[21,0],"7":[0,21],"8":[0,21],"9":[0,21],"10":[21,0],"11":[21,0],"12":[21,0],"13":[0,21],"14":[0,0],"15":[0,0],"16":[0,0],"17":[21,21],"18":[0,21],"19":[0,0],"20":[0,0,0],"21":[21,0],"22":[21,10],"23":[0,0],"24":[0,0],"25":[0,3],"26":[0,0],"27":[0,1],"28":[0,0],"29":[0,4],"30":[1078,160],"31":[1238,1115,299,164,243,83],"32":[8,152],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,3],"40":[0,0],"41":[0,3],"42":[2,1],"43":[0,3],"44":[3,0],"45":[3,0],"46":[3,0],"47":[0,131],"48":[131,8],"49":[131,8],"50":[8,123],"51":[8,0],"52":[12,111],"53":[123,12],"54":[12,99],"55":[111,12],"56":[0,3],"57":[11,0],"58":[2,9],"59":[2,9],"60":[11,7],"61":[0,0],"62":[0,0],"63":[15,0],"64":[283,283],"65":[283,0,0],"66":[283,0],"67":[0,0],"68":[283,2],"69":[283,10],"70":[0,10],"71":[283,11],"72":[0,283],"73":[283,0,0],"74":[160,123],"75":[8,152],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,0,0],"82":[0,0],"83":[0,0],"84":[0,0],"85":[0,0],"86":[0,0],"87":[0,0],"88":[0,0],"89":[0,0],"90":[0,0],"91":[0,0],"92":[0,0],"93":[0,0],"94":[0,0],"95":[0,0],"96":[0,0],"97":[0,0],"98":[0,0],"99":[0,0],"100":[0,0,0],"101":[0,0],"102":[0,0],"103":[0,0],"104":[0,0],"105":[0,0],"106":[0,0],"107":[0,0],"108":[0,0],"109":[0,0],"110":[0,0],"111":[0,0],"112":[0,0],"113":[0,0],"114":[1,0],"115":[1,0],"116":[4,16],"117":[0,4],"118":[0,16],"119":[0,1],"120":[1,1],"121":[2,0],"122":[2,0,2],"123":[0,1],"124":[131,152],"125":[0,131],"126":[131,0,0],"127":[0,0],"128":[0,131],"129":[131,131],"130":[0,0],"131":[0,131],"132":[131,131,0],"133":[0,283],"134":[0,0],"135":[0,0],"136":[0,0],"137":[0,0],"138":[0,0],"139":[0,0],"140":[0,0],"141":[0,0],"142":[0,0],"143":[0,0],"144":[0,0],"145":[0,0],"146":[0,0],"147":[0,0],"148":[0,0],"149":[0,0],"150":[0,0],"151":[0,0],"152":[0,0],"153":[0,0],"154":[0,0],"155":[0,0],"156":[0,0],"157":[0,0],"158":[0,0],"159":[0,0],"160":[0,0],"161":[0,0],"162":[0,0],"163":[0,0],"164":[0,0],"165":[0,0],"166":[0,0],"167":[0,0],"168":[0,0],"169":[0,0],"170":[0,0],"171":[0,0],"172":[0,0],"173":[0,0],"174":[0,0],"175":[0,0],"176":[0,0],"177":[0,0],"178":[0,0],"179":[0,0],"180":[0,0],"181":[0,0],"182":[0,0],"183":[0,0,0],"184":[0,0],"185":[0,0],"186":[0,0],"187":[0,0],"188":[0,8]},"f":{"1":2,"2":24,"3":24,"4":21,"5":0,"6":0,"7":21,"8":21,"9":0,"10":0,"11":0,"12":1,"13":0,"14":3,"15":0,"16":0,"17":0,"18":4,"19":131,"20":0,"21":0,"22":0,"23":3,"24":11,"25":0,"26":15,"27":0,"28":283,"29":0,"30":0,"31":0,"32":3,"33":26,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":1,"44":20,"45":283,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":8},"fnMap":{"1":{"name":"hasNativeFlag","line":62,"loc":{"start":{"line":62,"column":0},"end":{"line":62,"column":29}}},"2":{"name":"augment","line":103,"loc":{"start":{"line":103,"column":0},"end":{"line":103,"column":71}}},"3":{"name":"clipDuplicates","line":140,"loc":{"start":{"line":140,"column":0},"end":{"line":140,"column":29}}},"4":{"name":"copyRegex","line":162,"loc":{"start":{"line":162,"column":0},"end":{"line":162,"column":35}}},"5":{"name":"dec","line":223,"loc":{"start":{"line":223,"column":0},"end":{"line":223,"column":18}}},"6":{"name":"getContextualTokenSeparator","line":238,"loc":{"start":{"line":238,"column":0},"end":{"line":238,"column":58}}},"7":{"name":"getNativeFlags","line":261,"loc":{"start":{"line":261,"column":0},"end":{"line":261,"column":31}}},"8":{"name":"hasNamedCapture","line":277,"loc":{"start":{"line":277,"column":0},"end":{"line":277,"column":32}}},"9":{"name":"hex","line":288,"loc":{"start":{"line":288,"column":0},"end":{"line":288,"column":18}}},"10":{"name":"indexOf","line":300,"loc":{"start":{"line":300,"column":0},"end":{"line":300,"column":31}}},"11":{"name":"isPatternNext","line":324,"loc":{"start":{"line":324,"column":0},"end":{"line":324,"column":59}}},"12":{"name":"isType","line":346,"loc":{"start":{"line":346,"column":0},"end":{"line":346,"column":29}}},"13":{"name":"pad4","line":357,"loc":{"start":{"line":357,"column":0},"end":{"line":357,"column":19}}},"14":{"name":"prepareFlags","line":373,"loc":{"start":{"line":373,"column":0},"end":{"line":373,"column":38}}},"15":{"name":"(anonymous_15)","line":382,"loc":{"start":{"line":382,"column":61},"end":{"line":382,"column":78}}},"16":{"name":"prepareOptions","line":411,"loc":{"start":{"line":411,"column":0},"end":{"line":411,"column":31}}},"17":{"name":"(anonymous_17)","line":415,"loc":{"start":{"line":415,"column":42},"end":{"line":415,"column":58}}},"18":{"name":"registerFlag","line":431,"loc":{"start":{"line":431,"column":0},"end":{"line":431,"column":28}}},"19":{"name":"runTokens","line":451,"loc":{"start":{"line":451,"column":0},"end":{"line":451,"column":56}}},"20":{"name":"setAstral","line":492,"loc":{"start":{"line":492,"column":0},"end":{"line":492,"column":23}}},"21":{"name":"setNatives","line":502,"loc":{"start":{"line":502,"column":0},"end":{"line":502,"column":24}}},"22":{"name":"toObject","line":520,"loc":{"start":{"line":520,"column":0},"end":{"line":520,"column":25}}},"23":{"name":"XRegExp","line":567,"loc":{"start":{"line":567,"column":0},"end":{"line":567,"column":33}}},"24":{"name":"(anonymous_24)","line":732,"loc":{"start":{"line":732,"column":19},"end":{"line":732,"column":53}}},"25":{"name":"(anonymous_25)","line":781,"loc":{"start":{"line":781,"column":16},"end":{"line":781,"column":41}}},"26":{"name":"(anonymous_26)","line":791,"loc":{"start":{"line":791,"column":22},"end":{"line":791,"column":42}}},"27":{"name":"(anonymous_27)","line":813,"loc":{"start":{"line":813,"column":17},"end":{"line":813,"column":31}}},"28":{"name":"(anonymous_28)","line":846,"loc":{"start":{"line":846,"column":15},"end":{"line":846,"column":49}}},"29":{"name":"(anonymous_29)","line":920,"loc":{"start":{"line":920,"column":18},"end":{"line":920,"column":49}}},"30":{"name":"(anonymous_30)","line":951,"loc":{"start":{"line":951,"column":20},"end":{"line":951,"column":36}}},"31":{"name":"(anonymous_31)","line":975,"loc":{"start":{"line":975,"column":18},"end":{"line":975,"column":36}}},"32":{"name":"(anonymous_32)","line":999,"loc":{"start":{"line":999,"column":22},"end":{"line":999,"column":40}}},"33":{"name":"(anonymous_33)","line":1017,"loc":{"start":{"line":1017,"column":19},"end":{"line":1017,"column":35}}},"34":{"name":"(anonymous_34)","line":1049,"loc":{"start":{"line":1049,"column":16},"end":{"line":1049,"column":44}}},"35":{"name":"(anonymous_35)","line":1107,"loc":{"start":{"line":1107,"column":21},"end":{"line":1107,"column":42}}},"36":{"name":"recurseChain","line":1108,"loc":{"start":{"line":1108,"column":12},"end":{"line":1108,"column":49}}},"37":{"name":"addMatch","line":1112,"loc":{"start":{"line":1112,"column":8},"end":{"line":1112,"column":33}}},"38":{"name":"(anonymous_38)","line":1186,"loc":{"start":{"line":1186,"column":18},"end":{"line":1186,"column":60}}},"39":{"name":"(anonymous_39)","line":1244,"loc":{"start":{"line":1244,"column":22},"end":{"line":1244,"column":50}}},"40":{"name":"(anonymous_40)","line":1282,"loc":{"start":{"line":1282,"column":16},"end":{"line":1282,"column":48}}},"41":{"name":"(anonymous_41)","line":1309,"loc":{"start":{"line":1309,"column":15},"end":{"line":1309,"column":49}}},"42":{"name":"(anonymous_42)","line":1334,"loc":{"start":{"line":1334,"column":20},"end":{"line":1334,"column":38}}},"43":{"name":"(anonymous_43)","line":1367,"loc":{"start":{"line":1367,"column":16},"end":{"line":1367,"column":51}}},"44":{"name":"rewrite","line":1374,"loc":{"start":{"line":1374,"column":4},"end":{"line":1374,"column":44}}},"45":{"name":"(anonymous_45)","line":1432,"loc":{"start":{"line":1432,"column":13},"end":{"line":1432,"column":27}}},"46":{"name":"(anonymous_46)","line":1450,"loc":{"start":{"line":1450,"column":67},"end":{"line":1450,"column":78}}},"47":{"name":"(anonymous_47)","line":1495,"loc":{"start":{"line":1495,"column":13},"end":{"line":1495,"column":27}}},"48":{"name":"(anonymous_48)","line":1510,"loc":{"start":{"line":1510,"column":14},"end":{"line":1510,"column":30}}},"49":{"name":"(anonymous_49)","line":1541,"loc":{"start":{"line":1541,"column":16},"end":{"line":1541,"column":46}}},"50":{"name":"(anonymous_50)","line":1561,"loc":{"start":{"line":1561,"column":58},"end":{"line":1561,"column":69}}},"51":{"name":"(anonymous_51)","line":1586,"loc":{"start":{"line":1586,"column":80},"end":{"line":1586,"column":91}}},"52":{"name":"(anonymous_52)","line":1589,"loc":{"start":{"line":1589,"column":77},"end":{"line":1589,"column":98}}},"53":{"name":"(anonymous_53)","line":1674,"loc":{"start":{"line":1674,"column":14},"end":{"line":1674,"column":41}}},"54":{"name":"(anonymous_54)","line":1696,"loc":{"start":{"line":1696,"column":36},"end":{"line":1696,"column":52}}},"55":{"name":"(anonymous_55)","line":1731,"loc":{"start":{"line":1731,"column":4},"end":{"line":1731,"column":27}}},"56":{"name":"(anonymous_56)","line":1754,"loc":{"start":{"line":1754,"column":4},"end":{"line":1754,"column":34}}},"57":{"name":"(anonymous_57)","line":1783,"loc":{"start":{"line":1783,"column":4},"end":{"line":1783,"column":20}}},"58":{"name":"(anonymous_58)","line":1815,"loc":{"start":{"line":1815,"column":4},"end":{"line":1815,"column":15}}},"59":{"name":"(anonymous_59)","line":1830,"loc":{"start":{"line":1830,"column":4},"end":{"line":1830,"column":20}}},"60":{"name":"(anonymous_60)","line":1854,"loc":{"start":{"line":1854,"column":4},"end":{"line":1854,"column":27}}},"61":{"name":"(anonymous_61)","line":1883,"loc":{"start":{"line":1883,"column":4},"end":{"line":1883,"column":20}}},"62":{"name":"(anonymous_62)","line":1908,"loc":{"start":{"line":1908,"column":4},"end":{"line":1908,"column":34}}}},"statementMap":{"1":{"start":{"line":21,"column":0},"end":{"line":21,"column":27}},"2":{"start":{"line":23,"column":0},"end":{"line":26,"column":2}},"3":{"start":{"line":28,"column":0},"end":{"line":34,"column":2}},"4":{"start":{"line":36,"column":0},"end":{"line":36,"column":15}},"5":{"start":{"line":38,"column":0},"end":{"line":38,"column":20}},"6":{"start":{"line":40,"column":0},"end":{"line":40,"column":22}},"7":{"start":{"line":42,"column":0},"end":{"line":42,"column":16}},"8":{"start":{"line":44,"column":0},"end":{"line":44,"column":29}},"9":{"start":{"line":45,"column":0},"end":{"line":45,"column":25}},"10":{"start":{"line":47,"column":0},"end":{"line":52,"column":2}},"11":{"start":{"line":54,"column":0},"end":{"line":54,"column":58}},"12":{"start":{"line":56,"column":0},"end":{"line":56,"column":67}},"13":{"start":{"line":58,"column":0},"end":{"line":58,"column":43}},"14":{"start":{"line":60,"column":0},"end":{"line":60,"column":27}},"15":{"start":{"line":62,"column":0},"end":{"line":76,"column":1}},"16":{"start":{"line":67,"column":4},"end":{"line":67,"column":27}},"17":{"start":{"line":68,"column":4},"end":{"line":74,"column":5}},"18":{"start":{"line":71,"column":8},"end":{"line":71,"column":29}},"19":{"start":{"line":73,"column":8},"end":{"line":73,"column":28}},"20":{"start":{"line":75,"column":4},"end":{"line":75,"column":23}},"21":{"start":{"line":78,"column":0},"end":{"line":78,"column":36}},"22":{"start":{"line":80,"column":0},"end":{"line":80,"column":36}},"23":{"start":{"line":82,"column":0},"end":{"line":88,"column":2}},"24":{"start":{"line":103,"column":0},"end":{"line":131,"column":1}},"25":{"start":{"line":104,"column":4},"end":{"line":104,"column":10}},"26":{"start":{"line":106,"column":4},"end":{"line":108,"column":6}},"27":{"start":{"line":110,"column":4},"end":{"line":112,"column":5}},"28":{"start":{"line":111,"column":8},"end":{"line":111,"column":21}},"29":{"start":{"line":115,"column":4},"end":{"line":124,"column":5}},"30":{"start":{"line":116,"column":8},"end":{"line":116,"column":44}},"31":{"start":{"line":118,"column":8},"end":{"line":123,"column":9}},"32":{"start":{"line":122,"column":12},"end":{"line":122,"column":44}},"33":{"start":{"line":126,"column":4},"end":{"line":126,"column":39}},"34":{"start":{"line":128,"column":4},"end":{"line":128,"column":81}},"35":{"start":{"line":130,"column":4},"end":{"line":130,"column":17}},"36":{"start":{"line":140,"column":0},"end":{"line":142,"column":1}},"37":{"start":{"line":141,"column":4},"end":{"line":141,"column":65}},"38":{"start":{"line":162,"column":0},"end":{"line":214,"column":1}},"39":{"start":{"line":163,"column":4},"end":{"line":165,"column":5}},"40":{"start":{"line":164,"column":8},"end":{"line":164,"column":52}},"41":{"start":{"line":167,"column":4},"end":{"line":167,"column":40}},"42":{"start":{"line":168,"column":4},"end":{"line":168,"column":38}},"43":{"start":{"line":169,"column":4},"end":{"line":169,"column":24}},"44":{"start":{"line":170,"column":4},"end":{"line":170,"column":27}},"45":{"start":{"line":171,"column":4},"end":{"line":171,"column":29}},"46":{"start":{"line":172,"column":4},"end":{"line":172,"column":28}},"47":{"start":{"line":174,"column":4},"end":{"line":174,"column":28}},"48":{"start":{"line":176,"column":4},"end":{"line":176,"column":48}},"49":{"start":{"line":176,"column":26},"end":{"line":176,"column":47}},"50":{"start":{"line":177,"column":4},"end":{"line":177,"column":48}},"51":{"start":{"line":177,"column":26},"end":{"line":177,"column":47}},"52":{"start":{"line":178,"column":4},"end":{"line":180,"column":5}},"53":{"start":{"line":179,"column":8},"end":{"line":179,"column":91}},"54":{"start":{"line":182,"column":4},"end":{"line":182,"column":42}},"55":{"start":{"line":182,"column":23},"end":{"line":182,"column":41}},"56":{"start":{"line":183,"column":4},"end":{"line":183,"column":42}},"57":{"start":{"line":183,"column":23},"end":{"line":183,"column":41}},"58":{"start":{"line":184,"column":4},"end":{"line":186,"column":5}},"59":{"start":{"line":185,"column":8},"end":{"line":185,"column":51}},"60":{"start":{"line":188,"column":4},"end":{"line":199,"column":5}},"61":{"start":{"line":189,"column":8},"end":{"line":191,"column":9}},"62":{"start":{"line":190,"column":12},"end":{"line":190,"column":41}},"63":{"start":{"line":194,"column":8},"end":{"line":198,"column":9}},"64":{"start":{"line":197,"column":12},"end":{"line":197,"column":95}},"65":{"start":{"line":205,"column":4},"end":{"line":211,"column":6}},"66":{"start":{"line":213,"column":4},"end":{"line":213,"column":17}},"67":{"start":{"line":223,"column":0},"end":{"line":225,"column":1}},"68":{"start":{"line":224,"column":4},"end":{"line":224,"column":29}},"69":{"start":{"line":238,"column":0},"end":{"line":252,"column":1}},"70":{"start":{"line":239,"column":4},"end":{"line":247,"column":5}},"71":{"start":{"line":246,"column":8},"end":{"line":246,"column":18}},"72":{"start":{"line":251,"column":4},"end":{"line":251,"column":18}},"73":{"start":{"line":261,"column":0},"end":{"line":268,"column":1}},"74":{"start":{"line":262,"column":4},"end":{"line":267,"column":82}},"75":{"start":{"line":277,"column":0},"end":{"line":279,"column":1}},"76":{"start":{"line":278,"column":4},"end":{"line":278,"column":67}},"77":{"start":{"line":288,"column":0},"end":{"line":290,"column":1}},"78":{"start":{"line":289,"column":4},"end":{"line":289,"column":42}},"79":{"start":{"line":300,"column":0},"end":{"line":311,"column":1}},"80":{"start":{"line":301,"column":4},"end":{"line":301,"column":27}},"81":{"start":{"line":302,"column":4},"end":{"line":302,"column":10}},"82":{"start":{"line":304,"column":4},"end":{"line":308,"column":5}},"83":{"start":{"line":305,"column":8},"end":{"line":307,"column":9}},"84":{"start":{"line":306,"column":12},"end":{"line":306,"column":21}},"85":{"start":{"line":310,"column":4},"end":{"line":310,"column":14}},"86":{"start":{"line":324,"column":0},"end":{"line":336,"column":1}},"87":{"start":{"line":325,"column":4},"end":{"line":325,"column":49}},"88":{"start":{"line":326,"column":4},"end":{"line":326,"column":41}},"89":{"start":{"line":327,"column":4},"end":{"line":331,"column":31}},"90":{"start":{"line":332,"column":4},"end":{"line":335,"column":6}},"91":{"start":{"line":346,"column":0},"end":{"line":348,"column":1}},"92":{"start":{"line":347,"column":4},"end":{"line":347,"column":60}},"93":{"start":{"line":357,"column":0},"end":{"line":362,"column":1}},"94":{"start":{"line":358,"column":4},"end":{"line":360,"column":5}},"95":{"start":{"line":359,"column":8},"end":{"line":359,"column":24}},"96":{"start":{"line":361,"column":4},"end":{"line":361,"column":15}},"97":{"start":{"line":373,"column":0},"end":{"line":402,"column":1}},"98":{"start":{"line":374,"column":4},"end":{"line":374,"column":10}},"99":{"start":{"line":377,"column":4},"end":{"line":379,"column":5}},"100":{"start":{"line":378,"column":8},"end":{"line":378,"column":71}},"101":{"start":{"line":382,"column":4},"end":{"line":389,"column":7}},"102":{"start":{"line":383,"column":8},"end":{"line":385,"column":9}},"103":{"start":{"line":384,"column":12},"end":{"line":384,"column":83}},"104":{"start":{"line":387,"column":8},"end":{"line":387,"column":43}},"105":{"start":{"line":388,"column":8},"end":{"line":388,"column":18}},"106":{"start":{"line":392,"column":4},"end":{"line":396,"column":5}},"107":{"start":{"line":393,"column":8},"end":{"line":395,"column":9}},"108":{"start":{"line":394,"column":12},"end":{"line":394,"column":75}},"109":{"start":{"line":398,"column":4},"end":{"line":401,"column":6}},"110":{"start":{"line":411,"column":0},"end":{"line":423,"column":1}},"111":{"start":{"line":412,"column":4},"end":{"line":412,"column":21}},"112":{"start":{"line":414,"column":4},"end":{"line":420,"column":5}},"113":{"start":{"line":415,"column":8},"end":{"line":417,"column":11}},"114":{"start":{"line":416,"column":12},"end":{"line":416,"column":34}},"115":{"start":{"line":419,"column":8},"end":{"line":419,"column":23}},"116":{"start":{"line":422,"column":4},"end":{"line":422,"column":17}},"117":{"start":{"line":431,"column":0},"end":{"line":437,"column":1}},"118":{"start":{"line":432,"column":4},"end":{"line":434,"column":5}},"119":{"start":{"line":433,"column":8},"end":{"line":433,"column":71}},"120":{"start":{"line":436,"column":4},"end":{"line":436,"column":33}},"121":{"start":{"line":451,"column":0},"end":{"line":482,"column":1}},"122":{"start":{"line":452,"column":4},"end":{"line":452,"column":26}},"123":{"start":{"line":453,"column":4},"end":{"line":453,"column":39}},"124":{"start":{"line":454,"column":4},"end":{"line":454,"column":22}},"125":{"start":{"line":455,"column":4},"end":{"line":455,"column":14}},"126":{"start":{"line":456,"column":4},"end":{"line":456,"column":10}},"127":{"start":{"line":459,"column":4},"end":{"line":479,"column":5}},"128":{"start":{"line":460,"column":8},"end":{"line":460,"column":22}},"129":{"start":{"line":461,"column":8},"end":{"line":467,"column":9}},"130":{"start":{"line":466,"column":12},"end":{"line":466,"column":21}},"131":{"start":{"line":469,"column":8},"end":{"line":469,"column":62}},"132":{"start":{"line":470,"column":8},"end":{"line":478,"column":9}},"133":{"start":{"line":471,"column":12},"end":{"line":475,"column":14}},"134":{"start":{"line":477,"column":12},"end":{"line":477,"column":18}},"135":{"start":{"line":481,"column":4},"end":{"line":481,"column":18}},"136":{"start":{"line":492,"column":0},"end":{"line":494,"column":1}},"137":{"start":{"line":493,"column":4},"end":{"line":493,"column":25}},"138":{"start":{"line":502,"column":0},"end":{"line":510,"column":1}},"139":{"start":{"line":503,"column":4},"end":{"line":503,"column":54}},"140":{"start":{"line":504,"column":4},"end":{"line":504,"column":54}},"141":{"start":{"line":505,"column":4},"end":{"line":505,"column":56}},"142":{"start":{"line":506,"column":4},"end":{"line":506,"column":60}},"143":{"start":{"line":507,"column":4},"end":{"line":507,"column":56}},"144":{"start":{"line":509,"column":4},"end":{"line":509,"column":26}},"145":{"start":{"line":520,"column":0},"end":{"line":527,"column":1}},"146":{"start":{"line":522,"column":4},"end":{"line":524,"column":5}},"147":{"start":{"line":523,"column":8},"end":{"line":523,"column":74}},"148":{"start":{"line":526,"column":4},"end":{"line":526,"column":17}},"149":{"start":{"line":567,"column":0},"end":{"line":653,"column":1}},"150":{"start":{"line":568,"column":4},"end":{"line":573,"column":5}},"151":{"start":{"line":569,"column":8},"end":{"line":571,"column":9}},"152":{"start":{"line":570,"column":12},"end":{"line":570,"column":77}},"153":{"start":{"line":572,"column":8},"end":{"line":572,"column":34}},"154":{"start":{"line":576,"column":4},"end":{"line":576,"column":59}},"155":{"start":{"line":577,"column":4},"end":{"line":577,"column":53}},"156":{"start":{"line":579,"column":4},"end":{"line":582,"column":5}},"157":{"start":{"line":581,"column":8},"end":{"line":581,"column":21}},"158":{"start":{"line":584,"column":4},"end":{"line":586,"column":5}},"159":{"start":{"line":585,"column":8},"end":{"line":585,"column":35}},"160":{"start":{"line":588,"column":4},"end":{"line":644,"column":5}},"161":{"start":{"line":589,"column":8},"end":{"line":592,"column":10}},"162":{"start":{"line":593,"column":8},"end":{"line":593,"column":33}},"163":{"start":{"line":594,"column":8},"end":{"line":594,"column":24}},"164":{"start":{"line":595,"column":8},"end":{"line":595,"column":20}},"165":{"start":{"line":596,"column":8},"end":{"line":596,"column":19}},"166":{"start":{"line":599,"column":8},"end":{"line":599,"column":51}},"167":{"start":{"line":600,"column":8},"end":{"line":600,"column":45}},"168":{"start":{"line":601,"column":8},"end":{"line":601,"column":41}},"169":{"start":{"line":605,"column":8},"end":{"line":632,"column":9}},"170":{"start":{"line":606,"column":12},"end":{"line":616,"column":47}},"171":{"start":{"line":608,"column":16},"end":{"line":608,"column":86}},"172":{"start":{"line":611,"column":16},"end":{"line":615,"column":17}},"173":{"start":{"line":612,"column":20},"end":{"line":614,"column":71}},"174":{"start":{"line":618,"column":12},"end":{"line":631,"column":13}},"175":{"start":{"line":619,"column":16},"end":{"line":619,"column":40}},"176":{"start":{"line":620,"column":16},"end":{"line":620,"column":49}},"177":{"start":{"line":623,"column":16},"end":{"line":623,"column":96}},"178":{"start":{"line":624,"column":16},"end":{"line":624,"column":32}},"179":{"start":{"line":625,"column":16},"end":{"line":625,"column":36}},"180":{"start":{"line":626,"column":16},"end":{"line":630,"column":17}},"181":{"start":{"line":627,"column":20},"end":{"line":627,"column":39}},"182":{"start":{"line":628,"column":23},"end":{"line":630,"column":17}},"183":{"start":{"line":629,"column":20},"end":{"line":629,"column":41}},"184":{"start":{"line":634,"column":8},"end":{"line":643,"column":10}},"185":{"start":{"line":646,"column":4},"end":{"line":646,"column":49}},"186":{"start":{"line":647,"column":4},"end":{"line":652,"column":6}},"187":{"start":{"line":656,"column":0},"end":{"line":656,"column":33}},"188":{"start":{"line":670,"column":0},"end":{"line":670,"column":26}},"189":{"start":{"line":677,"column":0},"end":{"line":677,"column":41}},"190":{"start":{"line":678,"column":0},"end":{"line":678,"column":39}},"191":{"start":{"line":679,"column":0},"end":{"line":679,"column":19}},"192":{"start":{"line":680,"column":0},"end":{"line":680,"column":19}},"193":{"start":{"line":681,"column":0},"end":{"line":681,"column":21}},"194":{"start":{"line":732,"column":0},"end":{"line":765,"column":2}},"195":{"start":{"line":733,"column":4},"end":{"line":733,"column":28}},"196":{"start":{"line":734,"column":4},"end":{"line":734,"column":46}},"197":{"start":{"line":735,"column":4},"end":{"line":735,"column":10}},"198":{"start":{"line":737,"column":4},"end":{"line":739,"column":5}},"199":{"start":{"line":738,"column":8},"end":{"line":738,"column":35}},"200":{"start":{"line":741,"column":4},"end":{"line":746,"column":5}},"201":{"start":{"line":742,"column":8},"end":{"line":742,"column":60}},"202":{"start":{"line":743,"column":8},"end":{"line":745,"column":9}},"203":{"start":{"line":744,"column":12},"end":{"line":744,"column":43}},"204":{"start":{"line":749,"column":4},"end":{"line":760,"column":7}},"205":{"start":{"line":764,"column":4},"end":{"line":764,"column":36}},"206":{"start":{"line":781,"column":0},"end":{"line":788,"column":2}},"207":{"start":{"line":782,"column":4},"end":{"line":784,"column":5}},"208":{"start":{"line":783,"column":8},"end":{"line":783,"column":33}},"209":{"start":{"line":785,"column":4},"end":{"line":787,"column":6}},"210":{"start":{"line":791,"column":0},"end":{"line":799,"column":2}},"211":{"start":{"line":792,"column":4},"end":{"line":798,"column":5}},"212":{"start":{"line":794,"column":8},"end":{"line":794,"column":26}},"213":{"start":{"line":797,"column":8},"end":{"line":797,"column":24}},"214":{"start":{"line":813,"column":0},"end":{"line":815,"column":2}},"215":{"start":{"line":814,"column":4},"end":{"line":814,"column":82}},"216":{"start":{"line":846,"column":0},"end":{"line":896,"column":2}},"217":{"start":{"line":847,"column":4},"end":{"line":847,"column":23}},"218":{"start":{"line":848,"column":4},"end":{"line":848,"column":21}},"219":{"start":{"line":849,"column":4},"end":{"line":849,"column":22}},"220":{"start":{"line":850,"column":4},"end":{"line":850,"column":14}},"221":{"start":{"line":851,"column":4},"end":{"line":851,"column":11}},"222":{"start":{"line":853,"column":4},"end":{"line":853,"column":74}},"223":{"start":{"line":854,"column":4},"end":{"line":864,"column":5}},"224":{"start":{"line":855,"column":8},"end":{"line":855,"column":24}},"225":{"start":{"line":856,"column":11},"end":{"line":864,"column":5}},"226":{"start":{"line":862,"column":8},"end":{"line":862,"column":21}},"227":{"start":{"line":863,"column":8},"end":{"line":863,"column":28}},"228":{"start":{"line":866,"column":4},"end":{"line":866,"column":48}},"229":{"start":{"line":869,"column":4},"end":{"line":877,"column":6}},"230":{"start":{"line":879,"column":4},"end":{"line":879,"column":19}},"231":{"start":{"line":880,"column":4},"end":{"line":880,"column":23}},"232":{"start":{"line":883,"column":4},"end":{"line":883,"column":37}},"233":{"start":{"line":887,"column":4},"end":{"line":889,"column":5}},"234":{"start":{"line":888,"column":8},"end":{"line":888,"column":21}},"235":{"start":{"line":891,"column":4},"end":{"line":893,"column":5}},"236":{"start":{"line":892,"column":8},"end":{"line":892,"column":51}},"237":{"start":{"line":895,"column":4},"end":{"line":895,"column":17}},"238":{"start":{"line":920,"column":0},"end":{"line":936,"column":2}},"239":{"start":{"line":921,"column":4},"end":{"line":921,"column":16}},"240":{"start":{"line":922,"column":4},"end":{"line":922,"column":15}},"241":{"start":{"line":923,"column":4},"end":{"line":923,"column":14}},"242":{"start":{"line":925,"column":4},"end":{"line":935,"column":5}},"243":{"start":{"line":932,"column":8},"end":{"line":932,"column":41}},"244":{"start":{"line":934,"column":8},"end":{"line":934,"column":51}},"245":{"start":{"line":951,"column":0},"end":{"line":953,"column":2}},"246":{"start":{"line":952,"column":4},"end":{"line":952,"column":42}},"247":{"start":{"line":975,"column":0},"end":{"line":985,"column":2}},"248":{"start":{"line":976,"column":4},"end":{"line":976,"column":38}},"249":{"start":{"line":978,"column":4},"end":{"line":980,"column":5}},"250":{"start":{"line":979,"column":8},"end":{"line":979,"column":24}},"251":{"start":{"line":982,"column":4},"end":{"line":984,"column":5}},"252":{"start":{"line":983,"column":8},"end":{"line":983,"column":25}},"253":{"start":{"line":999,"column":0},"end":{"line":1001,"column":2}},"254":{"start":{"line":1000,"column":4},"end":{"line":1000,"column":33}},"255":{"start":{"line":1017,"column":0},"end":{"line":1020,"column":2}},"256":{"start":{"line":1018,"column":4},"end":{"line":1018,"column":54}},"257":{"start":{"line":1049,"column":0},"end":{"line":1077,"column":2}},"258":{"start":{"line":1050,"column":4},"end":{"line":1050,"column":70}},"259":{"start":{"line":1051,"column":4},"end":{"line":1051,"column":79}},"260":{"start":{"line":1052,"column":4},"end":{"line":1052,"column":15}},"261":{"start":{"line":1053,"column":4},"end":{"line":1053,"column":11}},"262":{"start":{"line":1055,"column":4},"end":{"line":1055,"column":48}},"263":{"start":{"line":1058,"column":4},"end":{"line":1064,"column":6}},"264":{"start":{"line":1066,"column":4},"end":{"line":1066,"column":49}},"265":{"start":{"line":1068,"column":4},"end":{"line":1074,"column":5}},"266":{"start":{"line":1069,"column":8},"end":{"line":1073,"column":10}},"267":{"start":{"line":1076,"column":4},"end":{"line":1076,"column":59}},"268":{"start":{"line":1107,"column":0},"end":{"line":1137,"column":2}},"269":{"start":{"line":1108,"column":4},"end":{"line":1136,"column":17}},"270":{"start":{"line":1109,"column":8},"end":{"line":1109,"column":77}},"271":{"start":{"line":1110,"column":8},"end":{"line":1110,"column":25}},"272":{"start":{"line":1112,"column":8},"end":{"line":1127,"column":9}},"273":{"start":{"line":1113,"column":12},"end":{"line":1126,"column":13}},"274":{"start":{"line":1119,"column":16},"end":{"line":1121,"column":17}},"275":{"start":{"line":1120,"column":20},"end":{"line":1120,"column":98}},"276":{"start":{"line":1123,"column":16},"end":{"line":1123,"column":56}},"277":{"start":{"line":1125,"column":16},"end":{"line":1125,"column":39}},"278":{"start":{"line":1129,"column":8},"end":{"line":1131,"column":9}},"279":{"start":{"line":1130,"column":12},"end":{"line":1130,"column":61}},"280":{"start":{"line":1133,"column":8},"end":{"line":1135,"column":45}},"281":{"start":{"line":1186,"column":0},"end":{"line":1218,"column":2}},"282":{"start":{"line":1187,"column":4},"end":{"line":1187,"column":43}},"283":{"start":{"line":1188,"column":4},"end":{"line":1188,"column":71}},"284":{"start":{"line":1189,"column":4},"end":{"line":1189,"column":80}},"285":{"start":{"line":1190,"column":4},"end":{"line":1190,"column":20}},"286":{"start":{"line":1191,"column":4},"end":{"line":1191,"column":15}},"287":{"start":{"line":1193,"column":4},"end":{"line":1207,"column":5}},"288":{"start":{"line":1194,"column":8},"end":{"line":1194,"column":54}},"289":{"start":{"line":1198,"column":8},"end":{"line":1204,"column":10}},"290":{"start":{"line":1205,"column":11},"end":{"line":1207,"column":5}},"291":{"start":{"line":1206,"column":8},"end":{"line":1206,"column":61}},"292":{"start":{"line":1210,"column":4},"end":{"line":1210,"column":64}},"293":{"start":{"line":1212,"column":4},"end":{"line":1215,"column":5}},"294":{"start":{"line":1214,"column":8},"end":{"line":1214,"column":29}},"295":{"start":{"line":1217,"column":4},"end":{"line":1217,"column":18}},"296":{"start":{"line":1244,"column":0},"end":{"line":1254,"column":2}},"297":{"start":{"line":1245,"column":4},"end":{"line":1245,"column":10}},"298":{"start":{"line":1246,"column":4},"end":{"line":1246,"column":10}},"299":{"start":{"line":1248,"column":4},"end":{"line":1251,"column":5}},"300":{"start":{"line":1249,"column":8},"end":{"line":1249,"column":28}},"301":{"start":{"line":1250,"column":8},"end":{"line":1250,"column":53}},"302":{"start":{"line":1253,"column":4},"end":{"line":1253,"column":15}},"303":{"start":{"line":1282,"column":0},"end":{"line":1284,"column":2}},"304":{"start":{"line":1283,"column":4},"end":{"line":1283,"column":61}},"305":{"start":{"line":1309,"column":0},"end":{"line":1312,"column":2}},"306":{"start":{"line":1311,"column":4},"end":{"line":1311,"column":51}},"307":{"start":{"line":1334,"column":0},"end":{"line":1344,"column":2}},"308":{"start":{"line":1335,"column":4},"end":{"line":1335,"column":38}},"309":{"start":{"line":1337,"column":4},"end":{"line":1339,"column":5}},"310":{"start":{"line":1338,"column":8},"end":{"line":1338,"column":25}},"311":{"start":{"line":1341,"column":4},"end":{"line":1343,"column":5}},"312":{"start":{"line":1342,"column":8},"end":{"line":1342,"column":26}},"313":{"start":{"line":1367,"column":0},"end":{"line":1417,"column":2}},"314":{"start":{"line":1368,"column":4},"end":{"line":1368,"column":28}},"315":{"start":{"line":1369,"column":4},"end":{"line":1369,"column":50}},"316":{"start":{"line":1370,"column":4},"end":{"line":1370,"column":24}},"317":{"start":{"line":1371,"column":4},"end":{"line":1371,"column":25}},"318":{"start":{"line":1372,"column":4},"end":{"line":1372,"column":21}},"319":{"start":{"line":1374,"column":4},"end":{"line":1391,"column":5}},"320":{"start":{"line":1375,"column":8},"end":{"line":1375,"column":64}},"321":{"start":{"line":1378,"column":8},"end":{"line":1388,"column":9}},"322":{"start":{"line":1379,"column":12},"end":{"line":1379,"column":26}},"323":{"start":{"line":1381,"column":12},"end":{"line":1383,"column":13}},"324":{"start":{"line":1382,"column":16},"end":{"line":1382,"column":42}},"325":{"start":{"line":1385,"column":15},"end":{"line":1388,"column":9}},"326":{"start":{"line":1387,"column":12},"end":{"line":1387,"column":56}},"327":{"start":{"line":1390,"column":8},"end":{"line":1390,"column":21}},"328":{"start":{"line":1393,"column":4},"end":{"line":1395,"column":5}},"329":{"start":{"line":1394,"column":8},"end":{"line":1394,"column":82}},"330":{"start":{"line":1397,"column":4},"end":{"line":1397,"column":78}},"331":{"start":{"line":1398,"column":4},"end":{"line":1398,"column":20}},"332":{"start":{"line":1399,"column":4},"end":{"line":1399,"column":16}},"333":{"start":{"line":1400,"column":4},"end":{"line":1413,"column":5}},"334":{"start":{"line":1401,"column":8},"end":{"line":1401,"column":30}},"335":{"start":{"line":1403,"column":8},"end":{"line":1412,"column":9}},"336":{"start":{"line":1404,"column":12},"end":{"line":1404,"column":43}},"337":{"start":{"line":1405,"column":12},"end":{"line":1405,"column":91}},"338":{"start":{"line":1409,"column":12},"end":{"line":1409,"column":92}},"339":{"start":{"line":1411,"column":12},"end":{"line":1411,"column":49}},"340":{"start":{"line":1415,"column":4},"end":{"line":1415,"column":54}},"341":{"start":{"line":1416,"column":4},"end":{"line":1416,"column":50}},"342":{"start":{"line":1432,"column":0},"end":{"line":1485,"column":2}},"343":{"start":{"line":1433,"column":4},"end":{"line":1433,"column":39}},"344":{"start":{"line":1434,"column":4},"end":{"line":1434,"column":50}},"345":{"start":{"line":1435,"column":4},"end":{"line":1435,"column":13}},"346":{"start":{"line":1436,"column":4},"end":{"line":1436,"column":11}},"347":{"start":{"line":1437,"column":4},"end":{"line":1437,"column":10}},"348":{"start":{"line":1439,"column":4},"end":{"line":1477,"column":5}},"349":{"start":{"line":1443,"column":8},"end":{"line":1460,"column":9}},"350":{"start":{"line":1444,"column":12},"end":{"line":1447,"column":15}},"351":{"start":{"line":1450,"column":12},"end":{"line":1459,"column":15}},"352":{"start":{"line":1451,"column":16},"end":{"line":1451,"column":43}},"353":{"start":{"line":1452,"column":16},"end":{"line":1452,"column":22}},"354":{"start":{"line":1454,"column":16},"end":{"line":1458,"column":17}},"355":{"start":{"line":1455,"column":20},"end":{"line":1457,"column":21}},"356":{"start":{"line":1456,"column":24},"end":{"line":1456,"column":45}},"357":{"start":{"line":1463,"column":8},"end":{"line":1471,"column":9}},"358":{"start":{"line":1465,"column":12},"end":{"line":1470,"column":13}},"359":{"start":{"line":1466,"column":16},"end":{"line":1466,"column":60}},"360":{"start":{"line":1467,"column":16},"end":{"line":1469,"column":17}},"361":{"start":{"line":1468,"column":20},"end":{"line":1468,"column":43}},"362":{"start":{"line":1474,"column":8},"end":{"line":1476,"column":9}},"363":{"start":{"line":1475,"column":12},"end":{"line":1475,"column":41}},"364":{"start":{"line":1479,"column":4},"end":{"line":1482,"column":5}},"365":{"start":{"line":1481,"column":8},"end":{"line":1481,"column":39}},"366":{"start":{"line":1484,"column":4},"end":{"line":1484,"column":17}},"367":{"start":{"line":1495,"column":0},"end":{"line":1498,"column":2}},"368":{"start":{"line":1497,"column":4},"end":{"line":1497,"column":40}},"369":{"start":{"line":1510,"column":0},"end":{"line":1525,"column":2}},"370":{"start":{"line":1511,"column":4},"end":{"line":1511,"column":15}},"371":{"start":{"line":1513,"column":4},"end":{"line":1522,"column":5}},"372":{"start":{"line":1515,"column":8},"end":{"line":1515,"column":34}},"373":{"start":{"line":1516,"column":11},"end":{"line":1522,"column":5}},"374":{"start":{"line":1517,"column":8},"end":{"line":1517,"column":52}},"375":{"start":{"line":1519,"column":8},"end":{"line":1519,"column":28}},"376":{"start":{"line":1521,"column":8},"end":{"line":1521,"column":22}},"377":{"start":{"line":1524,"column":4},"end":{"line":1524,"column":50}},"378":{"start":{"line":1541,"column":0},"end":{"line":1663,"column":2}},"379":{"start":{"line":1542,"column":4},"end":{"line":1542,"column":43}},"380":{"start":{"line":1543,"column":4},"end":{"line":1543,"column":22}},"381":{"start":{"line":1544,"column":4},"end":{"line":1544,"column":21}},"382":{"start":{"line":1545,"column":4},"end":{"line":1545,"column":15}},"383":{"start":{"line":1547,"column":4},"end":{"line":1555,"column":5}},"384":{"start":{"line":1548,"column":8},"end":{"line":1550,"column":9}},"385":{"start":{"line":1549,"column":12},"end":{"line":1549,"column":59}},"386":{"start":{"line":1552,"column":8},"end":{"line":1552,"column":41}},"387":{"start":{"line":1554,"column":8},"end":{"line":1554,"column":21}},"388":{"start":{"line":1558,"column":4},"end":{"line":1650,"column":5}},"389":{"start":{"line":1561,"column":8},"end":{"line":1582,"column":11}},"390":{"start":{"line":1562,"column":12},"end":{"line":1562,"column":33}},"391":{"start":{"line":1563,"column":12},"end":{"line":1563,"column":18}},"392":{"start":{"line":1564,"column":12},"end":{"line":1574,"column":13}},"393":{"start":{"line":1567,"column":16},"end":{"line":1567,"column":46}},"394":{"start":{"line":1569,"column":16},"end":{"line":1573,"column":17}},"395":{"start":{"line":1570,"column":20},"end":{"line":1572,"column":21}},"396":{"start":{"line":1571,"column":24},"end":{"line":1571,"column":63}},"397":{"start":{"line":1577,"column":12},"end":{"line":1579,"column":13}},"398":{"start":{"line":1578,"column":16},"end":{"line":1578,"column":74}},"399":{"start":{"line":1581,"column":12},"end":{"line":1581,"column":54}},"400":{"start":{"line":1586,"column":8},"end":{"line":1649,"column":11}},"401":{"start":{"line":1588,"column":12},"end":{"line":1588,"column":33}},"402":{"start":{"line":1589,"column":12},"end":{"line":1648,"column":15}},"403":{"start":{"line":1590,"column":16},"end":{"line":1590,"column":22}},"404":{"start":{"line":1592,"column":16},"end":{"line":1612,"column":17}},"405":{"start":{"line":1602,"column":20},"end":{"line":1602,"column":28}},"406":{"start":{"line":1603,"column":20},"end":{"line":1605,"column":21}},"407":{"start":{"line":1604,"column":24},"end":{"line":1604,"column":45}},"408":{"start":{"line":1607,"column":20},"end":{"line":1607,"column":70}},"409":{"start":{"line":1608,"column":20},"end":{"line":1610,"column":21}},"410":{"start":{"line":1609,"column":24},"end":{"line":1609,"column":88}},"411":{"start":{"line":1611,"column":20},"end":{"line":1611,"column":45}},"412":{"start":{"line":1614,"column":16},"end":{"line":1616,"column":17}},"413":{"start":{"line":1615,"column":20},"end":{"line":1615,"column":31}},"414":{"start":{"line":1617,"column":16},"end":{"line":1619,"column":17}},"415":{"start":{"line":1618,"column":20},"end":{"line":1618,"column":35}},"416":{"start":{"line":1620,"column":16},"end":{"line":1622,"column":17}},"417":{"start":{"line":1621,"column":20},"end":{"line":1621,"column":81}},"418":{"start":{"line":1623,"column":16},"end":{"line":1625,"column":17}},"419":{"start":{"line":1624,"column":20},"end":{"line":1624,"column":95}},"420":{"start":{"line":1627,"column":16},"end":{"line":1627,"column":25}},"421":{"start":{"line":1640,"column":16},"end":{"line":1645,"column":17}},"422":{"start":{"line":1641,"column":20},"end":{"line":1643,"column":21}},"423":{"start":{"line":1642,"column":24},"end":{"line":1642,"column":88}},"424":{"start":{"line":1644,"column":20},"end":{"line":1644,"column":42}},"425":{"start":{"line":1647,"column":16},"end":{"line":1647,"column":61}},"426":{"start":{"line":1652,"column":4},"end":{"line":1660,"column":5}},"427":{"start":{"line":1653,"column":8},"end":{"line":1659,"column":9}},"428":{"start":{"line":1655,"column":12},"end":{"line":1655,"column":33}},"429":{"start":{"line":1658,"column":12},"end":{"line":1658,"column":45}},"430":{"start":{"line":1662,"column":4},"end":{"line":1662,"column":18}},"431":{"start":{"line":1674,"column":0},"end":{"line":1718,"column":2}},"432":{"start":{"line":1675,"column":4},"end":{"line":1678,"column":5}},"433":{"start":{"line":1677,"column":8},"end":{"line":1677,"column":50}},"434":{"start":{"line":1680,"column":4},"end":{"line":1680,"column":27}},"435":{"start":{"line":1681,"column":4},"end":{"line":1681,"column":20}},"436":{"start":{"line":1682,"column":4},"end":{"line":1682,"column":44}},"437":{"start":{"line":1683,"column":4},"end":{"line":1683,"column":26}},"438":{"start":{"line":1684,"column":4},"end":{"line":1684,"column":19}},"439":{"start":{"line":1694,"column":4},"end":{"line":1694,"column":53}},"440":{"start":{"line":1696,"column":4},"end":{"line":1706,"column":7}},"441":{"start":{"line":1698,"column":8},"end":{"line":1705,"column":9}},"442":{"start":{"line":1699,"column":12},"end":{"line":1699,"column":63}},"443":{"start":{"line":1700,"column":12},"end":{"line":1702,"column":13}},"444":{"start":{"line":1701,"column":16},"end":{"line":1701,"column":67}},"445":{"start":{"line":1703,"column":12},"end":{"line":1703,"column":41}},"446":{"start":{"line":1704,"column":12},"end":{"line":1704,"column":53}},"447":{"start":{"line":1708,"column":4},"end":{"line":1714,"column":5}},"448":{"start":{"line":1709,"column":8},"end":{"line":1711,"column":9}},"449":{"start":{"line":1710,"column":12},"end":{"line":1710,"column":28}},"450":{"start":{"line":1713,"column":8},"end":{"line":1713,"column":46}},"451":{"start":{"line":1716,"column":4},"end":{"line":1716,"column":40}},"452":{"start":{"line":1717,"column":4},"end":{"line":1717,"column":67}},"453":{"start":{"line":1729,"column":0},"end":{"line":1742,"column":2}},"454":{"start":{"line":1733,"column":8},"end":{"line":1735,"column":9}},"455":{"start":{"line":1734,"column":12},"end":{"line":1734,"column":28}},"456":{"start":{"line":1736,"column":8},"end":{"line":1736,"column":60}},"457":{"start":{"line":1752,"column":0},"end":{"line":1774,"column":2}},"458":{"start":{"line":1755,"column":8},"end":{"line":1755,"column":33}},"459":{"start":{"line":1756,"column":8},"end":{"line":1758,"column":9}},"460":{"start":{"line":1757,"column":12},"end":{"line":1757,"column":76}},"461":{"start":{"line":1759,"column":8},"end":{"line":1763,"column":9}},"462":{"start":{"line":1762,"column":12},"end":{"line":1762,"column":43}},"463":{"start":{"line":1765,"column":8},"end":{"line":1767,"column":9}},"464":{"start":{"line":1766,"column":12},"end":{"line":1766,"column":28}},"465":{"start":{"line":1768,"column":8},"end":{"line":1768,"column":94}},"466":{"start":{"line":1781,"column":0},"end":{"line":1789,"column":2}},"467":{"start":{"line":1786,"column":8},"end":{"line":1786,"column":48}},"468":{"start":{"line":1795,"column":0},"end":{"line":1799,"column":2}},"469":{"start":{"line":1804,"column":0},"end":{"line":1808,"column":2}},"470":{"start":{"line":1813,"column":0},"end":{"line":1822,"column":2}},"471":{"start":{"line":1816,"column":8},"end":{"line":1816,"column":26}},"472":{"start":{"line":1828,"column":0},"end":{"line":1845,"column":2}},"473":{"start":{"line":1832,"column":8},"end":{"line":1832,"column":93}},"474":{"start":{"line":1833,"column":8},"end":{"line":1833,"column":53}},"475":{"start":{"line":1834,"column":8},"end":{"line":1836,"column":9}},"476":{"start":{"line":1835,"column":12},"end":{"line":1835,"column":82}},"477":{"start":{"line":1839,"column":8},"end":{"line":1842,"column":10}},"478":{"start":{"line":1852,"column":0},"end":{"line":1872,"column":2}},"479":{"start":{"line":1855,"column":8},"end":{"line":1865,"column":9}},"480":{"start":{"line":1863,"column":12},"end":{"line":1864,"column":26}},"481":{"start":{"line":1866,"column":8},"end":{"line":1866,"column":24}},"482":{"start":{"line":1881,"column":0},"end":{"line":1900,"column":2}},"483":{"start":{"line":1886,"column":8},"end":{"line":1888,"column":9}},"484":{"start":{"line":1887,"column":12},"end":{"line":1887,"column":84}},"485":{"start":{"line":1889,"column":8},"end":{"line":1891,"column":9}},"486":{"start":{"line":1890,"column":12},"end":{"line":1890,"column":90}},"487":{"start":{"line":1892,"column":8},"end":{"line":1894,"column":9}},"488":{"start":{"line":1893,"column":12},"end":{"line":1893,"column":90}},"489":{"start":{"line":1895,"column":8},"end":{"line":1895,"column":41}},"490":{"start":{"line":1896,"column":8},"end":{"line":1896,"column":36}},"491":{"start":{"line":1897,"column":8},"end":{"line":1897,"column":19}},"492":{"start":{"line":1906,"column":0},"end":{"line":1919,"column":2}},"493":{"start":{"line":1909,"column":8},"end":{"line":1911,"column":9}},"494":{"start":{"line":1910,"column":12},"end":{"line":1910,"column":25}},"495":{"start":{"line":1912,"column":8},"end":{"line":1912,"column":37}},"496":{"start":{"line":1913,"column":8},"end":{"line":1913,"column":19}},"497":{"start":{"line":1921,"column":0},"end":{"line":1921,"column":25}}},"branchMap":{"1":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":4},"end":{"line":110,"column":4}},{"start":{"line":110,"column":4},"end":{"line":110,"column":4}}]},"2":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":4},"end":{"line":115,"column":4}},{"start":{"line":115,"column":4},"end":{"line":115,"column":4}}]},"3":{"line":128,"type":"cond-expr","locations":[{"start":{"line":128,"column":39},"end":{"line":128,"column":71}},{"start":{"line":128,"column":74},"end":{"line":128,"column":80}}]},"4":{"line":163,"type":"if","locations":[{"start":{"line":163,"column":4},"end":{"line":163,"column":4}},{"start":{"line":163,"column":4},"end":{"line":163,"column":4}}]},"5":{"line":167,"type":"binary-expr","locations":[{"start":{"line":167,"column":16},"end":{"line":167,"column":33}},{"start":{"line":167,"column":37},"end":{"line":167,"column":39}}]},"6":{"line":174,"type":"binary-expr","locations":[{"start":{"line":174,"column":14},"end":{"line":174,"column":21}},{"start":{"line":174,"column":25},"end":{"line":174,"column":27}}]},"7":{"line":176,"type":"if","locations":[{"start":{"line":176,"column":4},"end":{"line":176,"column":4}},{"start":{"line":176,"column":4},"end":{"line":176,"column":4}}]},"8":{"line":177,"type":"if","locations":[{"start":{"line":177,"column":4},"end":{"line":177,"column":4}},{"start":{"line":177,"column":4},"end":{"line":177,"column":4}}]},"9":{"line":178,"type":"if","locations":[{"start":{"line":178,"column":4},"end":{"line":178,"column":4}},{"start":{"line":178,"column":4},"end":{"line":178,"column":4}}]},"10":{"line":182,"type":"if","locations":[{"start":{"line":182,"column":4},"end":{"line":182,"column":4}},{"start":{"line":182,"column":4},"end":{"line":182,"column":4}}]},"11":{"line":183,"type":"if","locations":[{"start":{"line":183,"column":4},"end":{"line":183,"column":4}},{"start":{"line":183,"column":4},"end":{"line":183,"column":4}}]},"12":{"line":184,"type":"if","locations":[{"start":{"line":184,"column":4},"end":{"line":184,"column":4}},{"start":{"line":184,"column":4},"end":{"line":184,"column":4}}]},"13":{"line":188,"type":"if","locations":[{"start":{"line":188,"column":4},"end":{"line":188,"column":4}},{"start":{"line":188,"column":4},"end":{"line":188,"column":4}}]},"14":{"line":189,"type":"if","locations":[{"start":{"line":189,"column":8},"end":{"line":189,"column":8}},{"start":{"line":189,"column":8},"end":{"line":189,"column":8}}]},"15":{"line":194,"type":"if","locations":[{"start":{"line":194,"column":8},"end":{"line":194,"column":8}},{"start":{"line":194,"column":8},"end":{"line":194,"column":8}}]},"16":{"line":197,"type":"cond-expr","locations":[{"start":{"line":197,"column":40},"end":{"line":197,"column":80}},{"start":{"line":197,"column":83},"end":{"line":197,"column":94}}]},"17":{"line":206,"type":"binary-expr","locations":[{"start":{"line":206,"column":19},"end":{"line":206,"column":33}},{"start":{"line":206,"column":37},"end":{"line":206,"column":49}}]},"18":{"line":207,"type":"cond-expr","locations":[{"start":{"line":207,"column":33},"end":{"line":207,"column":60}},{"start":{"line":207,"column":63},"end":{"line":207,"column":67}}]},"19":{"line":239,"type":"if","locations":[{"start":{"line":239,"column":4},"end":{"line":239,"column":4}},{"start":{"line":239,"column":4},"end":{"line":239,"column":4}}]},"20":{"line":241,"type":"binary-expr","locations":[{"start":{"line":241,"column":8},"end":{"line":241,"column":51}},{"start":{"line":242,"column":8},"end":{"line":242,"column":65}},{"start":{"line":244,"column":8},"end":{"line":244,"column":98}}]},"21":{"line":262,"type":"cond-expr","locations":[{"start":{"line":263,"column":8},"end":{"line":263,"column":19}},{"start":{"line":267,"column":8},"end":{"line":267,"column":81}}]},"22":{"line":278,"type":"binary-expr","locations":[{"start":{"line":278,"column":14},"end":{"line":278,"column":31}},{"start":{"line":278,"column":35},"end":{"line":278,"column":65}}]},"23":{"line":305,"type":"if","locations":[{"start":{"line":305,"column":8},"end":{"line":305,"column":8}},{"start":{"line":305,"column":8},"end":{"line":305,"column":8}}]},"24":{"line":327,"type":"cond-expr","locations":[{"start":{"line":329,"column":8},"end":{"line":329,"column":57}},{"start":{"line":331,"column":8},"end":{"line":331,"column":30}}]},"25":{"line":377,"type":"if","locations":[{"start":{"line":377,"column":4},"end":{"line":377,"column":4}},{"start":{"line":377,"column":4},"end":{"line":377,"column":4}}]},"26":{"line":383,"type":"if","locations":[{"start":{"line":383,"column":8},"end":{"line":383,"column":8}},{"start":{"line":383,"column":8},"end":{"line":383,"column":8}}]},"27":{"line":393,"type":"if","locations":[{"start":{"line":393,"column":8},"end":{"line":393,"column":8}},{"start":{"line":393,"column":8},"end":{"line":393,"column":8}}]},"28":{"line":414,"type":"if","locations":[{"start":{"line":414,"column":4},"end":{"line":414,"column":4}},{"start":{"line":414,"column":4},"end":{"line":414,"column":4}}]},"29":{"line":432,"type":"if","locations":[{"start":{"line":432,"column":4},"end":{"line":432,"column":4}},{"start":{"line":432,"column":4},"end":{"line":432,"column":4}}]},"30":{"line":461,"type":"if","locations":[{"start":{"line":461,"column":8},"end":{"line":461,"column":8}},{"start":{"line":461,"column":8},"end":{"line":461,"column":8}}]},"31":{"line":462,"type":"binary-expr","locations":[{"start":{"line":462,"column":13},"end":{"line":462,"column":23}},{"start":{"line":462,"column":27},"end":{"line":462,"column":50}},{"start":{"line":463,"column":13},"end":{"line":463,"column":30}},{"start":{"line":463,"column":34},"end":{"line":463,"column":51}},{"start":{"line":464,"column":13},"end":{"line":464,"column":19}},{"start":{"line":464,"column":23},"end":{"line":464,"column":51}}]},"32":{"line":470,"type":"if","locations":[{"start":{"line":470,"column":8},"end":{"line":470,"column":8}},{"start":{"line":470,"column":8},"end":{"line":470,"column":8}}]},"33":{"line":503,"type":"cond-expr","locations":[{"start":{"line":503,"column":34},"end":{"line":503,"column":39}},{"start":{"line":503,"column":42},"end":{"line":503,"column":47}}]},"34":{"line":504,"type":"cond-expr","locations":[{"start":{"line":504,"column":34},"end":{"line":504,"column":39}},{"start":{"line":504,"column":42},"end":{"line":504,"column":47}}]},"35":{"line":505,"type":"cond-expr","locations":[{"start":{"line":505,"column":35},"end":{"line":505,"column":40}},{"start":{"line":505,"column":43},"end":{"line":505,"column":48}}]},"36":{"line":506,"type":"cond-expr","locations":[{"start":{"line":506,"column":37},"end":{"line":506,"column":42}},{"start":{"line":506,"column":45},"end":{"line":506,"column":50}}]},"37":{"line":507,"type":"cond-expr","locations":[{"start":{"line":507,"column":35},"end":{"line":507,"column":40}},{"start":{"line":507,"column":43},"end":{"line":507,"column":48}}]},"38":{"line":522,"type":"if","locations":[{"start":{"line":522,"column":4},"end":{"line":522,"column":4}},{"start":{"line":522,"column":4},"end":{"line":522,"column":4}}]},"39":{"line":568,"type":"if","locations":[{"start":{"line":568,"column":4},"end":{"line":568,"column":4}},{"start":{"line":568,"column":4},"end":{"line":568,"column":4}}]},"40":{"line":569,"type":"if","locations":[{"start":{"line":569,"column":8},"end":{"line":569,"column":8}},{"start":{"line":569,"column":8},"end":{"line":569,"column":8}}]},"41":{"line":576,"type":"cond-expr","locations":[{"start":{"line":576,"column":38},"end":{"line":576,"column":40}},{"start":{"line":576,"column":43},"end":{"line":576,"column":58}}]},"42":{"line":577,"type":"cond-expr","locations":[{"start":{"line":577,"column":34},"end":{"line":577,"column":36}},{"start":{"line":577,"column":39},"end":{"line":577,"column":52}}]},"43":{"line":579,"type":"if","locations":[{"start":{"line":579,"column":4},"end":{"line":579,"column":4}},{"start":{"line":579,"column":4},"end":{"line":579,"column":4}}]},"44":{"line":579,"type":"binary-expr","locations":[{"start":{"line":579,"column":8},"end":{"line":579,"column":37}},{"start":{"line":579,"column":41},"end":{"line":579,"column":66}}]},"45":{"line":584,"type":"if","locations":[{"start":{"line":584,"column":4},"end":{"line":584,"column":4}},{"start":{"line":584,"column":4},"end":{"line":584,"column":4}}]},"46":{"line":588,"type":"if","locations":[{"start":{"line":588,"column":4},"end":{"line":588,"column":4}},{"start":{"line":588,"column":4},"end":{"line":588,"column":4}}]},"47":{"line":611,"type":"if","locations":[{"start":{"line":611,"column":16},"end":{"line":611,"column":16}},{"start":{"line":611,"column":16},"end":{"line":611,"column":16}}]},"48":{"line":611,"type":"binary-expr","locations":[{"start":{"line":611,"column":20},"end":{"line":611,"column":26}},{"start":{"line":611,"column":30},"end":{"line":611,"column":44}}]},"49":{"line":616,"type":"binary-expr","locations":[{"start":{"line":616,"column":21},"end":{"line":616,"column":27}},{"start":{"line":616,"column":31},"end":{"line":616,"column":45}}]},"50":{"line":618,"type":"if","locations":[{"start":{"line":618,"column":12},"end":{"line":618,"column":12}},{"start":{"line":618,"column":12},"end":{"line":618,"column":12}}]},"51":{"line":620,"type":"binary-expr","locations":[{"start":{"line":620,"column":24},"end":{"line":620,"column":42}},{"start":{"line":620,"column":46},"end":{"line":620,"column":47}}]},"52":{"line":626,"type":"if","locations":[{"start":{"line":626,"column":16},"end":{"line":626,"column":16}},{"start":{"line":626,"column":16},"end":{"line":626,"column":16}}]},"53":{"line":626,"type":"binary-expr","locations":[{"start":{"line":626,"column":20},"end":{"line":626,"column":33}},{"start":{"line":626,"column":37},"end":{"line":626,"column":59}}]},"54":{"line":628,"type":"if","locations":[{"start":{"line":628,"column":23},"end":{"line":628,"column":23}},{"start":{"line":628,"column":23},"end":{"line":628,"column":23}}]},"55":{"line":628,"type":"binary-expr","locations":[{"start":{"line":628,"column":27},"end":{"line":628,"column":40}},{"start":{"line":628,"column":44},"end":{"line":628,"column":64}}]},"56":{"line":642,"type":"cond-expr","locations":[{"start":{"line":642,"column":48},"end":{"line":642,"column":68}},{"start":{"line":642,"column":71},"end":{"line":642,"column":75}}]},"57":{"line":733,"type":"binary-expr","locations":[{"start":{"line":733,"column":14},"end":{"line":733,"column":21}},{"start":{"line":733,"column":25},"end":{"line":733,"column":27}}]},"58":{"line":737,"type":"if","locations":[{"start":{"line":737,"column":4},"end":{"line":737,"column":4}},{"start":{"line":737,"column":4},"end":{"line":737,"column":4}}]},"59":{"line":741,"type":"if","locations":[{"start":{"line":741,"column":4},"end":{"line":741,"column":4}},{"start":{"line":741,"column":4},"end":{"line":741,"column":4}}]},"60":{"line":756,"type":"binary-expr","locations":[{"start":{"line":756,"column":15},"end":{"line":756,"column":28}},{"start":{"line":756,"column":32},"end":{"line":756,"column":44}}]},"61":{"line":782,"type":"if","locations":[{"start":{"line":782,"column":4},"end":{"line":782,"column":4}},{"start":{"line":782,"column":4},"end":{"line":782,"column":4}}]},"62":{"line":785,"type":"binary-expr","locations":[{"start":{"line":785,"column":11},"end":{"line":785,"column":37}},{"start":{"line":786,"column":8},"end":{"line":786,"column":60}}]},"63":{"line":792,"type":"if","locations":[{"start":{"line":792,"column":4},"end":{"line":792,"column":4}},{"start":{"line":792,"column":4},"end":{"line":792,"column":4}}]},"64":{"line":853,"type":"binary-expr","locations":[{"start":{"line":853,"column":11},"end":{"line":853,"column":21}},{"start":{"line":853,"column":25},"end":{"line":853,"column":73}}]},"65":{"line":853,"type":"binary-expr","locations":[{"start":{"line":853,"column":28},"end":{"line":853,"column":34}},{"start":{"line":853,"column":39},"end":{"line":853,"column":51}},{"start":{"line":853,"column":55},"end":{"line":853,"column":71}}]},"66":{"line":854,"type":"if","locations":[{"start":{"line":854,"column":4},"end":{"line":854,"column":4}},{"start":{"line":854,"column":4},"end":{"line":854,"column":4}}]},"67":{"line":856,"type":"if","locations":[{"start":{"line":856,"column":11},"end":{"line":856,"column":11}},{"start":{"line":856,"column":11},"end":{"line":856,"column":11}}]},"68":{"line":866,"type":"binary-expr","locations":[{"start":{"line":866,"column":24},"end":{"line":866,"column":41}},{"start":{"line":866,"column":45},"end":{"line":866,"column":47}}]},"69":{"line":869,"type":"binary-expr","locations":[{"start":{"line":869,"column":9},"end":{"line":869,"column":36}},{"start":{"line":870,"column":8},"end":{"line":876,"column":10}}]},"70":{"line":873,"type":"cond-expr","locations":[{"start":{"line":873,"column":28},"end":{"line":873,"column":48}},{"start":{"line":873,"column":51},"end":{"line":873,"column":60}}]},"71":{"line":879,"type":"binary-expr","locations":[{"start":{"line":879,"column":10},"end":{"line":879,"column":13}},{"start":{"line":879,"column":17},"end":{"line":879,"column":18}}]},"72":{"line":887,"type":"if","locations":[{"start":{"line":887,"column":4},"end":{"line":887,"column":4}},{"start":{"line":887,"column":4},"end":{"line":887,"column":4}}]},"73":{"line":887,"type":"binary-expr","locations":[{"start":{"line":887,"column":8},"end":{"line":887,"column":13}},{"start":{"line":887,"column":17},"end":{"line":887,"column":22}},{"start":{"line":887,"column":26},"end":{"line":887,"column":44}}]},"74":{"line":891,"type":"if","locations":[{"start":{"line":891,"column":4},"end":{"line":891,"column":4}},{"start":{"line":891,"column":4},"end":{"line":891,"column":4}}]},"75":{"line":892,"type":"cond-expr","locations":[{"start":{"line":892,"column":34},"end":{"line":892,"column":46}},{"start":{"line":892,"column":49},"end":{"line":892,"column":50}}]},"76":{"line":934,"type":"binary-expr","locations":[{"start":{"line":934,"column":29},"end":{"line":934,"column":44}},{"start":{"line":934,"column":48},"end":{"line":934,"column":49}}]},"77":{"line":978,"type":"if","locations":[{"start":{"line":978,"column":4},"end":{"line":978,"column":4}},{"start":{"line":978,"column":4},"end":{"line":978,"column":4}}]},"78":{"line":978,"type":"binary-expr","locations":[{"start":{"line":978,"column":8},"end":{"line":978,"column":24}},{"start":{"line":978,"column":28},"end":{"line":978,"column":42}}]},"79":{"line":982,"type":"if","locations":[{"start":{"line":982,"column":4},"end":{"line":982,"column":4}},{"start":{"line":982,"column":4},"end":{"line":982,"column":4}}]},"80":{"line":982,"type":"binary-expr","locations":[{"start":{"line":982,"column":8},"end":{"line":982,"column":25}},{"start":{"line":982,"column":29},"end":{"line":982,"column":44}}]},"81":{"line":1050,"type":"binary-expr","locations":[{"start":{"line":1050,"column":18},"end":{"line":1050,"column":30}},{"start":{"line":1050,"column":34},"end":{"line":1050,"column":49}},{"start":{"line":1050,"column":54},"end":{"line":1050,"column":69}}]},"82":{"line":1051,"type":"binary-expr","locations":[{"start":{"line":1051,"column":20},"end":{"line":1051,"column":67}},{"start":{"line":1051,"column":72},"end":{"line":1051,"column":78}}]},"83":{"line":1051,"type":"cond-expr","locations":[{"start":{"line":1051,"column":30},"end":{"line":1051,"column":33}},{"start":{"line":1051,"column":36},"end":{"line":1051,"column":38}}]},"84":{"line":1051,"type":"cond-expr","locations":[{"start":{"line":1051,"column":58},"end":{"line":1051,"column":61}},{"start":{"line":1051,"column":64},"end":{"line":1051,"column":66}}]},"85":{"line":1055,"type":"binary-expr","locations":[{"start":{"line":1055,"column":24},"end":{"line":1055,"column":41}},{"start":{"line":1055,"column":45},"end":{"line":1055,"column":47}}]},"86":{"line":1058,"type":"binary-expr","locations":[{"start":{"line":1058,"column":9},"end":{"line":1058,"column":36}},{"start":{"line":1059,"column":8},"end":{"line":1063,"column":10}}]},"87":{"line":1068,"type":"if","locations":[{"start":{"line":1068,"column":4},"end":{"line":1068,"column":4}},{"start":{"line":1068,"column":4},"end":{"line":1068,"column":4}}]},"88":{"line":1070,"type":"cond-expr","locations":[{"start":{"line":1072,"column":17},"end":{"line":1072,"column":48}},{"start":{"line":1072,"column":52},"end":{"line":1072,"column":53}}]},"89":{"line":1070,"type":"binary-expr","locations":[{"start":{"line":1070,"column":13},"end":{"line":1070,"column":28}},{"start":{"line":1070,"column":32},"end":{"line":1070,"column":38}}]},"90":{"line":1076,"type":"cond-expr","locations":[{"start":{"line":1076,"column":21},"end":{"line":1076,"column":33}},{"start":{"line":1076,"column":38},"end":{"line":1076,"column":57}}]},"91":{"line":1076,"type":"binary-expr","locations":[{"start":{"line":1076,"column":21},"end":{"line":1076,"column":27}},{"start":{"line":1076,"column":31},"end":{"line":1076,"column":33}}]},"92":{"line":1076,"type":"binary-expr","locations":[{"start":{"line":1076,"column":38},"end":{"line":1076,"column":44}},{"start":{"line":1076,"column":48},"end":{"line":1076,"column":57}}]},"93":{"line":1109,"type":"cond-expr","locations":[{"start":{"line":1109,"column":40},"end":{"line":1109,"column":52}},{"start":{"line":1109,"column":55},"end":{"line":1109,"column":76}}]},"94":{"line":1113,"type":"if","locations":[{"start":{"line":1113,"column":12},"end":{"line":1113,"column":12}},{"start":{"line":1113,"column":12},"end":{"line":1113,"column":12}}]},"95":{"line":1119,"type":"if","locations":[{"start":{"line":1119,"column":16},"end":{"line":1119,"column":16}},{"start":{"line":1119,"column":16},"end":{"line":1119,"column":16}}]},"96":{"line":1119,"type":"binary-expr","locations":[{"start":{"line":1119,"column":22},"end":{"line":1119,"column":56}},{"start":{"line":1119,"column":60},"end":{"line":1119,"column":88}}]},"97":{"line":1123,"type":"binary-expr","locations":[{"start":{"line":1123,"column":29},"end":{"line":1123,"column":48}},{"start":{"line":1123,"column":52},"end":{"line":1123,"column":54}}]},"98":{"line":1133,"type":"cond-expr","locations":[{"start":{"line":1134,"column":12},"end":{"line":1134,"column":19}},{"start":{"line":1135,"column":12},"end":{"line":1135,"column":44}}]},"99":{"line":1133,"type":"binary-expr","locations":[{"start":{"line":1133,"column":17},"end":{"line":1133,"column":43}},{"start":{"line":1133,"column":48},"end":{"line":1133,"column":63}}]},"100":{"line":1188,"type":"binary-expr","locations":[{"start":{"line":1188,"column":18},"end":{"line":1188,"column":31}},{"start":{"line":1188,"column":35},"end":{"line":1188,"column":50}},{"start":{"line":1188,"column":55},"end":{"line":1188,"column":70}}]},"101":{"line":1189,"type":"binary-expr","locations":[{"start":{"line":1189,"column":20},"end":{"line":1189,"column":68}},{"start":{"line":1189,"column":73},"end":{"line":1189,"column":79}}]},"102":{"line":1189,"type":"cond-expr","locations":[{"start":{"line":1189,"column":30},"end":{"line":1189,"column":33}},{"start":{"line":1189,"column":36},"end":{"line":1189,"column":38}}]},"103":{"line":1189,"type":"cond-expr","locations":[{"start":{"line":1189,"column":59},"end":{"line":1189,"column":62}},{"start":{"line":1189,"column":65},"end":{"line":1189,"column":67}}]},"104":{"line":1193,"type":"if","locations":[{"start":{"line":1193,"column":4},"end":{"line":1193,"column":4}},{"start":{"line":1193,"column":4},"end":{"line":1193,"column":4}}]},"105":{"line":1194,"type":"binary-expr","locations":[{"start":{"line":1194,"column":29},"end":{"line":1194,"column":47}},{"start":{"line":1194,"column":51},"end":{"line":1194,"column":53}}]},"106":{"line":1198,"type":"binary-expr","locations":[{"start":{"line":1198,"column":13},"end":{"line":1198,"column":41}},{"start":{"line":1199,"column":12},"end":{"line":1203,"column":14}}]},"107":{"line":1205,"type":"if","locations":[{"start":{"line":1205,"column":11},"end":{"line":1205,"column":11}},{"start":{"line":1205,"column":11},"end":{"line":1205,"column":11}}]},"108":{"line":1212,"type":"if","locations":[{"start":{"line":1212,"column":4},"end":{"line":1212,"column":4}},{"start":{"line":1212,"column":4},"end":{"line":1212,"column":4}}]},"109":{"line":1212,"type":"binary-expr","locations":[{"start":{"line":1212,"column":8},"end":{"line":1212,"column":15}},{"start":{"line":1212,"column":19},"end":{"line":1212,"column":32}}]},"110":{"line":1337,"type":"if","locations":[{"start":{"line":1337,"column":4},"end":{"line":1337,"column":4}},{"start":{"line":1337,"column":4},"end":{"line":1337,"column":4}}]},"111":{"line":1337,"type":"binary-expr","locations":[{"start":{"line":1337,"column":8},"end":{"line":1337,"column":23}},{"start":{"line":1337,"column":27},"end":{"line":1337,"column":41}}]},"112":{"line":1341,"type":"if","locations":[{"start":{"line":1341,"column":4},"end":{"line":1341,"column":4}},{"start":{"line":1341,"column":4},"end":{"line":1341,"column":4}}]},"113":{"line":1341,"type":"binary-expr","locations":[{"start":{"line":1341,"column":8},"end":{"line":1341,"column":24}},{"start":{"line":1341,"column":28},"end":{"line":1341,"column":43}}]},"114":{"line":1368,"type":"binary-expr","locations":[{"start":{"line":1368,"column":14},"end":{"line":1368,"column":21}},{"start":{"line":1368,"column":25},"end":{"line":1368,"column":27}}]},"115":{"line":1369,"type":"binary-expr","locations":[{"start":{"line":1369,"column":22},"end":{"line":1369,"column":41}},{"start":{"line":1369,"column":45},"end":{"line":1369,"column":49}}]},"116":{"line":1378,"type":"if","locations":[{"start":{"line":1378,"column":8},"end":{"line":1378,"column":8}},{"start":{"line":1378,"column":8},"end":{"line":1378,"column":8}}]},"117":{"line":1381,"type":"if","locations":[{"start":{"line":1381,"column":12},"end":{"line":1381,"column":12}},{"start":{"line":1381,"column":12},"end":{"line":1381,"column":12}}]},"118":{"line":1385,"type":"if","locations":[{"start":{"line":1385,"column":15},"end":{"line":1385,"column":15}},{"start":{"line":1385,"column":15},"end":{"line":1385,"column":15}}]},"119":{"line":1393,"type":"if","locations":[{"start":{"line":1393,"column":4},"end":{"line":1393,"column":4}},{"start":{"line":1393,"column":4},"end":{"line":1393,"column":4}}]},"120":{"line":1393,"type":"binary-expr","locations":[{"start":{"line":1393,"column":10},"end":{"line":1393,"column":35}},{"start":{"line":1393,"column":39},"end":{"line":1393,"column":54}}]},"121":{"line":1403,"type":"if","locations":[{"start":{"line":1403,"column":8},"end":{"line":1403,"column":8}},{"start":{"line":1403,"column":8},"end":{"line":1403,"column":8}}]},"122":{"line":1405,"type":"binary-expr","locations":[{"start":{"line":1405,"column":28},"end":{"line":1405,"column":47}},{"start":{"line":1405,"column":51},"end":{"line":1405,"column":83}},{"start":{"line":1405,"column":88},"end":{"line":1405,"column":90}}]},"123":{"line":1415,"type":"cond-expr","locations":[{"start":{"line":1415,"column":45},"end":{"line":1415,"column":47}},{"start":{"line":1415,"column":50},"end":{"line":1415,"column":53}}]},"124":{"line":1439,"type":"if","locations":[{"start":{"line":1439,"column":4},"end":{"line":1439,"column":4}},{"start":{"line":1439,"column":4},"end":{"line":1439,"column":4}}]},"125":{"line":1443,"type":"if","locations":[{"start":{"line":1443,"column":8},"end":{"line":1443,"column":8}},{"start":{"line":1443,"column":8},"end":{"line":1443,"column":8}}]},"126":{"line":1443,"type":"binary-expr","locations":[{"start":{"line":1443,"column":12},"end":{"line":1443,"column":28}},{"start":{"line":1443,"column":32},"end":{"line":1443,"column":48}},{"start":{"line":1443,"column":52},"end":{"line":1443,"column":75}}]},"127":{"line":1455,"type":"if","locations":[{"start":{"line":1455,"column":20},"end":{"line":1455,"column":20}},{"start":{"line":1455,"column":20},"end":{"line":1455,"column":20}}]},"128":{"line":1463,"type":"if","locations":[{"start":{"line":1463,"column":8},"end":{"line":1463,"column":8}},{"start":{"line":1463,"column":8},"end":{"line":1463,"column":8}}]},"129":{"line":1463,"type":"binary-expr","locations":[{"start":{"line":1463,"column":12},"end":{"line":1463,"column":28}},{"start":{"line":1463,"column":32},"end":{"line":1463,"column":61}}]},"130":{"line":1467,"type":"if","locations":[{"start":{"line":1467,"column":16},"end":{"line":1467,"column":16}},{"start":{"line":1467,"column":16},"end":{"line":1467,"column":16}}]},"131":{"line":1474,"type":"if","locations":[{"start":{"line":1474,"column":8},"end":{"line":1474,"column":8}},{"start":{"line":1474,"column":8},"end":{"line":1474,"column":8}}]},"132":{"line":1474,"type":"binary-expr","locations":[{"start":{"line":1474,"column":12},"end":{"line":1474,"column":23}},{"start":{"line":1474,"column":27},"end":{"line":1474,"column":43}},{"start":{"line":1474,"column":48},"end":{"line":1474,"column":76}}]},"133":{"line":1479,"type":"if","locations":[{"start":{"line":1479,"column":4},"end":{"line":1479,"column":4}},{"start":{"line":1479,"column":4},"end":{"line":1479,"column":4}}]},"134":{"line":1513,"type":"if","locations":[{"start":{"line":1513,"column":4},"end":{"line":1513,"column":4}},{"start":{"line":1513,"column":4},"end":{"line":1513,"column":4}}]},"135":{"line":1516,"type":"if","locations":[{"start":{"line":1516,"column":11},"end":{"line":1516,"column":11}},{"start":{"line":1516,"column":11},"end":{"line":1516,"column":11}}]},"136":{"line":1547,"type":"if","locations":[{"start":{"line":1547,"column":4},"end":{"line":1547,"column":4}},{"start":{"line":1547,"column":4},"end":{"line":1547,"column":4}}]},"137":{"line":1548,"type":"if","locations":[{"start":{"line":1548,"column":8},"end":{"line":1548,"column":8}},{"start":{"line":1548,"column":8},"end":{"line":1548,"column":8}}]},"138":{"line":1558,"type":"if","locations":[{"start":{"line":1558,"column":4},"end":{"line":1558,"column":4}},{"start":{"line":1558,"column":4},"end":{"line":1558,"column":4}}]},"139":{"line":1564,"type":"if","locations":[{"start":{"line":1564,"column":12},"end":{"line":1564,"column":12}},{"start":{"line":1564,"column":12},"end":{"line":1564,"column":12}}]},"140":{"line":1570,"type":"if","locations":[{"start":{"line":1570,"column":20},"end":{"line":1570,"column":20}},{"start":{"line":1570,"column":20},"end":{"line":1570,"column":20}}]},"141":{"line":1577,"type":"if","locations":[{"start":{"line":1577,"column":12},"end":{"line":1577,"column":12}},{"start":{"line":1577,"column":12},"end":{"line":1577,"column":12}}]},"142":{"line":1577,"type":"binary-expr","locations":[{"start":{"line":1577,"column":16},"end":{"line":1577,"column":23}},{"start":{"line":1577,"column":27},"end":{"line":1577,"column":40}}]},"143":{"line":1586,"type":"cond-expr","locations":[{"start":{"line":1586,"column":51},"end":{"line":1586,"column":55}},{"start":{"line":1586,"column":58},"end":{"line":1586,"column":70}}]},"144":{"line":1592,"type":"if","locations":[{"start":{"line":1592,"column":16},"end":{"line":1592,"column":16}},{"start":{"line":1592,"column":16},"end":{"line":1592,"column":16}}]},"145":{"line":1603,"type":"if","locations":[{"start":{"line":1603,"column":20},"end":{"line":1603,"column":20}},{"start":{"line":1603,"column":20},"end":{"line":1603,"column":20}}]},"146":{"line":1604,"type":"binary-expr","locations":[{"start":{"line":1604,"column":31},"end":{"line":1604,"column":38}},{"start":{"line":1604,"column":42},"end":{"line":1604,"column":44}}]},"147":{"line":1607,"type":"cond-expr","locations":[{"start":{"line":1607,"column":39},"end":{"line":1607,"column":64}},{"start":{"line":1607,"column":67},"end":{"line":1607,"column":69}}]},"148":{"line":1608,"type":"if","locations":[{"start":{"line":1608,"column":20},"end":{"line":1608,"column":20}},{"start":{"line":1608,"column":20},"end":{"line":1608,"column":20}}]},"149":{"line":1611,"type":"binary-expr","locations":[{"start":{"line":1611,"column":27},"end":{"line":1611,"column":38}},{"start":{"line":1611,"column":42},"end":{"line":1611,"column":44}}]},"150":{"line":1614,"type":"if","locations":[{"start":{"line":1614,"column":16},"end":{"line":1614,"column":16}},{"start":{"line":1614,"column":16},"end":{"line":1614,"column":16}}]},"151":{"line":1617,"type":"if","locations":[{"start":{"line":1617,"column":16},"end":{"line":1617,"column":16}},{"start":{"line":1617,"column":16},"end":{"line":1617,"column":16}}]},"152":{"line":1617,"type":"binary-expr","locations":[{"start":{"line":1617,"column":20},"end":{"line":1617,"column":30}},{"start":{"line":1617,"column":34},"end":{"line":1617,"column":43}}]},"153":{"line":1620,"type":"if","locations":[{"start":{"line":1620,"column":16},"end":{"line":1620,"column":16}},{"start":{"line":1620,"column":16},"end":{"line":1620,"column":16}}]},"154":{"line":1623,"type":"if","locations":[{"start":{"line":1623,"column":16},"end":{"line":1623,"column":16}},{"start":{"line":1623,"column":16},"end":{"line":1623,"column":16}}]},"155":{"line":1640,"type":"if","locations":[{"start":{"line":1640,"column":16},"end":{"line":1640,"column":16}},{"start":{"line":1640,"column":16},"end":{"line":1640,"column":16}}]},"156":{"line":1641,"type":"if","locations":[{"start":{"line":1641,"column":20},"end":{"line":1641,"column":20}},{"start":{"line":1641,"column":20},"end":{"line":1641,"column":20}}]},"157":{"line":1644,"type":"binary-expr","locations":[{"start":{"line":1644,"column":27},"end":{"line":1644,"column":35}},{"start":{"line":1644,"column":39},"end":{"line":1644,"column":41}}]},"158":{"line":1652,"type":"if","locations":[{"start":{"line":1652,"column":4},"end":{"line":1652,"column":4}},{"start":{"line":1652,"column":4},"end":{"line":1652,"column":4}}]},"159":{"line":1653,"type":"if","locations":[{"start":{"line":1653,"column":8},"end":{"line":1653,"column":8}},{"start":{"line":1653,"column":8},"end":{"line":1653,"column":8}}]},"160":{"line":1675,"type":"if","locations":[{"start":{"line":1675,"column":4},"end":{"line":1675,"column":4}},{"start":{"line":1675,"column":4},"end":{"line":1675,"column":4}}]},"161":{"line":1694,"type":"cond-expr","locations":[{"start":{"line":1694,"column":35},"end":{"line":1694,"column":37}},{"start":{"line":1694,"column":40},"end":{"line":1694,"column":45}}]},"162":{"line":1698,"type":"if","locations":[{"start":{"line":1698,"column":8},"end":{"line":1698,"column":8}},{"start":{"line":1698,"column":8},"end":{"line":1698,"column":8}}]},"163":{"line":1700,"type":"if","locations":[{"start":{"line":1700,"column":12},"end":{"line":1700,"column":12}},{"start":{"line":1700,"column":12},"end":{"line":1700,"column":12}}]},"164":{"line":1700,"type":"binary-expr","locations":[{"start":{"line":1700,"column":16},"end":{"line":1700,"column":32}},{"start":{"line":1700,"column":36},"end":{"line":1700,"column":60}}]},"165":{"line":1708,"type":"if","locations":[{"start":{"line":1708,"column":4},"end":{"line":1708,"column":4}},{"start":{"line":1708,"column":4},"end":{"line":1708,"column":4}}]},"166":{"line":1709,"type":"if","locations":[{"start":{"line":1709,"column":8},"end":{"line":1709,"column":8}},{"start":{"line":1709,"column":8},"end":{"line":1709,"column":8}}]},"167":{"line":1709,"type":"binary-expr","locations":[{"start":{"line":1709,"column":12},"end":{"line":1709,"column":43}},{"start":{"line":1709,"column":47},"end":{"line":1709,"column":57}}]},"168":{"line":1717,"type":"cond-expr","locations":[{"start":{"line":1717,"column":35},"end":{"line":1717,"column":57}},{"start":{"line":1717,"column":60},"end":{"line":1717,"column":66}}]},"169":{"line":1733,"type":"if","locations":[{"start":{"line":1733,"column":8},"end":{"line":1733,"column":8}},{"start":{"line":1733,"column":8},"end":{"line":1733,"column":8}}]},"170":{"line":1733,"type":"binary-expr","locations":[{"start":{"line":1733,"column":12},"end":{"line":1733,"column":28}},{"start":{"line":1733,"column":32},"end":{"line":1733,"column":54}}]},"171":{"line":1756,"type":"if","locations":[{"start":{"line":1756,"column":8},"end":{"line":1756,"column":8}},{"start":{"line":1756,"column":8},"end":{"line":1756,"column":8}}]},"172":{"line":1759,"type":"if","locations":[{"start":{"line":1759,"column":8},"end":{"line":1759,"column":8}},{"start":{"line":1759,"column":8},"end":{"line":1759,"column":8}}]},"173":{"line":1765,"type":"if","locations":[{"start":{"line":1765,"column":8},"end":{"line":1765,"column":8}},{"start":{"line":1765,"column":8},"end":{"line":1765,"column":8}}]},"174":{"line":1765,"type":"binary-expr","locations":[{"start":{"line":1765,"column":12},"end":{"line":1765,"column":22}},{"start":{"line":1765,"column":26},"end":{"line":1765,"column":49}}]},"175":{"line":1786,"type":"cond-expr","locations":[{"start":{"line":1786,"column":26},"end":{"line":1786,"column":36}},{"start":{"line":1786,"column":39},"end":{"line":1786,"column":47}}]},"176":{"line":1832,"type":"cond-expr","locations":[{"start":{"line":1832,"column":39},"end":{"line":1832,"column":79}},{"start":{"line":1832,"column":83},"end":{"line":1832,"column":92}}]},"177":{"line":1834,"type":"if","locations":[{"start":{"line":1834,"column":8},"end":{"line":1834,"column":8}},{"start":{"line":1834,"column":8},"end":{"line":1834,"column":8}}]},"178":{"line":1834,"type":"binary-expr","locations":[{"start":{"line":1834,"column":12},"end":{"line":1834,"column":18}},{"start":{"line":1834,"column":22},"end":{"line":1834,"column":54}}]},"179":{"line":1840,"type":"cond-expr","locations":[{"start":{"line":1841,"column":16},"end":{"line":1841,"column":18}},{"start":{"line":1841,"column":21},"end":{"line":1841,"column":27}}]},"180":{"line":1840,"type":"binary-expr","locations":[{"start":{"line":1840,"column":12},"end":{"line":1840,"column":43}},{"start":{"line":1840,"column":47},"end":{"line":1840,"column":82}}]},"181":{"line":1855,"type":"if","locations":[{"start":{"line":1855,"column":8},"end":{"line":1855,"column":8}},{"start":{"line":1855,"column":8},"end":{"line":1855,"column":8}}]},"182":{"line":1856,"type":"binary-expr","locations":[{"start":{"line":1856,"column":12},"end":{"line":1860,"column":13}},{"start":{"line":1861,"column":12},"end":{"line":1861,"column":28}}]},"183":{"line":1857,"type":"binary-expr","locations":[{"start":{"line":1857,"column":16},"end":{"line":1857,"column":38}},{"start":{"line":1858,"column":16},"end":{"line":1858,"column":39}},{"start":{"line":1859,"column":16},"end":{"line":1859,"column":53}}]},"184":{"line":1886,"type":"if","locations":[{"start":{"line":1886,"column":8},"end":{"line":1886,"column":8}},{"start":{"line":1886,"column":8},"end":{"line":1886,"column":8}}]},"185":{"line":1889,"type":"if","locations":[{"start":{"line":1889,"column":8},"end":{"line":1889,"column":8}},{"start":{"line":1889,"column":8},"end":{"line":1889,"column":8}}]},"186":{"line":1889,"type":"binary-expr","locations":[{"start":{"line":1889,"column":12},"end":{"line":1889,"column":33}},{"start":{"line":1889,"column":37},"end":{"line":1889,"column":61}}]},"187":{"line":1892,"type":"if","locations":[{"start":{"line":1892,"column":8},"end":{"line":1892,"column":8}},{"start":{"line":1892,"column":8},"end":{"line":1892,"column":8}}]},"188":{"line":1909,"type":"if","locations":[{"start":{"line":1909,"column":8},"end":{"line":1909,"column":8}},{"start":{"line":1909,"column":8},"end":{"line":1909,"column":8}}]}},"code":["/*!"," * XRegExp 3.2.0"," * <xregexp.com>"," * Steven Levithan (c) 2007-2017 MIT License"," */","","'use strict';","","/**"," * XRegExp provides augmented, extensible regular expressions. You get additional regex syntax and"," * flags, beyond what browsers support natively. XRegExp is also a regex utility belt with tools to"," * make your client-side grepping simpler and more powerful, while freeing you from related"," * cross-browser inconsistencies."," */","","// ==--------------------------==","// Private stuff","// ==--------------------------==","","// Property name used for extended regex instance data","var REGEX_DATA = 'xregexp';","// Optional features that can be installed and uninstalled","var features = {","    astral: false,","    natives: false","};","// Native methods to use and restore ('native' is an ES3 reserved keyword)","var nativ = {","    exec: RegExp.prototype.exec,","    test: RegExp.prototype.test,","    match: String.prototype.match,","    replace: String.prototype.replace,","    split: String.prototype.split","};","// Storage for fixed/extended native methods","var fixed = {};","// Storage for regexes cached by `XRegExp.cache`","var regexCache = {};","// Storage for pattern details cached by the `XRegExp` constructor","var patternCache = {};","// Storage for regex syntax tokens added internally or by `XRegExp.addToken`","var tokens = [];","// Token scopes","var defaultScope = 'default';","var classScope = 'class';","// Regexes that match native regex syntax, including octals","var nativeTokens = {","    // Any native multicharacter token in default scope, or any single character","    'default': /\\\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9]\\d*|x[\\dA-Fa-f]{2}|u(?:[\\dA-Fa-f]{4}|{[\\dA-Fa-f]+})|c[A-Za-z]|[\\s\\S])|\\(\\?(?:[:=!]|<[=!])|[?*+]\\?|{\\d+(?:,\\d*)?}\\??|[\\s\\S]/,","    // Any native multicharacter token in character class scope, or any single character","    'class': /\\\\(?:[0-3][0-7]{0,2}|[4-7][0-7]?|x[\\dA-Fa-f]{2}|u(?:[\\dA-Fa-f]{4}|{[\\dA-Fa-f]+})|c[A-Za-z]|[\\s\\S])|[\\s\\S]/","};","// Any backreference or dollar-prefixed character in replacement strings","var replacementToken = /\\$(?:{([\\w$]+)}|(\\d\\d?|[\\s\\S]))/g;","// Check for correct `exec` handling of nonparticipating capturing groups","var correctExecNpcg = nativ.exec.call(/()??/, '')[1] === undefined;","// Check for ES6 `flags` prop support","var hasFlagsProp = /x/.flags !== undefined;","// Shortcut to `Object.prototype.toString`","var toString = {}.toString;","","function hasNativeFlag(flag) {","    // Can't check based on the presence of properties/getters since browsers might support such","    // properties even when they don't support the corresponding flag in regex construction (tested","    // in Chrome 48, where `'unicode' in /x/` is true but trying to construct a regex with flag `u`","    // throws an error)","    var isSupported = true;","    try {","        // Can't use regex literals for testing even in a `try` because regex literals with","        // unsupported flags cause a compilation error in IE","        new RegExp('', flag);","    } catch (exception) {","        isSupported = false;","    }","    return isSupported;","}","// Check for ES6 `u` flag support","var hasNativeU = hasNativeFlag('u');","// Check for ES6 `y` flag support","var hasNativeY = hasNativeFlag('y');","// Tracker for known flags, including addon flags","var registeredFlags = {","    g: true,","    i: true,","    m: true,","    u: hasNativeU,","    y: hasNativeY","};","","/**"," * Attaches extended data and `XRegExp.prototype` properties to a regex object."," *"," * @private"," * @param {RegExp} regex Regex to augment."," * @param {Array} captureNames Array with capture names, or `null`."," * @param {String} xSource XRegExp pattern used to generate `regex`, or `null` if N/A."," * @param {String} xFlags XRegExp flags used to generate `regex`, or `null` if N/A."," * @param {Boolean} [isInternalOnly=false] Whether the regex will be used only for internal"," *   operations, and never exposed to users. For internal-only regexes, we can improve perf by"," *   skipping some operations like attaching `XRegExp.prototype` properties."," * @returns {RegExp} Augmented regex."," */","function augment(regex, captureNames, xSource, xFlags, isInternalOnly) {","    var p;","","    regex[REGEX_DATA] = {","        captureNames: captureNames","    };","","    if (isInternalOnly) {","        return regex;","    }","","    // Can't auto-inherit these since the XRegExp constructor returns a nonprimitive value","    if (regex.__proto__) {","        regex.__proto__ = XRegExp.prototype;","    } else {","        for (p in XRegExp.prototype) {","            // An `XRegExp.prototype.hasOwnProperty(p)` check wouldn't be worth it here, since this","            // is performance sensitive, and enumerable `Object.prototype` or `RegExp.prototype`","            // extensions exist on `regex.prototype` anyway","            regex[p] = XRegExp.prototype[p];","        }","    }","","    regex[REGEX_DATA].source = xSource;","    // Emulate the ES6 `flags` prop by ensuring flags are in alphabetical order","    regex[REGEX_DATA].flags = xFlags ? xFlags.split('').sort().join('') : xFlags;","","    return regex;","}","","/**"," * Removes any duplicate characters from the provided string."," *"," * @private"," * @param {String} str String to remove duplicate characters from."," * @returns {String} String with any duplicate characters removed."," */","function clipDuplicates(str) {","    return nativ.replace.call(str, /([\\s\\S])(?=[\\s\\S]*\\1)/g, '');","}","","/**"," * Copies a regex object while preserving extended data and augmenting with `XRegExp.prototype`"," * properties. The copy has a fresh `lastIndex` property (set to zero). Allows adding and removing"," * flags g and y while copying the regex."," *"," * @private"," * @param {RegExp} regex Regex to copy."," * @param {Object} [options] Options object with optional properties:"," *   - `addG` {Boolean} Add flag g while copying the regex."," *   - `addY` {Boolean} Add flag y while copying the regex."," *   - `removeG` {Boolean} Remove flag g while copying the regex."," *   - `removeY` {Boolean} Remove flag y while copying the regex."," *   - `isInternalOnly` {Boolean} Whether the copied regex will be used only for internal"," *     operations, and never exposed to users. For internal-only regexes, we can improve perf by"," *     skipping some operations like attaching `XRegExp.prototype` properties."," *   - `source` {String} Overrides `<regex>.source`, for special cases."," * @returns {RegExp} Copy of the provided regex, possibly with modified flags."," */","function copyRegex(regex, options) {","    if (!XRegExp.isRegExp(regex)) {","        throw new TypeError('Type RegExp expected');","    }","","    var xData = regex[REGEX_DATA] || {};","    var flags = getNativeFlags(regex);","    var flagsToAdd = '';","    var flagsToRemove = '';","    var xregexpSource = null;","    var xregexpFlags = null;","","    options = options || {};","","    if (options.removeG) {flagsToRemove += 'g';}","    if (options.removeY) {flagsToRemove += 'y';}","    if (flagsToRemove) {","        flags = nativ.replace.call(flags, new RegExp('[' + flagsToRemove + ']+', 'g'), '');","    }","","    if (options.addG) {flagsToAdd += 'g';}","    if (options.addY) {flagsToAdd += 'y';}","    if (flagsToAdd) {","        flags = clipDuplicates(flags + flagsToAdd);","    }","","    if (!options.isInternalOnly) {","        if (xData.source !== undefined) {","            xregexpSource = xData.source;","        }","        // null or undefined; don't want to add to `flags` if the previous value was null, since","        // that indicates we're not tracking original precompilation flags","        if (xData.flags != null) {","            // Flags are only added for non-internal regexes by `XRegExp.globalize`. Flags are never","            // removed for non-internal regexes, so don't need to handle it","            xregexpFlags = flagsToAdd ? clipDuplicates(xData.flags + flagsToAdd) : xData.flags;","        }","    }","","    // Augment with `XRegExp.prototype` properties, but use the native `RegExp` constructor to avoid","    // searching for special tokens. That would be wrong for regexes constructed by `RegExp`, and","    // unnecessary for regexes constructed by `XRegExp` because the regex has already undergone the","    // translation to native regex syntax","    regex = augment(","        new RegExp(options.source || regex.source, flags),","        hasNamedCapture(regex) ? xData.captureNames.slice(0) : null,","        xregexpSource,","        xregexpFlags,","        options.isInternalOnly","    );","","    return regex;","}","","/**"," * Converts hexadecimal to decimal."," *"," * @private"," * @param {String} hex"," * @returns {Number}"," */","function dec(hex) {","    return parseInt(hex, 16);","}","","/**"," * Returns a pattern that can be used in a native RegExp in place of an ignorable token such as an"," * inline comment or whitespace with flag x. This is used directly as a token handler function"," * passed to `XRegExp.addToken`."," *"," * @private"," * @param {String} match Match arg of `XRegExp.addToken` handler"," * @param {String} scope Scope arg of `XRegExp.addToken` handler"," * @param {String} flags Flags arg of `XRegExp.addToken` handler"," * @returns {String} Either '' or '(?:)', depending on which is needed in the context of the match."," */","function getContextualTokenSeparator(match, scope, flags) {","    if (","        // No need to separate tokens if at the beginning or end of a group","        match.input.charAt(match.index - 1) === '(' ||","        match.input.charAt(match.index + match[0].length) === ')' ||","        // Avoid separating tokens when the following token is a quantifier","        isPatternNext(match.input, match.index + match[0].length, flags, '[?*+]|{\\\\d+(?:,\\\\d*)?}')","    ) {","        return '';","    }","    // Keep tokens separated. This avoids e.g. inadvertedly changing `\\1 1` or `\\1(?#)1` to `\\11`.","    // This also ensures all tokens remain as discrete atoms, e.g. it avoids converting the syntax","    // error `(? :` into `(?:`.","    return '(?:)';","}","","/**"," * Returns native `RegExp` flags used by a regex object."," *"," * @private"," * @param {RegExp} regex Regex to check."," * @returns {String} Native flags in use."," */","function getNativeFlags(regex) {","    return hasFlagsProp ?","        regex.flags :","        // Explicitly using `RegExp.prototype.toString` (rather than e.g. `String` or concatenation","        // with an empty string) allows this to continue working predictably when","        // `XRegExp.proptotype.toString` is overridden","        nativ.exec.call(/\\/([a-z]*)$/i, RegExp.prototype.toString.call(regex))[1];","}","","/**"," * Determines whether a regex has extended instance data used to track capture names."," *"," * @private"," * @param {RegExp} regex Regex to check."," * @returns {Boolean} Whether the regex uses named capture."," */","function hasNamedCapture(regex) {","    return !!(regex[REGEX_DATA] && regex[REGEX_DATA].captureNames);","}","","/**"," * Converts decimal to hexadecimal."," *"," * @private"," * @param {Number|String} dec"," * @returns {String}"," */","function hex(dec) {","    return parseInt(dec, 10).toString(16);","}","","/**"," * Returns the first index at which a given value can be found in an array."," *"," * @private"," * @param {Array} array Array to search."," * @param {*} value Value to locate in the array."," * @returns {Number} Zero-based index at which the item is found, or -1."," */","function indexOf(array, value) {","    var len = array.length;","    var i;","","    for (i = 0; i < len; ++i) {","        if (array[i] === value) {","            return i;","        }","    }","","    return -1;","}","","/**"," * Checks whether the next nonignorable token after the specified position matches the"," * `needlePattern`"," *"," * @private"," * @param {String} pattern Pattern to search within."," * @param {Number} pos Index in `pattern` to search at."," * @param {String} flags Flags used by the pattern."," * @param {String} needlePattern Pattern to match the next token against."," * @returns {Boolean} Whether the next nonignorable token matches `needlePattern`"," */","function isPatternNext(pattern, pos, flags, needlePattern) {","    var inlineCommentPattern = '\\\\(\\\\?#[^)]*\\\\)';","    var lineCommentPattern = '#[^#\\\\n]*';","    var patternsToIgnore = flags.indexOf('x') > -1 ?","        // Ignore any leading whitespace, line comments, and inline comments","        ['\\\\s', lineCommentPattern, inlineCommentPattern] :","        // Ignore any leading inline comments","        [inlineCommentPattern];","    return nativ.test.call(","        new RegExp('^(?:' + patternsToIgnore.join('|') + ')*(?:' + needlePattern + ')'),","        pattern.slice(pos)","    );","}","","/**"," * Determines whether a value is of the specified type, by resolving its internal [[Class]]."," *"," * @private"," * @param {*} value Object to check."," * @param {String} type Type to check for, in TitleCase."," * @returns {Boolean} Whether the object matches the type."," */","function isType(value, type) {","    return toString.call(value) === '[object ' + type + ']';","}","","/**"," * Adds leading zeros if shorter than four characters. Used for fixed-length hexadecimal values."," *"," * @private"," * @param {String} str"," * @returns {String}"," */","function pad4(str) {","    while (str.length < 4) {","        str = '0' + str;","    }","    return str;","}","","/**"," * Checks for flag-related errors, and strips/applies flags in a leading mode modifier. Offloads"," * the flag preparation logic from the `XRegExp` constructor."," *"," * @private"," * @param {String} pattern Regex pattern, possibly with a leading mode modifier."," * @param {String} flags Any combination of flags."," * @returns {Object} Object with properties `pattern` and `flags`."," */","function prepareFlags(pattern, flags) {","    var i;","","    // Recent browsers throw on duplicate flags, so copy this behavior for nonnative flags","    if (clipDuplicates(flags) !== flags) {","        throw new SyntaxError('Invalid duplicate regex flag ' + flags);","    }","","    // Strip and apply a leading mode modifier with any combination of flags except g or y","    pattern = nativ.replace.call(pattern, /^\\(\\?([\\w$]+)\\)/, function($0, $1) {","        if (nativ.test.call(/[gy]/, $1)) {","            throw new SyntaxError('Cannot use flag g or y in mode modifier ' + $0);","        }","        // Allow duplicate flags within the mode modifier","        flags = clipDuplicates(flags + $1);","        return '';","    });","","    // Throw on unknown native or nonnative flags","    for (i = 0; i < flags.length; ++i) {","        if (!registeredFlags[flags.charAt(i)]) {","            throw new SyntaxError('Unknown regex flag ' + flags.charAt(i));","        }","    }","","    return {","        pattern: pattern,","        flags: flags","    };","}","","/**"," * Prepares an options object from the given value."," *"," * @private"," * @param {String|Object} value Value to convert to an options object."," * @returns {Object} Options object."," */","function prepareOptions(value) {","    var options = {};","","    if (isType(value, 'String')) {","        XRegExp.forEach(value, /[^\\s,]+/, function(match) {","            options[match] = true;","        });","","        return options;","    }","","    return value;","}","","/**"," * Registers a flag so it doesn't throw an 'unknown flag' error."," *"," * @private"," * @param {String} flag Single-character flag to register."," */","function registerFlag(flag) {","    if (!/^[\\w$]$/.test(flag)) {","        throw new Error('Flag must be a single character A-Za-z0-9_$');","    }","","    registeredFlags[flag] = true;","}","","/**"," * Runs built-in and custom regex syntax tokens in reverse insertion order at the specified"," * position, until a match is found."," *"," * @private"," * @param {String} pattern Original pattern from which an XRegExp object is being built."," * @param {String} flags Flags being used to construct the regex."," * @param {Number} pos Position to search for tokens within `pattern`."," * @param {Number} scope Regex scope to apply: 'default' or 'class'."," * @param {Object} context Context object to use for token handler functions."," * @returns {Object} Object with properties `matchLength`, `output`, and `reparse`; or `null`."," */","function runTokens(pattern, flags, pos, scope, context) {","    var i = tokens.length;","    var leadChar = pattern.charAt(pos);","    var result = null;","    var match;","    var t;","","    // Run in reverse insertion order","    while (i--) {","        t = tokens[i];","        if (","            (t.leadChar && t.leadChar !== leadChar) ||","            (t.scope !== scope && t.scope !== 'all') ||","            (t.flag && flags.indexOf(t.flag) === -1)","        ) {","            continue;","        }","","        match = XRegExp.exec(pattern, t.regex, pos, 'sticky');","        if (match) {","            result = {","                matchLength: match[0].length,","                output: t.handler.call(context, match, scope, flags),","                reparse: t.reparse","            };","            // Finished with token tests","            break;","        }","    }","","    return result;","}","","/**"," * Enables or disables implicit astral mode opt-in. When enabled, flag A is automatically added to"," * all new regexes created by XRegExp. This causes an error to be thrown when creating regexes if"," * the Unicode Base addon is not available, since flag A is registered by that addon."," *"," * @private"," * @param {Boolean} on `true` to enable; `false` to disable."," */","function setAstral(on) {","    features.astral = on;","}","","/**"," * Enables or disables native method overrides."," *"," * @private"," * @param {Boolean} on `true` to enable; `false` to disable."," */","function setNatives(on) {","    RegExp.prototype.exec = (on ? fixed : nativ).exec;","    RegExp.prototype.test = (on ? fixed : nativ).test;","    String.prototype.match = (on ? fixed : nativ).match;","    String.prototype.replace = (on ? fixed : nativ).replace;","    String.prototype.split = (on ? fixed : nativ).split;","","    features.natives = on;","}","","/**"," * Returns the object, or throws an error if it is `null` or `undefined`. This is used to follow"," * the ES5 abstract operation `ToObject`."," *"," * @private"," * @param {*} value Object to check and return."," * @returns {*} The provided object."," */","function toObject(value) {","    // null or undefined","    if (value == null) {","        throw new TypeError('Cannot convert null or undefined to object');","    }","","    return value;","}","","// ==--------------------------==","// Constructor","// ==--------------------------==","","/**"," * Creates an extended regular expression object for matching text with a pattern. Differs from a"," * native regular expression in that additional syntax and flags are supported. The returned object"," * is in fact a native `RegExp` and works with all native methods."," *"," * @class XRegExp"," * @constructor"," * @param {String|RegExp} pattern Regex pattern string, or an existing regex object to copy."," * @param {String} [flags] Any combination of flags."," *   Native flags:"," *     - `g` - global"," *     - `i` - ignore case"," *     - `m` - multiline anchors"," *     - `u` - unicode (ES6)"," *     - `y` - sticky (Firefox 3+, ES6)"," *   Additional XRegExp flags:"," *     - `n` - explicit capture"," *     - `s` - dot matches all (aka singleline)"," *     - `x` - free-spacing and line comments (aka extended)"," *     - `A` - astral (requires the Unicode Base addon)"," *   Flags cannot be provided when constructing one `RegExp` from another."," * @returns {RegExp} Extended regular expression object."," * @example"," *"," * // With named capture and flag x"," * XRegExp('(?<year>  [0-9]{4} ) -?  # year  \\n\\"," *          (?<month> [0-9]{2} ) -?  # month \\n\\"," *          (?<day>   [0-9]{2} )     # day   ', 'x');"," *"," * // Providing a regex object copies it. Native regexes are recompiled using native (not XRegExp)"," * // syntax. Copies maintain extended data, are augmented with `XRegExp.prototype` properties, and"," * // have fresh `lastIndex` properties (set to zero)."," * XRegExp(/regex/);"," */","function XRegExp(pattern, flags) {","    if (XRegExp.isRegExp(pattern)) {","        if (flags !== undefined) {","            throw new TypeError('Cannot supply flags when copying a RegExp');","        }","        return copyRegex(pattern);","    }","","    // Copy the argument behavior of `RegExp`","    pattern = pattern === undefined ? '' : String(pattern);","    flags = flags === undefined ? '' : String(flags);","","    if (XRegExp.isInstalled('astral') && flags.indexOf('A') === -1) {","        // This causes an error to be thrown if the Unicode Base addon is not available","        flags += 'A';","    }","","    if (!patternCache[pattern]) {","        patternCache[pattern] = {};","    }","","    if (!patternCache[pattern][flags]) {","        var context = {","            hasNamedCapture: false,","            captureNames: []","        };","        var scope = defaultScope;","        var output = '';","        var pos = 0;","        var result;","","        // Check for flag-related errors, and strip/apply flags in a leading mode modifier","        var applied = prepareFlags(pattern, flags);","        var appliedPattern = applied.pattern;","        var appliedFlags = applied.flags;","","        // Use XRegExp's tokens to translate the pattern to a native regex pattern.","        // `appliedPattern.length` may change on each iteration if tokens use `reparse`","        while (pos < appliedPattern.length) {","            do {","                // Check for custom tokens at the current position","                result = runTokens(appliedPattern, appliedFlags, pos, scope, context);","                // If the matched token used the `reparse` option, splice its output into the","                // pattern before running tokens again at the same position","                if (result && result.reparse) {","                    appliedPattern = appliedPattern.slice(0, pos) +","                        result.output +","                        appliedPattern.slice(pos + result.matchLength);","                }","            } while (result && result.reparse);","","            if (result) {","                output += result.output;","                pos += (result.matchLength || 1);","            } else {","                // Get the native token at the current position","                var token = XRegExp.exec(appliedPattern, nativeTokens[scope], pos, 'sticky')[0];","                output += token;","                pos += token.length;","                if (token === '[' && scope === defaultScope) {","                    scope = classScope;","                } else if (token === ']' && scope === classScope) {","                    scope = defaultScope;","                }","            }","        }","","        patternCache[pattern][flags] = {","            // Use basic cleanup to collapse repeated empty groups like `(?:)(?:)` to `(?:)`. Empty","            // groups are sometimes inserted during regex transpilation in order to keep tokens","            // separated. However, more than one empty group in a row is never needed.","            pattern: nativ.replace.call(output, /(?:\\(\\?:\\))+/g, '(?:)'),","            // Strip all but native flags","            flags: nativ.replace.call(appliedFlags, /[^gimuy]+/g, ''),","            // `context.captureNames` has an item for each capturing group, even if unnamed","            captures: context.hasNamedCapture ? context.captureNames : null","        };","    }","","    var generated = patternCache[pattern][flags];","    return augment(","        new RegExp(generated.pattern, generated.flags),","        generated.captures,","        pattern,","        flags","    );","}","","// Add `RegExp.prototype` to the prototype chain","XRegExp.prototype = new RegExp();","","// ==--------------------------==","// Public properties","// ==--------------------------==","","/**"," * The XRegExp version number as a string containing three dot-separated parts. For example,"," * '2.0.0-beta-3'."," *"," * @static"," * @memberOf XRegExp"," * @type String"," */","XRegExp.version = '3.2.0';","","// ==--------------------------==","// Public methods","// ==--------------------------==","","// Intentionally undocumented; used in tests and addons","XRegExp._clipDuplicates = clipDuplicates;","XRegExp._hasNativeFlag = hasNativeFlag;","XRegExp._dec = dec;","XRegExp._hex = hex;","XRegExp._pad4 = pad4;","","/**"," * Extends XRegExp syntax and allows custom flags. This is used internally and can be used to"," * create XRegExp addons. If more than one token can match the same string, the last added wins."," *"," * @memberOf XRegExp"," * @param {RegExp} regex Regex object that matches the new token."," * @param {Function} handler Function that returns a new pattern string (using native regex syntax)"," *   to replace the matched token within all future XRegExp regexes. Has access to persistent"," *   properties of the regex being built, through `this`. Invoked with three arguments:"," *   - The match array, with named backreference properties."," *   - The regex scope where the match was found: 'default' or 'class'."," *   - The flags used by the regex, including any flags in a leading mode modifier."," *   The handler function becomes part of the XRegExp construction process, so be careful not to"," *   construct XRegExps within the function or you will trigger infinite recursion."," * @param {Object} [options] Options object with optional properties:"," *   - `scope` {String} Scope where the token applies: 'default', 'class', or 'all'."," *   - `flag` {String} Single-character flag that triggers the token. This also registers the"," *     flag, which prevents XRegExp from throwing an 'unknown flag' error when the flag is used."," *   - `optionalFlags` {String} Any custom flags checked for within the token `handler` that are"," *     not required to trigger the token. This registers the flags, to prevent XRegExp from"," *     throwing an 'unknown flag' error when any of the flags are used."," *   - `reparse` {Boolean} Whether the `handler` function's output should not be treated as"," *     final, and instead be reparseable by other tokens (including the current token). Allows"," *     token chaining or deferring."," *   - `leadChar` {String} Single character that occurs at the beginning of any successful match"," *     of the token (not always applicable). This doesn't change the behavior of the token unless"," *     you provide an erroneous value. However, providing it can increase the token's performance"," *     since the token can be skipped at any positions where this character doesn't appear."," * @example"," *"," * // Basic usage: Add \\a for the ALERT control code"," * XRegExp.addToken("," *   /\\\\a/,"," *   function() {return '\\\\x07';},"," *   {scope: 'all'}"," * );"," * XRegExp('\\\\a[\\\\a-\\\\n]+').test('\\x07\\n\\x07'); // -> true"," *"," * // Add the U (ungreedy) flag from PCRE and RE2, which reverses greedy and lazy quantifiers."," * // Since `scope` is not specified, it uses 'default' (i.e., transformations apply outside of"," * // character classes only)"," * XRegExp.addToken("," *   /([?*+]|{\\d+(?:,\\d*)?})(\\??)/,"," *   function(match) {return match[1] + (match[2] ? '' : '?');},"," *   {flag: 'U'}"," * );"," * XRegExp('a+', 'U').exec('aaa')[0]; // -> 'a'"," * XRegExp('a+?', 'U').exec('aaa')[0]; // -> 'aaa'"," */","XRegExp.addToken = function(regex, handler, options) {","    options = options || {};","    var optionalFlags = options.optionalFlags;","    var i;","","    if (options.flag) {","        registerFlag(options.flag);","    }","","    if (optionalFlags) {","        optionalFlags = nativ.split.call(optionalFlags, '');","        for (i = 0; i < optionalFlags.length; ++i) {","            registerFlag(optionalFlags[i]);","        }","    }","","    // Add to the private list of syntax tokens","    tokens.push({","        regex: copyRegex(regex, {","            addG: true,","            addY: hasNativeY,","            isInternalOnly: true","        }),","        handler: handler,","        scope: options.scope || defaultScope,","        flag: options.flag,","        reparse: options.reparse,","        leadChar: options.leadChar","    });","","    // Reset the pattern cache used by the `XRegExp` constructor, since the same pattern and flags","    // might now produce different results","    XRegExp.cache.flush('patterns');","};","","/**"," * Caches and returns the result of calling `XRegExp(pattern, flags)`. On any subsequent call with"," * the same pattern and flag combination, the cached copy of the regex is returned."," *"," * @memberOf XRegExp"," * @param {String} pattern Regex pattern string."," * @param {String} [flags] Any combination of XRegExp flags."," * @returns {RegExp} Cached XRegExp object."," * @example"," *"," * while (match = XRegExp.cache('.', 'gs').exec(str)) {"," *   // The regex is compiled once only"," * }"," */","XRegExp.cache = function(pattern, flags) {","    if (!regexCache[pattern]) {","        regexCache[pattern] = {};","    }","    return regexCache[pattern][flags] || (","        regexCache[pattern][flags] = XRegExp(pattern, flags)","    );","};","","// Intentionally undocumented; used in tests","XRegExp.cache.flush = function(cacheName) {","    if (cacheName === 'patterns') {","        // Flush the pattern cache used by the `XRegExp` constructor","        patternCache = {};","    } else {","        // Flush the regex cache populated by `XRegExp.cache`","        regexCache = {};","    }","};","","/**"," * Escapes any regular expression metacharacters, for use when matching literal strings. The result"," * can safely be used at any point within a regex that uses any flags."," *"," * @memberOf XRegExp"," * @param {String} str String to escape."," * @returns {String} String with regex metacharacters escaped."," * @example"," *"," * XRegExp.escape('Escaped? <.>');"," * // -> 'Escaped\\?\\ <\\.>'"," */","XRegExp.escape = function(str) {","    return nativ.replace.call(toObject(str), /[-\\[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');","};","","/**"," * Executes a regex search in a specified string. Returns a match array or `null`. If the provided"," * regex uses named capture, named backreference properties are included on the match array."," * Optional `pos` and `sticky` arguments specify the search start position, and whether the match"," * must start at the specified position only. The `lastIndex` property of the provided regex is not"," * used, but is updated for compatibility. Also fixes browser bugs compared to the native"," * `RegExp.prototype.exec` and can be used reliably cross-browser."," *"," * @memberOf XRegExp"," * @param {String} str String to search."," * @param {RegExp} regex Regex to search with."," * @param {Number} [pos=0] Zero-based index at which to start the search."," * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position"," *   only. The string `'sticky'` is accepted as an alternative to `true`."," * @returns {Array} Match array with named backreference properties, or `null`."," * @example"," *"," * // Basic use, with named backreference"," * var match = XRegExp.exec('U+2620', XRegExp('U\\\\+(?<hex>[0-9A-F]{4})'));"," * match.hex; // -> '2620'"," *"," * // With pos and sticky, in a loop"," * var pos = 2, result = [], match;"," * while (match = XRegExp.exec('<1><2><3><4>5<6>', /<(\\d)>/, pos, 'sticky')) {"," *   result.push(match[1]);"," *   pos = match.index + match[0].length;"," * }"," * // result -> ['2', '3', '4']"," */","XRegExp.exec = function(str, regex, pos, sticky) {","    var cacheKey = 'g';","    var addY = false;","    var fakeY = false;","    var match;","    var r2;","","    addY = hasNativeY && !!(sticky || (regex.sticky && sticky !== false));","    if (addY) {","        cacheKey += 'y';","    } else if (sticky) {","        // Simulate sticky matching by appending an empty capture to the original regex. The","        // resulting regex will succeed no matter what at the current index (set with `lastIndex`),","        // and will not search the rest of the subject string. We'll know that the original regex","        // has failed if that last capture is `''` rather than `undefined` (i.e., if that last","        // capture participated in the match).","        fakeY = true;","        cacheKey += 'FakeY';","    }","","    regex[REGEX_DATA] = regex[REGEX_DATA] || {};","","    // Shares cached copies with `XRegExp.match`/`replace`","    r2 = regex[REGEX_DATA][cacheKey] || (","        regex[REGEX_DATA][cacheKey] = copyRegex(regex, {","            addG: true,","            addY: addY,","            source: fakeY ? regex.source + '|()' : undefined,","            removeY: sticky === false,","            isInternalOnly: true","        })","    );","","    pos = pos || 0;","    r2.lastIndex = pos;","","    // Fixed `exec` required for `lastIndex` fix, named backreferences, etc.","    match = fixed.exec.call(r2, str);","","    // Get rid of the capture added by the pseudo-sticky matcher if needed. An empty string means","    // the original regexp failed (see above).","    if (fakeY && match && match.pop() === '') {","        match = null;","    }","","    if (regex.global) {","        regex.lastIndex = match ? r2.lastIndex : 0;","    }","","    return match;","};","","/**"," * Executes a provided function once per regex match. Searches always start at the beginning of the"," * string and continue until the end, regardless of the state of the regex's `global` property and"," * initial `lastIndex`."," *"," * @memberOf XRegExp"," * @param {String} str String to search."," * @param {RegExp} regex Regex to search with."," * @param {Function} callback Function to execute for each match. Invoked with four arguments:"," *   - The match array, with named backreference properties."," *   - The zero-based match index."," *   - The string being traversed."," *   - The regex object being used to traverse the string."," * @example"," *"," * // Extracts every other digit from a string"," * var evens = [];"," * XRegExp.forEach('1a2345', /\\d/, function(match, i) {"," *   if (i % 2) evens.push(+match[0]);"," * });"," * // evens -> [2, 4]"," */","XRegExp.forEach = function(str, regex, callback) {","    var pos = 0;","    var i = -1;","    var match;","","    while ((match = XRegExp.exec(str, regex, pos))) {","        // Because `regex` is provided to `callback`, the function could use the deprecated/","        // nonstandard `RegExp.prototype.compile` to mutate the regex. However, since `XRegExp.exec`","        // doesn't use `lastIndex` to set the search position, this can't lead to an infinite loop,","        // at least. Actually, because of the way `XRegExp.exec` caches globalized versions of","        // regexes, mutating the regex will not have any effect on the iteration or matched strings,","        // which is a nice side effect that brings extra safety.","        callback(match, ++i, str, regex);","","        pos = match.index + (match[0].length || 1);","    }","};","","/**"," * Copies a regex object and adds flag `g`. The copy maintains extended data, is augmented with"," * `XRegExp.prototype` properties, and has a fresh `lastIndex` property (set to zero). Native"," * regexes are not recompiled using XRegExp syntax."," *"," * @memberOf XRegExp"," * @param {RegExp} regex Regex to globalize."," * @returns {RegExp} Copy of the provided regex with flag `g` added."," * @example"," *"," * var globalCopy = XRegExp.globalize(/regex/);"," * globalCopy.global; // -> true"," */","XRegExp.globalize = function(regex) {","    return copyRegex(regex, {addG: true});","};","","/**"," * Installs optional features according to the specified options. Can be undone using"," * `XRegExp.uninstall`."," *"," * @memberOf XRegExp"," * @param {Object|String} options Options object or string."," * @example"," *"," * // With an options object"," * XRegExp.install({"," *   // Enables support for astral code points in Unicode addons (implicitly sets flag A)"," *   astral: true,"," *"," *   // DEPRECATED: Overrides native regex methods with fixed/extended versions"," *   natives: true"," * });"," *"," * // With an options string"," * XRegExp.install('astral natives');"," */","XRegExp.install = function(options) {","    options = prepareOptions(options);","","    if (!features.astral && options.astral) {","        setAstral(true);","    }","","    if (!features.natives && options.natives) {","        setNatives(true);","    }","};","","/**"," * Checks whether an individual optional feature is installed."," *"," * @memberOf XRegExp"," * @param {String} feature Name of the feature to check. One of:"," *   - `astral`"," *   - `natives`"," * @returns {Boolean} Whether the feature is installed."," * @example"," *"," * XRegExp.isInstalled('astral');"," */","XRegExp.isInstalled = function(feature) {","    return !!(features[feature]);","};","","/**"," * Returns `true` if an object is a regex; `false` if it isn't. This works correctly for regexes"," * created in another frame, when `instanceof` and `constructor` checks would fail."," *"," * @memberOf XRegExp"," * @param {*} value Object to check."," * @returns {Boolean} Whether the object is a `RegExp` object."," * @example"," *"," * XRegExp.isRegExp('string'); // -> false"," * XRegExp.isRegExp(/regex/i); // -> true"," * XRegExp.isRegExp(RegExp('^', 'm')); // -> true"," * XRegExp.isRegExp(XRegExp('(?s).')); // -> true"," */","XRegExp.isRegExp = function(value) {","    return toString.call(value) === '[object RegExp]';","    //return isType(value, 'RegExp');","};","","/**"," * Returns the first matched string, or in global mode, an array containing all matched strings."," * This is essentially a more convenient re-implementation of `String.prototype.match` that gives"," * the result types you actually want (string instead of `exec`-style array in match-first mode,"," * and an empty array instead of `null` when no matches are found in match-all mode). It also lets"," * you override flag g and ignore `lastIndex`, and fixes browser bugs."," *"," * @memberOf XRegExp"," * @param {String} str String to search."," * @param {RegExp} regex Regex to search with."," * @param {String} [scope='one'] Use 'one' to return the first match as a string. Use 'all' to"," *   return an array of all matched strings. If not explicitly specified and `regex` uses flag g,"," *   `scope` is 'all'."," * @returns {String|Array} In match-first mode: First match as a string, or `null`. In match-all"," *   mode: Array of all matched strings, or an empty array."," * @example"," *"," * // Match first"," * XRegExp.match('abc', /\\w/); // -> 'a'"," * XRegExp.match('abc', /\\w/g, 'one'); // -> 'a'"," * XRegExp.match('abc', /x/g, 'one'); // -> null"," *"," * // Match all"," * XRegExp.match('abc', /\\w/g); // -> ['a', 'b', 'c']"," * XRegExp.match('abc', /\\w/, 'all'); // -> ['a', 'b', 'c']"," * XRegExp.match('abc', /x/, 'all'); // -> []"," */","XRegExp.match = function(str, regex, scope) {","    var global = (regex.global && scope !== 'one') || scope === 'all';","    var cacheKey = ((global ? 'g' : '') + (regex.sticky ? 'y' : '')) || 'noGY';","    var result;","    var r2;","","    regex[REGEX_DATA] = regex[REGEX_DATA] || {};","","    // Shares cached copies with `XRegExp.exec`/`replace`","    r2 = regex[REGEX_DATA][cacheKey] || (","        regex[REGEX_DATA][cacheKey] = copyRegex(regex, {","            addG: !!global,","            removeG: scope === 'one',","            isInternalOnly: true","        })","    );","","    result = nativ.match.call(toObject(str), r2);","","    if (regex.global) {","        regex.lastIndex = (","            (scope === 'one' && result) ?","                // Can't use `r2.lastIndex` since `r2` is nonglobal in this case","                (result.index + result[0].length) : 0","        );","    }","","    return global ? (result || []) : (result && result[0]);","};","","/**"," * Retrieves the matches from searching a string using a chain of regexes that successively search"," * within previous matches. The provided `chain` array can contain regexes and or objects with"," * `regex` and `backref` properties. When a backreference is specified, the named or numbered"," * backreference is passed forward to the next regex or returned."," *"," * @memberOf XRegExp"," * @param {String} str String to search."," * @param {Array} chain Regexes that each search for matches within preceding results."," * @returns {Array} Matches by the last regex in the chain, or an empty array."," * @example"," *"," * // Basic usage; matches numbers within <b> tags"," * XRegExp.matchChain('1 <b>2</b> 3 <b>4 a 56</b>', ["," *   XRegExp('(?is)<b>.*?</b>'),"," *   /\\d+/"," * ]);"," * // -> ['2', '4', '56']"," *"," * // Passing forward and returning specific backreferences"," * html = '<a href=\"http://xregexp.com/api/\">XRegExp</a>\\"," *         <a href=\"http://www.google.com/\">Google</a>';"," * XRegExp.matchChain(html, ["," *   {regex: /<a href=\"([^\"]+)\">/i, backref: 1},"," *   {regex: XRegExp('(?i)^https?://(?<domain>[^/?#]+)'), backref: 'domain'}"," * ]);"," * // -> ['xregexp.com', 'www.google.com']"," */","XRegExp.matchChain = function(str, chain) {","    return (function recurseChain(values, level) {","        var item = chain[level].regex ? chain[level] : {regex: chain[level]};","        var matches = [];","","        function addMatch(match) {","            if (item.backref) {","                // Safari 4.0.5 (but not 5.0.5+) inappropriately uses sparse arrays to hold the","                // `undefined`s for backreferences to nonparticipating capturing groups. In such","                // cases, a `hasOwnProperty` or `in` check on its own would inappropriately throw","                // the exception, so also check if the backreference is a number that is within the","                // bounds of the array.","                if (!(match.hasOwnProperty(item.backref) || +item.backref < match.length)) {","                    throw new ReferenceError('Backreference to undefined group: ' + item.backref);","                }","","                matches.push(match[item.backref] || '');","            } else {","                matches.push(match[0]);","            }","        }","","        for (var i = 0; i < values.length; ++i) {","            XRegExp.forEach(values[i], item.regex, addMatch);","        }","","        return ((level === chain.length - 1) || !matches.length) ?","            matches :","            recurseChain(matches, level + 1);","    }([str], 0));","};","","/**"," * Returns a new string with one or all matches of a pattern replaced. The pattern can be a string"," * or regex, and the replacement can be a string or a function to be called for each match. To"," * perform a global search and replace, use the optional `scope` argument or include flag g if using"," * a regex. Replacement strings can use `${n}` for named and numbered backreferences. Replacement"," * functions can use named backreferences via `arguments[0].name`. Also fixes browser bugs compared"," * to the native `String.prototype.replace` and can be used reliably cross-browser."," *"," * @memberOf XRegExp"," * @param {String} str String to search."," * @param {RegExp|String} search Search pattern to be replaced."," * @param {String|Function} replacement Replacement string or a function invoked to create it."," *   Replacement strings can include special replacement syntax:"," *     - $$ - Inserts a literal $ character."," *     - $&, $0 - Inserts the matched substring."," *     - $` - Inserts the string that precedes the matched substring (left context)."," *     - $' - Inserts the string that follows the matched substring (right context)."," *     - $n, $nn - Where n/nn are digits referencing an existent capturing group, inserts"," *       backreference n/nn."," *     - ${n} - Where n is a name or any number of digits that reference an existent capturing"," *       group, inserts backreference n."," *   Replacement functions are invoked with three or more arguments:"," *     - The matched substring (corresponds to $& above). Named backreferences are accessible as"," *       properties of this first argument."," *     - 0..n arguments, one for each backreference (corresponding to $1, $2, etc. above)."," *     - The zero-based index of the match within the total search string."," *     - The total string being searched."," * @param {String} [scope='one'] Use 'one' to replace the first match only, or 'all'. If not"," *   explicitly specified and using a regex with flag g, `scope` is 'all'."," * @returns {String} New string with one or all matches replaced."," * @example"," *"," * // Regex search, using named backreferences in replacement string"," * var name = XRegExp('(?<first>\\\\w+) (?<last>\\\\w+)');"," * XRegExp.replace('John Smith', name, '${last}, ${first}');"," * // -> 'Smith, John'"," *"," * // Regex search, using named backreferences in replacement function"," * XRegExp.replace('John Smith', name, function(match) {"," *   return match.last + ', ' + match.first;"," * });"," * // -> 'Smith, John'"," *"," * // String search, with replace-all"," * XRegExp.replace('RegExp builds RegExps', 'RegExp', 'XRegExp', 'all');"," * // -> 'XRegExp builds XRegExps'"," */","XRegExp.replace = function(str, search, replacement, scope) {","    var isRegex = XRegExp.isRegExp(search);","    var global = (search.global && scope !== 'one') || scope === 'all';","    var cacheKey = ((global ? 'g' : '') + (search.sticky ? 'y' : '')) || 'noGY';","    var s2 = search;","    var result;","","    if (isRegex) {","        search[REGEX_DATA] = search[REGEX_DATA] || {};","","        // Shares cached copies with `XRegExp.exec`/`match`. Since a copy is used, `search`'s","        // `lastIndex` isn't updated *during* replacement iterations","        s2 = search[REGEX_DATA][cacheKey] || (","            search[REGEX_DATA][cacheKey] = copyRegex(search, {","                addG: !!global,","                removeG: scope === 'one',","                isInternalOnly: true","            })","        );","    } else if (global) {","        s2 = new RegExp(XRegExp.escape(String(search)), 'g');","    }","","    // Fixed `replace` required for named backreferences, etc.","    result = fixed.replace.call(toObject(str), s2, replacement);","","    if (isRegex && search.global) {","        // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)","        search.lastIndex = 0;","    }","","    return result;","};","","/**"," * Performs batch processing of string replacements. Used like `XRegExp.replace`, but accepts an"," * array of replacement details. Later replacements operate on the output of earlier replacements."," * Replacement details are accepted as an array with a regex or string to search for, the"," * replacement string or function, and an optional scope of 'one' or 'all'. Uses the XRegExp"," * replacement text syntax, which supports named backreference properties via `${name}`."," *"," * @memberOf XRegExp"," * @param {String} str String to search."," * @param {Array} replacements Array of replacement detail arrays."," * @returns {String} New string with all replacements."," * @example"," *"," * str = XRegExp.replaceEach(str, ["," *   [XRegExp('(?<name>a)'), 'z${name}'],"," *   [/b/gi, 'y'],"," *   [/c/g, 'x', 'one'], // scope 'one' overrides /g"," *   [/d/, 'w', 'all'],  // scope 'all' overrides lack of /g"," *   ['e', 'v', 'all'],  // scope 'all' allows replace-all for strings"," *   [/f/g, function($0) {"," *     return $0.toUpperCase();"," *   }]"," * ]);"," */","XRegExp.replaceEach = function(str, replacements) {","    var i;","    var r;","","    for (i = 0; i < replacements.length; ++i) {","        r = replacements[i];","        str = XRegExp.replace(str, r[0], r[1], r[2]);","    }","","    return str;","};","","/**"," * Splits a string into an array of strings using a regex or string separator. Matches of the"," * separator are not included in the result array. However, if `separator` is a regex that contains"," * capturing groups, backreferences are spliced into the result each time `separator` is matched."," * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably"," * cross-browser."," *"," * @memberOf XRegExp"," * @param {String} str String to split."," * @param {RegExp|String} separator Regex or string to use for separating the string."," * @param {Number} [limit] Maximum number of items to include in the result array."," * @returns {Array} Array of substrings."," * @example"," *"," * // Basic use"," * XRegExp.split('a b c', ' ');"," * // -> ['a', 'b', 'c']"," *"," * // With limit"," * XRegExp.split('a b c', ' ', 2);"," * // -> ['a', 'b']"," *"," * // Backreferences in result array"," * XRegExp.split('..word1..', /([a-z]+)(\\d+)/i);"," * // -> ['..', 'word', '1', '..']"," */","XRegExp.split = function(str, separator, limit) {","    return fixed.split.call(toObject(str), separator, limit);","};","","/**"," * Executes a regex search in a specified string. Returns `true` or `false`. Optional `pos` and"," * `sticky` arguments specify the search start position, and whether the match must start at the"," * specified position only. The `lastIndex` property of the provided regex is not used, but is"," * updated for compatibility. Also fixes browser bugs compared to the native"," * `RegExp.prototype.test` and can be used reliably cross-browser."," *"," * @memberOf XRegExp"," * @param {String} str String to search."," * @param {RegExp} regex Regex to search with."," * @param {Number} [pos=0] Zero-based index at which to start the search."," * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position"," *   only. The string `'sticky'` is accepted as an alternative to `true`."," * @returns {Boolean} Whether the regex matched the provided value."," * @example"," *"," * // Basic use"," * XRegExp.test('abc', /c/); // -> true"," *"," * // With pos and sticky"," * XRegExp.test('abc', /c/, 0, 'sticky'); // -> false"," * XRegExp.test('abc', /c/, 2, 'sticky'); // -> true"," */","XRegExp.test = function(str, regex, pos, sticky) {","    // Do this the easy way :-)","    return !!XRegExp.exec(str, regex, pos, sticky);","};","","/**"," * Uninstalls optional features according to the specified options. All optional features start out"," * uninstalled, so this is used to undo the actions of `XRegExp.install`."," *"," * @memberOf XRegExp"," * @param {Object|String} options Options object or string."," * @example"," *"," * // With an options object"," * XRegExp.uninstall({"," *   // Disables support for astral code points in Unicode addons"," *   astral: true,"," *"," *   // DEPRECATED: Restores native regex methods"," *   natives: true"," * });"," *"," * // With an options string"," * XRegExp.uninstall('astral natives');"," */","XRegExp.uninstall = function(options) {","    options = prepareOptions(options);","","    if (features.astral && options.astral) {","        setAstral(false);","    }","","    if (features.natives && options.natives) {","        setNatives(false);","    }","};","","/**"," * Returns an XRegExp object that is the union of the given patterns. Patterns can be provided as"," * regex objects or strings. Metacharacters are escaped in patterns provided as strings."," * Backreferences in provided regex objects are automatically renumbered to work correctly within"," * the larger combined pattern. Native flags used by provided regexes are ignored in favor of the"," * `flags` argument."," *"," * @memberOf XRegExp"," * @param {Array} patterns Regexes and strings to combine."," * @param {String} [flags] Any combination of XRegExp flags."," * @param {Object} [options] Options object with optional properties:"," *   - `conjunction` {String} Type of conjunction to use: 'or' (default) or 'none'."," * @returns {RegExp} Union of the provided regexes and strings."," * @example"," *"," * XRegExp.union(['a+b*c', /(dogs)\\1/, /(cats)\\1/], 'i');"," * // -> /a\\+b\\*c|(dogs)\\1|(cats)\\2/i"," *"," * XRegExp.union([/man/, /bear/, /pig/], 'i', {conjunction: 'none'});"," * // -> /manbearpig/i"," */","XRegExp.union = function(patterns, flags, options) {","    options = options || {};","    var conjunction = options.conjunction || 'or';","    var numCaptures = 0;","    var numPriorCaptures;","    var captureNames;","","    function rewrite(match, paren, backref) {","        var name = captureNames[numCaptures - numPriorCaptures];","","        // Capturing group","        if (paren) {","            ++numCaptures;","            // If the current capture has a name, preserve the name","            if (name) {","                return '(?<' + name + '>';","            }","        // Backreference","        } else if (backref) {","            // Rewrite the backreference","            return '\\\\' + (+backref + numPriorCaptures);","        }","","        return match;","    }","","    if (!(isType(patterns, 'Array') && patterns.length)) {","        throw new TypeError('Must provide a nonempty array of patterns to merge');","    }","","    var parts = /(\\()(?!\\?)|\\\\([1-9]\\d*)|\\\\[\\s\\S]|\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/g;","    var output = [];","    var pattern;","    for (var i = 0; i < patterns.length; ++i) {","        pattern = patterns[i];","","        if (XRegExp.isRegExp(pattern)) {","            numPriorCaptures = numCaptures;","            captureNames = (pattern[REGEX_DATA] && pattern[REGEX_DATA].captureNames) || [];","","            // Rewrite backreferences. Passing to XRegExp dies on octals and ensures patterns are","            // independently valid; helps keep this simple. Named captures are put back","            output.push(nativ.replace.call(XRegExp(pattern.source).source, parts, rewrite));","        } else {","            output.push(XRegExp.escape(pattern));","        }","    }","","    var separator = conjunction === 'none' ? '' : '|';","    return XRegExp(output.join(separator), flags);","};","","// ==--------------------------==","// Fixed/extended native methods","// ==--------------------------==","","/**"," * Adds named capture support (with backreferences returned as `result.name`), and fixes browser"," * bugs in the native `RegExp.prototype.exec`. Calling `XRegExp.install('natives')` uses this to"," * override the native method. Use via `XRegExp.exec` without overriding natives."," *"," * @memberOf RegExp"," * @param {String} str String to search."," * @returns {Array} Match array with named backreference properties, or `null`."," */","fixed.exec = function(str) {","    var origLastIndex = this.lastIndex;","    var match = nativ.exec.apply(this, arguments);","    var name;","    var r2;","    var i;","","    if (match) {","        // Fix browsers whose `exec` methods don't return `undefined` for nonparticipating capturing","        // groups. This fixes IE 5.5-8, but not IE 9's quirks mode or emulation of older IEs. IE 9","        // in standards mode follows the spec.","        if (!correctExecNpcg && match.length > 1 && indexOf(match, '') > -1) {","            r2 = copyRegex(this, {","                removeG: true,","                isInternalOnly: true","            });","            // Using `str.slice(match.index)` rather than `match[0]` in case lookahead allowed","            // matching due to characters outside the match","            nativ.replace.call(String(str).slice(match.index), r2, function() {","                var len = arguments.length;","                var i;","                // Skip index 0 and the last 2","                for (i = 1; i < len - 2; ++i) {","                    if (arguments[i] === undefined) {","                        match[i] = undefined;","                    }","                }","            });","        }","","        // Attach named capture properties","        if (this[REGEX_DATA] && this[REGEX_DATA].captureNames) {","            // Skip index 0","            for (i = 1; i < match.length; ++i) {","                name = this[REGEX_DATA].captureNames[i - 1];","                if (name) {","                    match[name] = match[i];","                }","            }","        }","","        // Fix browsers that increment `lastIndex` after zero-length matches","        if (this.global && !match[0].length && (this.lastIndex > match.index)) {","            this.lastIndex = match.index;","        }","    }","","    if (!this.global) {","        // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)","        this.lastIndex = origLastIndex;","    }","","    return match;","};","","/**"," * Fixes browser bugs in the native `RegExp.prototype.test`. Calling `XRegExp.install('natives')`"," * uses this to override the native method."," *"," * @memberOf RegExp"," * @param {String} str String to search."," * @returns {Boolean} Whether the regex matched the provided value."," */","fixed.test = function(str) {","    // Do this the easy way :-)","    return !!fixed.exec.call(this, str);","};","","/**"," * Adds named capture support (with backreferences returned as `result.name`), and fixes browser"," * bugs in the native `String.prototype.match`. Calling `XRegExp.install('natives')` uses this to"," * override the native method."," *"," * @memberOf String"," * @param {RegExp|*} regex Regex to search with. If not a regex object, it is passed to `RegExp`."," * @returns {Array} If `regex` uses flag g, an array of match strings or `null`. Without flag g,"," *   the result of calling `regex.exec(this)`."," */","fixed.match = function(regex) {","    var result;","","    if (!XRegExp.isRegExp(regex)) {","        // Use the native `RegExp` rather than `XRegExp`","        regex = new RegExp(regex);","    } else if (regex.global) {","        result = nativ.match.apply(this, arguments);","        // Fixes IE bug","        regex.lastIndex = 0;","","        return result;","    }","","    return fixed.exec.call(regex, toObject(this));","};","","/**"," * Adds support for `${n}` tokens for named and numbered backreferences in replacement text, and"," * provides named backreferences to replacement functions as `arguments[0].name`. Also fixes browser"," * bugs in replacement text syntax when performing a replacement using a nonregex search value, and"," * the value of a replacement regex's `lastIndex` property during replacement iterations and upon"," * completion. Calling `XRegExp.install('natives')` uses this to override the native method. Note"," * that this doesn't support SpiderMonkey's proprietary third (`flags`) argument. Use via"," * `XRegExp.replace` without overriding natives."," *"," * @memberOf String"," * @param {RegExp|String} search Search pattern to be replaced."," * @param {String|Function} replacement Replacement string or a function invoked to create it."," * @returns {String} New string with one or all matches replaced."," */","fixed.replace = function(search, replacement) {","    var isRegex = XRegExp.isRegExp(search);","    var origLastIndex;","    var captureNames;","    var result;","","    if (isRegex) {","        if (search[REGEX_DATA]) {","            captureNames = search[REGEX_DATA].captureNames;","        }","        // Only needed if `search` is nonglobal","        origLastIndex = search.lastIndex;","    } else {","        search += ''; // Type-convert","    }","","    // Don't use `typeof`; some older browsers return 'function' for regex objects","    if (isType(replacement, 'Function')) {","        // Stringifying `this` fixes a bug in IE < 9 where the last argument in replacement","        // functions isn't type-converted to a string","        result = nativ.replace.call(String(this), search, function() {","            var args = arguments;","            var i;","            if (captureNames) {","                // Change the `arguments[0]` string primitive to a `String` object that can store","                // properties. This really does need to use `String` as a constructor","                args[0] = new String(args[0]);","                // Store named backreferences on the first argument","                for (i = 0; i < captureNames.length; ++i) {","                    if (captureNames[i]) {","                        args[0][captureNames[i]] = args[i + 1];","                    }","                }","            }","            // Update `lastIndex` before calling `replacement`. Fixes IE, Chrome, Firefox, Safari","            // bug (last tested IE 9, Chrome 17, Firefox 11, Safari 5.1)","            if (isRegex && search.global) {","                search.lastIndex = args[args.length - 2] + args[0].length;","            }","            // ES6 specs the context for replacement functions as `undefined`","            return replacement.apply(undefined, args);","        });","    } else {","        // Ensure that the last value of `args` will be a string when given nonstring `this`,","        // while still throwing on null or undefined context","        result = nativ.replace.call(this == null ? this : String(this), search, function() {","            // Keep this function's `arguments` available through closure","            var args = arguments;","            return nativ.replace.call(String(replacement), replacementToken, function($0, $1, $2) {","                var n;","                // Named or numbered backreference with curly braces","                if ($1) {","                    // XRegExp behavior for `${n}`:","                    // 1. Backreference to numbered capture, if `n` is an integer. Use `0` for the","                    //    entire match. Any number of leading zeros may be used.","                    // 2. Backreference to named capture `n`, if it exists and is not an integer","                    //    overridden by numbered capture. In practice, this does not overlap with","                    //    numbered capture since XRegExp does not allow named capture to use a bare","                    //    integer as the name.","                    // 3. If the name or number does not refer to an existing capturing group, it's","                    //    an error.","                    n = +$1; // Type-convert; drop leading zeros","                    if (n <= args.length - 3) {","                        return args[n] || '';","                    }","                    // Groups with the same name is an error, else would need `lastIndexOf`","                    n = captureNames ? indexOf(captureNames, $1) : -1;","                    if (n < 0) {","                        throw new SyntaxError('Backreference to undefined group ' + $0);","                    }","                    return args[n + 1] || '';","                }","                // Else, special variable or numbered backreference without curly braces","                if ($2 === '$') { // $$","                    return '$';","                }","                if ($2 === '&' || +$2 === 0) { // $&, $0 (not followed by 1-9), $00","                    return args[0];","                }","                if ($2 === '`') { // $` (left context)","                    return args[args.length - 1].slice(0, args[args.length - 2]);","                }","                if ($2 === \"'\") { // $' (right context)","                    return args[args.length - 1].slice(args[args.length - 2] + args[0].length);","                }","                // Else, numbered backreference without curly braces","                $2 = +$2; // Type-convert; drop leading zero","                // XRegExp behavior for `$n` and `$nn`:","                // - Backrefs end after 1 or 2 digits. Use `${..}` for more digits.","                // - `$1` is an error if no capturing groups.","                // - `$10` is an error if less than 10 capturing groups. Use `${1}0` instead.","                // - `$01` is `$1` if at least one capturing group, else it's an error.","                // - `$0` (not followed by 1-9) and `$00` are the entire match.","                // Native behavior, for comparison:","                // - Backrefs end after 1 or 2 digits. Cannot reference capturing group 100+.","                // - `$1` is a literal `$1` if no capturing groups.","                // - `$10` is `$1` followed by a literal `0` if less than 10 capturing groups.","                // - `$01` is `$1` if at least one capturing group, else it's a literal `$01`.","                // - `$0` is a literal `$0`.","                if (!isNaN($2)) {","                    if ($2 > args.length - 3) {","                        throw new SyntaxError('Backreference to undefined group ' + $0);","                    }","                    return args[$2] || '';","                }","                // `$` followed by an unsupported char is an error, unlike native JS","                throw new SyntaxError('Invalid token ' + $0);","            });","        });","    }","","    if (isRegex) {","        if (search.global) {","            // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)","            search.lastIndex = 0;","        } else {","            // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)","            search.lastIndex = origLastIndex;","        }","    }","","    return result;","};","","/**"," * Fixes browser bugs in the native `String.prototype.split`. Calling `XRegExp.install('natives')`"," * uses this to override the native method. Use via `XRegExp.split` without overriding natives."," *"," * @memberOf String"," * @param {RegExp|String} separator Regex or string to use for separating the string."," * @param {Number} [limit] Maximum number of items to include in the result array."," * @returns {Array} Array of substrings."," */","fixed.split = function(separator, limit) {","    if (!XRegExp.isRegExp(separator)) {","        // Browsers handle nonregex split correctly, so use the faster native method","        return nativ.split.apply(this, arguments);","    }","","    var str = String(this);","    var output = [];","    var origLastIndex = separator.lastIndex;","    var lastLastIndex = 0;","    var lastLength;","","    // Values for `limit`, per the spec:","    // If undefined: pow(2,32) - 1","    // If 0, Infinity, or NaN: 0","    // If positive number: limit = floor(limit); if (limit >= pow(2,32)) limit -= pow(2,32);","    // If negative number: pow(2,32) - floor(abs(limit))","    // If other: Type-convert, then use the above rules","    // This line fails in very strange ways for some values of `limit` in Opera 10.5-10.63, unless","    // Opera Dragonfly is open (go figure). It works in at least Opera 9.5-10.1 and 11+","    limit = (limit === undefined ? -1 : limit) >>> 0;","","    XRegExp.forEach(str, separator, function(match) {","        // This condition is not the same as `if (match[0].length)`","        if ((match.index + match[0].length) > lastLastIndex) {","            output.push(str.slice(lastLastIndex, match.index));","            if (match.length > 1 && match.index < str.length) {","                Array.prototype.push.apply(output, match.slice(1));","            }","            lastLength = match[0].length;","            lastLastIndex = match.index + lastLength;","        }","    });","","    if (lastLastIndex === str.length) {","        if (!nativ.test.call(separator, '') || lastLength) {","            output.push('');","        }","    } else {","        output.push(str.slice(lastLastIndex));","    }","","    separator.lastIndex = origLastIndex;","    return output.length > limit ? output.slice(0, limit) : output;","};","","// ==--------------------------==","// Built-in syntax/flag tokens","// ==--------------------------==","","/*"," * Letter escapes that natively match literal characters: `\\a`, `\\A`, etc. These should be"," * SyntaxErrors but are allowed in web reality. XRegExp makes them errors for cross-browser"," * consistency and to reserve their syntax, but lets them be superseded by addons."," */","XRegExp.addToken(","    /\\\\([ABCE-RTUVXYZaeg-mopqyz]|c(?![A-Za-z])|u(?![\\dA-Fa-f]{4}|{[\\dA-Fa-f]+})|x(?![\\dA-Fa-f]{2}))/,","    function(match, scope) {","        // \\B is allowed in default scope only","        if (match[1] === 'B' && scope === defaultScope) {","            return match[0];","        }","        throw new SyntaxError('Invalid escape ' + match[0]);","    },","    {","        scope: 'all',","        leadChar: '\\\\'","    }",");","","/*"," * Unicode code point escape with curly braces: `\\u{N..}`. `N..` is any one or more digit"," * hexadecimal number from 0-10FFFF, and can include leading zeros. Requires the native ES6 `u` flag"," * to support code points greater than U+FFFF. Avoids converting code points above U+FFFF to"," * surrogate pairs (which could be done without flag `u`), since that could lead to broken behavior"," * if you follow a `\\u{N..}` token that references a code point above U+FFFF with a quantifier, or"," * if you use the same in a character class."," */","XRegExp.addToken(","    /\\\\u{([\\dA-Fa-f]+)}/,","    function(match, scope, flags) {","        var code = dec(match[1]);","        if (code > 0x10FFFF) {","            throw new SyntaxError('Invalid Unicode code point ' + match[0]);","        }","        if (code <= 0xFFFF) {","            // Converting to \\uNNNN avoids needing to escape the literal character and keep it","            // separate from preceding tokens","            return '\\\\u' + pad4(hex(code));","        }","        // If `code` is between 0xFFFF and 0x10FFFF, require and defer to native handling","        if (hasNativeU && flags.indexOf('u') > -1) {","            return match[0];","        }","        throw new SyntaxError('Cannot use Unicode code point above \\\\u{FFFF} without flag u');","    },","    {","        scope: 'all',","        leadChar: '\\\\'","    }",");","","/*"," * Empty character class: `[]` or `[^]`. This fixes a critical cross-browser syntax inconsistency."," * Unless this is standardized (per the ES spec), regex syntax can't be accurately parsed because"," * character class endings can't be determined."," */","XRegExp.addToken(","    /\\[(\\^?)\\]/,","    function(match) {","        // For cross-browser compatibility with ES3, convert [] to \\b\\B and [^] to [\\s\\S].","        // (?!) should work like \\b\\B, but is unreliable in some versions of Firefox","        return match[1] ? '[\\\\s\\\\S]' : '\\\\b\\\\B';","    },","    {leadChar: '['}",");","","/*"," * Comment pattern: `(?# )`. Inline comments are an alternative to the line comments allowed in"," * free-spacing mode (flag x)."," */","XRegExp.addToken(","    /\\(\\?#[^)]*\\)/,","    getContextualTokenSeparator,","    {leadChar: '('}",");","","/*"," * Whitespace and line comments, in free-spacing mode (aka extended mode, flag x) only."," */","XRegExp.addToken(","    /\\s+|#[^\\n]*\\n?/,","    getContextualTokenSeparator,","    {flag: 'x'}",");","","/*"," * Dot, in dotall mode (aka singleline mode, flag s) only."," */","XRegExp.addToken(","    /\\./,","    function() {","        return '[\\\\s\\\\S]';","    },","    {","        flag: 's',","        leadChar: '.'","    }",");","","/*"," * Named backreference: `\\k<name>`. Backreference names can use the characters A-Z, a-z, 0-9, _,"," * and $ only. Also allows numbered backreferences as `\\k<n>`."," */","XRegExp.addToken(","    /\\\\k<([\\w$]+)>/,","    function(match) {","        // Groups with the same name is an error, else would need `lastIndexOf`","        var index = isNaN(match[1]) ? (indexOf(this.captureNames, match[1]) + 1) : +match[1];","        var endIndex = match.index + match[0].length;","        if (!index || index > this.captureNames.length) {","            throw new SyntaxError('Backreference to undefined group ' + match[0]);","        }","        // Keep backreferences separate from subsequent literal numbers. This avoids e.g.","        // inadvertedly changing `(?<n>)\\k<n>1` to `()\\11`.","        return '\\\\' + index + (","            endIndex === match.input.length || isNaN(match.input.charAt(endIndex)) ?","                '' : '(?:)'","        );","    },","    {leadChar: '\\\\'}",");","","/*"," * Numbered backreference or octal, plus any following digits: `\\0`, `\\11`, etc. Octals except `\\0`"," * not followed by 0-9 and backreferences to unopened capture groups throw an error. Other matches"," * are returned unaltered. IE < 9 doesn't support backreferences above `\\99` in regex syntax."," */","XRegExp.addToken(","    /\\\\(\\d+)/,","    function(match, scope) {","        if (","            !(","                scope === defaultScope &&","                /^[1-9]/.test(match[1]) &&","                +match[1] <= this.captureNames.length","            ) &&","            match[1] !== '0'","        ) {","            throw new SyntaxError('Cannot use octal escape or backreference to undefined group ' +","                match[0]);","        }","        return match[0];","    },","    {","        scope: 'all',","        leadChar: '\\\\'","    }",");","","/*"," * Named capturing group; match the opening delimiter only: `(?<name>`. Capture names can use the"," * characters A-Z, a-z, 0-9, _, and $ only. Names can't be integers. Supports Python-style"," * `(?P<name>` as an alternate syntax to avoid issues in some older versions of Opera which natively"," * supported the Python-style syntax. Otherwise, XRegExp might treat numbered backreferences to"," * Python-style named capture as octals."," */","XRegExp.addToken(","    /\\(\\?P?<([\\w$]+)>/,","    function(match) {","        // Disallow bare integers as names because named backreferences are added to match arrays","        // and therefore numeric properties may lead to incorrect lookups","        if (!isNaN(match[1])) {","            throw new SyntaxError('Cannot use integer as capture name ' + match[0]);","        }","        if (match[1] === 'length' || match[1] === '__proto__') {","            throw new SyntaxError('Cannot use reserved word as capture name ' + match[0]);","        }","        if (indexOf(this.captureNames, match[1]) > -1) {","            throw new SyntaxError('Cannot use same name for multiple groups ' + match[0]);","        }","        this.captureNames.push(match[1]);","        this.hasNamedCapture = true;","        return '(';","    },","    {leadChar: '('}",");","","/*"," * Capturing group; match the opening parenthesis only. Required for support of named capturing"," * groups. Also adds explicit capture mode (flag n)."," */","XRegExp.addToken(","    /\\((?!\\?)/,","    function(match, scope, flags) {","        if (flags.indexOf('n') > -1) {","            return '(?:';","        }","        this.captureNames.push(null);","        return '(';","    },","    {","        optionalFlags: 'n',","        leadChar: '('","    }",");","","module.exports = XRegExp;",""],"l":{"21":1,"23":1,"28":1,"36":1,"38":1,"40":1,"42":1,"44":1,"45":1,"47":1,"54":1,"56":1,"58":1,"60":1,"62":1,"67":2,"68":2,"71":2,"73":0,"75":2,"78":1,"80":1,"82":1,"103":1,"104":24,"106":24,"110":24,"111":21,"115":3,"116":3,"118":0,"122":0,"126":3,"128":3,"130":3,"140":1,"141":24,"162":1,"163":21,"164":0,"167":21,"168":21,"169":21,"170":21,"171":21,"172":21,"174":21,"176":21,"177":21,"178":21,"179":0,"182":21,"183":21,"184":21,"185":21,"188":21,"189":0,"190":0,"194":0,"197":0,"205":21,"213":21,"223":1,"224":0,"238":1,"239":0,"246":0,"251":0,"261":1,"262":21,"277":1,"278":21,"288":1,"289":0,"300":1,"301":0,"302":0,"304":0,"305":0,"306":0,"310":0,"324":1,"325":0,"326":0,"327":0,"332":0,"346":1,"347":1,"357":1,"358":0,"359":0,"361":0,"373":1,"374":3,"377":3,"378":0,"382":3,"383":0,"384":0,"387":0,"388":0,"392":3,"393":1,"394":0,"398":3,"411":1,"412":0,"414":0,"415":0,"416":0,"419":0,"422":0,"431":1,"432":4,"433":0,"436":4,"451":1,"452":131,"453":131,"454":131,"455":131,"456":131,"459":131,"460":1238,"461":1238,"466":1078,"469":160,"470":160,"471":8,"477":8,"481":131,"492":1,"493":0,"502":1,"503":0,"504":0,"505":0,"506":0,"507":0,"509":0,"520":1,"522":0,"523":0,"526":0,"567":1,"568":3,"569":0,"570":0,"572":0,"576":3,"577":3,"579":3,"581":0,"584":3,"585":3,"588":3,"589":3,"593":3,"594":3,"595":3,"596":3,"599":3,"600":3,"601":3,"605":3,"606":131,"608":131,"611":131,"612":0,"618":131,"619":8,"620":8,"623":123,"624":123,"625":123,"626":123,"627":12,"628":111,"629":12,"634":3,"646":3,"647":3,"656":1,"670":1,"677":1,"678":1,"679":1,"680":1,"681":1,"732":1,"733":11,"734":11,"735":11,"737":11,"738":2,"741":11,"742":2,"743":2,"744":2,"749":11,"764":11,"781":1,"782":0,"783":0,"785":0,"791":1,"792":15,"794":15,"797":0,"813":1,"814":0,"846":1,"847":283,"848":283,"849":283,"850":283,"851":283,"853":283,"854":283,"855":283,"856":0,"862":0,"863":0,"866":283,"869":283,"879":283,"880":283,"883":283,"887":283,"888":0,"891":283,"892":160,"895":283,"920":1,"921":0,"922":0,"923":0,"925":0,"932":0,"934":0,"951":1,"952":0,"975":1,"976":0,"978":0,"979":0,"982":0,"983":0,"999":1,"1000":3,"1017":1,"1018":26,"1049":1,"1050":0,"1051":0,"1052":0,"1053":0,"1055":0,"1058":0,"1066":0,"1068":0,"1069":0,"1076":0,"1107":1,"1108":0,"1109":0,"1110":0,"1112":1,"1113":0,"1119":0,"1120":0,"1123":0,"1125":0,"1129":0,"1130":0,"1133":0,"1186":1,"1187":0,"1188":0,"1189":0,"1190":0,"1191":0,"1193":0,"1194":0,"1198":0,"1205":0,"1206":0,"1210":0,"1212":0,"1214":0,"1217":0,"1244":1,"1245":0,"1246":0,"1248":0,"1249":0,"1250":0,"1253":0,"1282":1,"1283":0,"1309":1,"1311":0,"1334":1,"1335":0,"1337":0,"1338":0,"1341":0,"1342":0,"1367":1,"1368":1,"1369":1,"1370":1,"1371":1,"1372":1,"1374":1,"1375":20,"1378":20,"1379":4,"1381":4,"1382":0,"1385":16,"1387":0,"1390":20,"1393":1,"1394":0,"1397":1,"1398":1,"1399":1,"1400":1,"1401":2,"1403":2,"1404":2,"1405":2,"1409":2,"1411":0,"1415":1,"1416":1,"1432":1,"1433":283,"1434":283,"1435":283,"1436":283,"1437":283,"1439":283,"1443":131,"1444":0,"1450":0,"1451":0,"1452":0,"1454":0,"1455":0,"1456":0,"1463":131,"1465":0,"1466":0,"1467":0,"1468":0,"1474":131,"1475":0,"1479":283,"1481":0,"1484":283,"1495":1,"1497":0,"1510":1,"1511":0,"1513":0,"1515":0,"1516":0,"1517":0,"1519":0,"1521":0,"1524":0,"1541":1,"1542":0,"1543":0,"1544":0,"1545":0,"1547":0,"1548":0,"1549":0,"1552":0,"1554":0,"1558":0,"1561":0,"1562":0,"1563":0,"1564":0,"1567":0,"1569":0,"1570":0,"1571":0,"1577":0,"1578":0,"1581":0,"1586":0,"1588":0,"1589":0,"1590":0,"1592":0,"1602":0,"1603":0,"1604":0,"1607":0,"1608":0,"1609":0,"1611":0,"1614":0,"1615":0,"1617":0,"1618":0,"1620":0,"1621":0,"1623":0,"1624":0,"1627":0,"1640":0,"1641":0,"1642":0,"1644":0,"1647":0,"1652":0,"1653":0,"1655":0,"1658":0,"1662":0,"1674":1,"1675":0,"1677":0,"1680":0,"1681":0,"1682":0,"1683":0,"1684":0,"1694":0,"1696":0,"1698":0,"1699":0,"1700":0,"1701":0,"1703":0,"1704":0,"1708":0,"1709":0,"1710":0,"1713":0,"1716":0,"1717":0,"1729":1,"1733":0,"1734":0,"1736":0,"1752":1,"1755":0,"1756":0,"1757":0,"1759":0,"1762":0,"1765":0,"1766":0,"1768":0,"1781":1,"1786":0,"1795":1,"1804":1,"1813":1,"1816":0,"1828":1,"1832":0,"1833":0,"1834":0,"1835":0,"1839":0,"1852":1,"1855":0,"1863":0,"1866":0,"1881":1,"1886":0,"1887":0,"1889":0,"1890":0,"1892":0,"1893":0,"1895":0,"1896":0,"1897":0,"1906":1,"1909":8,"1910":0,"1912":8,"1913":8,"1921":1}},"/home/travis/build/npmtest/node-npmtest-xregexp/node_modules/xregexp/src/addons/build.js":{"path":"/home/travis/build/npmtest/node-npmtest-xregexp/node_modules/xregexp/src/addons/build.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0},"b":{"1":[0,0],"2":[0,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"(anonymous_1)","line":8,"loc":{"start":{"line":8,"column":17},"end":{"line":8,"column":35}}},"2":{"name":"deanchor","line":24,"loc":{"start":{"line":24,"column":4},"end":{"line":24,"column":31}}},"3":{"name":"asXRegExp","line":51,"loc":{"start":{"line":51,"column":4},"end":{"line":51,"column":40}}},"4":{"name":"(anonymous_4)","line":89,"loc":{"start":{"line":89,"column":20},"end":{"line":89,"column":51}}},"5":{"name":"(anonymous_5)","line":128,"loc":{"start":{"line":128,"column":58},"end":{"line":128,"column":87}}},"6":{"name":"(anonymous_6)","line":149,"loc":{"start":{"line":149,"column":71},"end":{"line":149,"column":103}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":193,"column":2}},"2":{"start":{"line":11,"column":4},"end":{"line":11,"column":31}},"3":{"start":{"line":12,"column":4},"end":{"line":12,"column":81}},"4":{"start":{"line":13,"column":4},"end":{"line":15,"column":7}},"5":{"start":{"line":24,"column":4},"end":{"line":40,"column":5}},"6":{"start":{"line":27,"column":8},"end":{"line":27,"column":46}},"7":{"start":{"line":28,"column":8},"end":{"line":28,"column":47}},"8":{"start":{"line":30,"column":8},"end":{"line":37,"column":9}},"9":{"start":{"line":36,"column":12},"end":{"line":36,"column":82}},"10":{"start":{"line":39,"column":8},"end":{"line":39,"column":23}},"11":{"start":{"line":51,"column":4},"end":{"line":62,"column":5}},"12":{"start":{"line":52,"column":8},"end":{"line":52,"column":40}},"13":{"start":{"line":53,"column":8},"end":{"line":61,"column":34}},"14":{"start":{"line":89,"column":4},"end":{"line":191,"column":6}},"15":{"start":{"line":90,"column":8},"end":{"line":90,"column":28}},"16":{"start":{"line":94,"column":8},"end":{"line":94,"column":47}},"17":{"start":{"line":95,"column":8},"end":{"line":95,"column":58}},"18":{"start":{"line":97,"column":8},"end":{"line":99,"column":9}},"19":{"start":{"line":98,"column":12},"end":{"line":98,"column":68}},"20":{"start":{"line":101,"column":8},"end":{"line":101,"column":22}},"21":{"start":{"line":102,"column":8},"end":{"line":116,"column":9}},"22":{"start":{"line":103,"column":12},"end":{"line":115,"column":13}},"23":{"start":{"line":108,"column":16},"end":{"line":108,"column":55}},"24":{"start":{"line":109,"column":16},"end":{"line":114,"column":18}},"25":{"start":{"line":120,"column":8},"end":{"line":120,"column":58}},"26":{"start":{"line":123,"column":8},"end":{"line":123,"column":24}},"27":{"start":{"line":124,"column":8},"end":{"line":124,"column":25}},"28":{"start":{"line":125,"column":8},"end":{"line":125,"column":29}},"29":{"start":{"line":126,"column":8},"end":{"line":126,"column":31}},"30":{"start":{"line":127,"column":8},"end":{"line":127,"column":74}},"31":{"start":{"line":128,"column":8},"end":{"line":188,"column":11}},"32":{"start":{"line":129,"column":12},"end":{"line":129,"column":35}},"33":{"start":{"line":130,"column":12},"end":{"line":130,"column":24}},"34":{"start":{"line":131,"column":12},"end":{"line":131,"column":22}},"35":{"start":{"line":132,"column":12},"end":{"line":132,"column":30}},"36":{"start":{"line":134,"column":12},"end":{"line":169,"column":13}},"37":{"start":{"line":135,"column":16},"end":{"line":137,"column":17}},"38":{"start":{"line":136,"column":20},"end":{"line":136,"column":73}},"39":{"start":{"line":139,"column":16},"end":{"line":147,"column":17}},"40":{"start":{"line":140,"column":20},"end":{"line":140,"column":58}},"41":{"start":{"line":141,"column":20},"end":{"line":141,"column":61}},"42":{"start":{"line":144,"column":20},"end":{"line":144,"column":63}},"43":{"start":{"line":146,"column":20},"end":{"line":146,"column":34}},"44":{"start":{"line":148,"column":16},"end":{"line":148,"column":39}},"45":{"start":{"line":149,"column":16},"end":{"line":168,"column":25}},"46":{"start":{"line":151,"column":20},"end":{"line":166,"column":21}},"47":{"start":{"line":152,"column":24},"end":{"line":152,"column":78}},"48":{"start":{"line":153,"column":24},"end":{"line":153,"column":34}},"49":{"start":{"line":155,"column":24},"end":{"line":157,"column":25}},"50":{"start":{"line":156,"column":28},"end":{"line":156,"column":57}},"51":{"start":{"line":159,"column":27},"end":{"line":166,"column":21}},"52":{"start":{"line":160,"column":24},"end":{"line":160,"column":53}},"53":{"start":{"line":162,"column":24},"end":{"line":165,"column":61}},"54":{"start":{"line":167,"column":20},"end":{"line":167,"column":33}},"55":{"start":{"line":171,"column":12},"end":{"line":186,"column":13}},"56":{"start":{"line":172,"column":16},"end":{"line":172,"column":54}},"57":{"start":{"line":173,"column":16},"end":{"line":173,"column":57}},"58":{"start":{"line":175,"column":16},"end":{"line":177,"column":17}},"59":{"start":{"line":176,"column":20},"end":{"line":176,"column":49}},"60":{"start":{"line":179,"column":19},"end":{"line":186,"column":13}},"61":{"start":{"line":180,"column":16},"end":{"line":180,"column":40}},"62":{"start":{"line":182,"column":16},"end":{"line":185,"column":45}},"63":{"start":{"line":187,"column":12},"end":{"line":187,"column":22}},"64":{"start":{"line":190,"column":8},"end":{"line":190,"column":38}}},"branchMap":{"1":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":8},"end":{"line":30,"column":8}},{"start":{"line":30,"column":8},"end":{"line":30,"column":8}}]},"2":{"line":31,"type":"binary-expr","locations":[{"start":{"line":31,"column":12},"end":{"line":31,"column":39}},{"start":{"line":32,"column":12},"end":{"line":32,"column":40}},{"start":{"line":34,"column":12},"end":{"line":34,"column":65}}]},"3":{"line":52,"type":"cond-expr","locations":[{"start":{"line":52,"column":31},"end":{"line":52,"column":34}},{"start":{"line":52,"column":37},"end":{"line":52,"column":39}}]},"4":{"line":53,"type":"cond-expr","locations":[{"start":{"line":54,"column":13},"end":{"line":58,"column":44}},{"start":{"line":61,"column":12},"end":{"line":61,"column":33}}]},"5":{"line":54,"type":"cond-expr","locations":[{"start":{"line":56,"column":16},"end":{"line":56,"column":21}},{"start":{"line":58,"column":16},"end":{"line":58,"column":44}}]},"6":{"line":54,"type":"binary-expr","locations":[{"start":{"line":54,"column":13},"end":{"line":54,"column":30}},{"start":{"line":54,"column":34},"end":{"line":54,"column":64}}]},"7":{"line":90,"type":"binary-expr","locations":[{"start":{"line":90,"column":16},"end":{"line":90,"column":21}},{"start":{"line":90,"column":25},"end":{"line":90,"column":27}}]},"8":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":8},"end":{"line":97,"column":8}},{"start":{"line":97,"column":8},"end":{"line":97,"column":8}}]},"9":{"line":103,"type":"if","locations":[{"start":{"line":103,"column":12},"end":{"line":103,"column":12}},{"start":{"line":103,"column":12},"end":{"line":103,"column":12}}]},"10":{"line":113,"type":"binary-expr","locations":[{"start":{"line":113,"column":27},"end":{"line":113,"column":55}},{"start":{"line":113,"column":59},"end":{"line":113,"column":61}}]},"11":{"line":127,"type":"binary-expr","locations":[{"start":{"line":127,"column":28},"end":{"line":127,"column":67}},{"start":{"line":127,"column":71},"end":{"line":127,"column":73}}]},"12":{"line":129,"type":"binary-expr","locations":[{"start":{"line":129,"column":26},"end":{"line":129,"column":28}},{"start":{"line":129,"column":32},"end":{"line":129,"column":34}}]},"13":{"line":134,"type":"if","locations":[{"start":{"line":134,"column":12},"end":{"line":134,"column":12}},{"start":{"line":134,"column":12},"end":{"line":134,"column":12}}]},"14":{"line":135,"type":"if","locations":[{"start":{"line":135,"column":16},"end":{"line":135,"column":16}},{"start":{"line":135,"column":16},"end":{"line":135,"column":16}}]},"15":{"line":139,"type":"if","locations":[{"start":{"line":139,"column":16},"end":{"line":139,"column":16}},{"start":{"line":139,"column":16},"end":{"line":139,"column":16}}]},"16":{"line":144,"type":"binary-expr","locations":[{"start":{"line":144,"column":37},"end":{"line":144,"column":44}},{"start":{"line":144,"column":48},"end":{"line":144,"column":55}}]},"17":{"line":151,"type":"if","locations":[{"start":{"line":151,"column":20},"end":{"line":151,"column":20}},{"start":{"line":151,"column":20},"end":{"line":151,"column":20}}]},"18":{"line":155,"type":"if","locations":[{"start":{"line":155,"column":24},"end":{"line":155,"column":24}},{"start":{"line":155,"column":24},"end":{"line":155,"column":24}}]},"19":{"line":159,"type":"if","locations":[{"start":{"line":159,"column":27},"end":{"line":159,"column":27}},{"start":{"line":159,"column":27},"end":{"line":159,"column":27}}]},"20":{"line":162,"type":"cond-expr","locations":[{"start":{"line":164,"column":28},"end":{"line":164,"column":77}},{"start":{"line":165,"column":28},"end":{"line":165,"column":60}}]},"21":{"line":171,"type":"if","locations":[{"start":{"line":171,"column":12},"end":{"line":171,"column":12}},{"start":{"line":171,"column":12},"end":{"line":171,"column":12}}]},"22":{"line":175,"type":"if","locations":[{"start":{"line":175,"column":16},"end":{"line":175,"column":16}},{"start":{"line":175,"column":16},"end":{"line":175,"column":16}}]},"23":{"line":179,"type":"if","locations":[{"start":{"line":179,"column":19},"end":{"line":179,"column":19}},{"start":{"line":179,"column":19},"end":{"line":179,"column":19}}]},"24":{"line":182,"type":"cond-expr","locations":[{"start":{"line":184,"column":20},"end":{"line":184,"column":63}},{"start":{"line":185,"column":20},"end":{"line":185,"column":44}}]}},"code":["/*!"," * XRegExp.build 3.2.0"," * <xregexp.com>"," * Steven Levithan (c) 2012-2017 MIT License"," * Inspired by Lea Verou's RegExp.create <lea.verou.me>"," */","","module.exports = function(XRegExp) {","    'use strict';","","    var REGEX_DATA = 'xregexp';","    var subParts = /(\\()(?!\\?)|\\\\([1-9]\\d*)|\\\\[\\s\\S]|\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/g;","    var parts = XRegExp.union([/\\({{([\\w$]+)}}\\)|{{([\\w$]+)}}/, subParts], 'g', {","        conjunction: 'or'","    });","","    /**","     * Strips a leading `^` and trailing unescaped `$`, if both are present.","     *","     * @private","     * @param {String} pattern Pattern to process.","     * @returns {String} Pattern with edge anchors removed.","     */","    function deanchor(pattern) {","        // Allow any number of empty noncapturing groups before/after anchors, because regexes","        // built/generated by XRegExp sometimes include them","        var leadingAnchor = /^(?:\\(\\?:\\))*\\^/;","        var trailingAnchor = /\\$(?:\\(\\?:\\))*$/;","","        if (","            leadingAnchor.test(pattern) &&","            trailingAnchor.test(pattern) &&","            // Ensure that the trailing `$` isn't escaped","            trailingAnchor.test(pattern.replace(/\\\\[\\s\\S]/g, ''))","        ) {","            return pattern.replace(leadingAnchor, '').replace(trailingAnchor, '');","        }","","        return pattern;","    }","","    /**","     * Converts the provided value to an XRegExp. Native RegExp flags are not preserved.","     *","     * @private","     * @param {String|RegExp} value Value to convert.","     * @param {Boolean} [addFlagX] Whether to apply the `x` flag in cases when `value` is not","     *   already a regex generated by XRegExp","     * @returns {RegExp} XRegExp object with XRegExp syntax applied.","     */","    function asXRegExp(value, addFlagX) {","        var flags = addFlagX ? 'x' : '';","        return XRegExp.isRegExp(value) ?","            (value[REGEX_DATA] && value[REGEX_DATA].captureNames ?","                // Don't recompile, to preserve capture names","                value :","                // Recompile as XRegExp","                XRegExp(value.source, flags)","            ) :","            // Compile string as XRegExp","            XRegExp(value, flags);","    }","","    /**","     * Builds regexes using named subpatterns, for readability and pattern reuse. Backreferences in","     * the outer pattern and provided subpatterns are automatically renumbered to work correctly.","     * Native flags used by provided subpatterns are ignored in favor of the `flags` argument.","     *","     * @memberOf XRegExp","     * @param {String} pattern XRegExp pattern using `{{name}}` for embedded subpatterns. Allows","     *   `({{name}})` as shorthand for `(?<name>{{name}})`. Patterns cannot be embedded within","     *   character classes.","     * @param {Object} subs Lookup object for named subpatterns. Values can be strings or regexes. A","     *   leading `^` and trailing unescaped `$` are stripped from subpatterns, if both are present.","     * @param {String} [flags] Any combination of XRegExp flags.","     * @returns {RegExp} Regex with interpolated subpatterns.","     * @example","     *","     * var time = XRegExp.build('(?x)^ {{hours}} ({{minutes}}) $', {","     *   hours: XRegExp.build('{{h12}} : | {{h24}}', {","     *     h12: /1[0-2]|0?[1-9]/,","     *     h24: /2[0-3]|[01][0-9]/","     *   }, 'x'),","     *   minutes: /^[0-5][0-9]$/","     * });","     * time.test('10:59'); // -> true","     * XRegExp.exec('10:59', time).minutes; // -> '59'","     */","    XRegExp.build = function(pattern, subs, flags) {","        flags = flags || '';","        // Used with `asXRegExp` calls for `pattern` and subpatterns in `subs`, to work around how","        // some browsers convert `RegExp('\\n')` to a regex that contains the literal characters `\\`","        // and `n`. See more details at <https://github.com/slevithan/xregexp/pull/163>.","        var addFlagX = flags.indexOf('x') > -1;","        var inlineFlags = /^\\(\\?([\\w$]+)\\)/.exec(pattern);","        // Add flags within a leading mode modifier to the overall pattern's flags","        if (inlineFlags) {","            flags = XRegExp._clipDuplicates(flags + inlineFlags[1]);","        }","","        var data = {};","        for (var p in subs) {","            if (subs.hasOwnProperty(p)) {","                // Passing to XRegExp enables extended syntax and ensures independent validity,","                // lest an unescaped `(`, `)`, `[`, or trailing `\\` breaks the `(?:)` wrapper. For","                // subpatterns provided as native regexes, it dies on octals and adds the property","                // used to hold extended regex instance data, for simplicity.","                var sub = asXRegExp(subs[p], addFlagX);","                data[p] = {","                    // Deanchoring allows embedding independently useful anchored regexes. If you","                    // really need to keep your anchors, double them (i.e., `^^...$$`).","                    pattern: deanchor(sub.source),","                    names: sub[REGEX_DATA].captureNames || []","                };","            }","        }","","        // Passing to XRegExp dies on octals and ensures the outer pattern is independently valid;","        // helps keep this simple. Named captures will be put back.","        var patternAsRegex = asXRegExp(pattern, addFlagX);","","        // 'Caps' is short for 'captures'","        var numCaps = 0;","        var numPriorCaps;","        var numOuterCaps = 0;","        var outerCapsMap = [0];","        var outerCapNames = patternAsRegex[REGEX_DATA].captureNames || [];","        var output = patternAsRegex.source.replace(parts, function($0, $1, $2, $3, $4) {","            var subName = $1 || $2;","            var capName;","            var intro;","            var localCapIndex;","            // Named subpattern","            if (subName) {","                if (!data.hasOwnProperty(subName)) {","                    throw new ReferenceError('Undefined property ' + $0);","                }","                // Named subpattern was wrapped in a capturing group","                if ($1) {","                    capName = outerCapNames[numOuterCaps];","                    outerCapsMap[++numOuterCaps] = ++numCaps;","                    // If it's a named group, preserve the name. Otherwise, use the subpattern name","                    // as the capture name","                    intro = '(?<' + (capName || subName) + '>';","                } else {","                    intro = '(?:';","                }","                numPriorCaps = numCaps;","                return intro + data[subName].pattern.replace(subParts, function(match, paren, backref) {","                    // Capturing group","                    if (paren) {","                        capName = data[subName].names[numCaps - numPriorCaps];","                        ++numCaps;","                        // If the current capture has a name, preserve the name","                        if (capName) {","                            return '(?<' + capName + '>';","                        }","                    // Backreference","                    } else if (backref) {","                        localCapIndex = +backref - 1;","                        // Rewrite the backreference","                        return data[subName].names[localCapIndex] ?","                            // Need to preserve the backreference name in case using flag `n`","                            '\\\\k<' + data[subName].names[localCapIndex] + '>' :","                            '\\\\' + (+backref + numPriorCaps);","                    }","                    return match;","                }) + ')';","            }","            // Capturing group","            if ($3) {","                capName = outerCapNames[numOuterCaps];","                outerCapsMap[++numOuterCaps] = ++numCaps;","                // If the current capture has a name, preserve the name","                if (capName) {","                    return '(?<' + capName + '>';","                }","            // Backreference","            } else if ($4) {","                localCapIndex = +$4 - 1;","                // Rewrite the backreference","                return outerCapNames[localCapIndex] ?","                    // Need to preserve the backreference name in case using flag `n`","                    '\\\\k<' + outerCapNames[localCapIndex] + '>' :","                    '\\\\' + outerCapsMap[+$4];","            }","            return $0;","        });","","        return XRegExp(output, flags);","    };","","};",""],"l":{"8":1,"11":1,"12":1,"13":1,"24":1,"27":0,"28":0,"30":0,"36":0,"39":0,"51":1,"52":0,"53":0,"89":1,"90":0,"94":0,"95":0,"97":0,"98":0,"101":0,"102":0,"103":0,"108":0,"109":0,"120":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"134":0,"135":0,"136":0,"139":0,"140":0,"141":0,"144":0,"146":0,"148":0,"149":0,"151":0,"152":0,"153":0,"155":0,"156":0,"159":0,"160":0,"162":0,"167":0,"171":0,"172":0,"173":0,"175":0,"176":0,"179":0,"180":0,"182":0,"187":0,"190":0}},"/home/travis/build/npmtest/node-npmtest-xregexp/node_modules/xregexp/src/addons/matchrecursive.js":{"path":"/home/travis/build/npmtest/node-npmtest-xregexp/node_modules/xregexp/src/addons/matchrecursive.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0,0,0,0]},"f":{"1":1,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":17},"end":{"line":7,"column":35}}},"2":{"name":"row","line":15,"loc":{"start":{"line":15,"column":4},"end":{"line":15,"column":42}}},"3":{"name":"(anonymous_3)","line":74,"loc":{"start":{"line":74,"column":29},"end":{"line":74,"column":72}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":199,"column":2}},"2":{"start":{"line":15,"column":4},"end":{"line":22,"column":5}},"3":{"start":{"line":16,"column":8},"end":{"line":21,"column":10}},"4":{"start":{"line":74,"column":4},"end":{"line":197,"column":6}},"5":{"start":{"line":75,"column":8},"end":{"line":75,"column":28}},"6":{"start":{"line":76,"column":8},"end":{"line":76,"column":32}},"7":{"start":{"line":77,"column":8},"end":{"line":77,"column":45}},"8":{"start":{"line":78,"column":8},"end":{"line":78,"column":45}},"9":{"start":{"line":80,"column":8},"end":{"line":80,"column":49}},"10":{"start":{"line":81,"column":8},"end":{"line":81,"column":44}},"11":{"start":{"line":82,"column":8},"end":{"line":82,"column":36}},"12":{"start":{"line":83,"column":8},"end":{"line":83,"column":24}},"13":{"start":{"line":84,"column":8},"end":{"line":84,"column":27}},"14":{"start":{"line":85,"column":8},"end":{"line":85,"column":27}},"15":{"start":{"line":86,"column":8},"end":{"line":86,"column":25}},"16":{"start":{"line":87,"column":8},"end":{"line":87,"column":29}},"17":{"start":{"line":88,"column":8},"end":{"line":88,"column":23}},"18":{"start":{"line":89,"column":8},"end":{"line":89,"column":23}},"19":{"start":{"line":90,"column":8},"end":{"line":90,"column":22}},"20":{"start":{"line":91,"column":8},"end":{"line":91,"column":23}},"21":{"start":{"line":92,"column":8},"end":{"line":92,"column":16}},"22":{"start":{"line":93,"column":8},"end":{"line":93,"column":41}},"23":{"start":{"line":94,"column":8},"end":{"line":94,"column":43}},"24":{"start":{"line":96,"column":8},"end":{"line":117,"column":9}},"25":{"start":{"line":97,"column":12},"end":{"line":99,"column":13}},"26":{"start":{"line":98,"column":16},"end":{"line":98,"column":77}},"27":{"start":{"line":100,"column":12},"end":{"line":100,"column":52}},"28":{"start":{"line":106,"column":12},"end":{"line":116,"column":14}},"29":{"start":{"line":119,"column":8},"end":{"line":190,"column":9}},"30":{"start":{"line":122,"column":12},"end":{"line":124,"column":13}},"31":{"start":{"line":123,"column":16},"end":{"line":123,"column":91}},"32":{"start":{"line":125,"column":12},"end":{"line":125,"column":58}},"33":{"start":{"line":126,"column":12},"end":{"line":126,"column":60}},"34":{"start":{"line":128,"column":12},"end":{"line":134,"column":13}},"35":{"start":{"line":129,"column":16},"end":{"line":133,"column":17}},"36":{"start":{"line":130,"column":20},"end":{"line":130,"column":38}},"37":{"start":{"line":132,"column":20},"end":{"line":132,"column":37}},"38":{"start":{"line":145,"column":12},"end":{"line":150,"column":13}},"39":{"start":{"line":146,"column":16},"end":{"line":146,"column":61}},"40":{"start":{"line":147,"column":16},"end":{"line":147,"column":76}},"41":{"start":{"line":148,"column":19},"end":{"line":150,"column":13}},"42":{"start":{"line":149,"column":16},"end":{"line":149,"column":22}},"43":{"start":{"line":151,"column":12},"end":{"line":153,"column":13}},"44":{"start":{"line":152,"column":16},"end":{"line":152,"column":22}},"45":{"start":{"line":154,"column":12},"end":{"line":185,"column":13}},"46":{"start":{"line":155,"column":16},"end":{"line":158,"column":17}},"47":{"start":{"line":156,"column":20},"end":{"line":156,"column":44}},"48":{"start":{"line":157,"column":20},"end":{"line":157,"column":42}},"49":{"start":{"line":159,"column":16},"end":{"line":159,"column":29}},"50":{"start":{"line":160,"column":19},"end":{"line":185,"column":13}},"51":{"start":{"line":161,"column":16},"end":{"line":182,"column":17}},"52":{"start":{"line":162,"column":20},"end":{"line":177,"column":21}},"53":{"start":{"line":163,"column":24},"end":{"line":165,"column":25}},"54":{"start":{"line":164,"column":28},"end":{"line":164,"column":115}},"55":{"start":{"line":166,"column":24},"end":{"line":168,"column":25}},"56":{"start":{"line":167,"column":28},"end":{"line":167,"column":111}},"57":{"start":{"line":169,"column":24},"end":{"line":171,"column":25}},"58":{"start":{"line":170,"column":28},"end":{"line":170,"column":111}},"59":{"start":{"line":172,"column":24},"end":{"line":174,"column":25}},"60":{"start":{"line":173,"column":28},"end":{"line":173,"column":107}},"61":{"start":{"line":176,"column":24},"end":{"line":176,"column":71}},"62":{"start":{"line":178,"column":20},"end":{"line":178,"column":44}},"63":{"start":{"line":179,"column":20},"end":{"line":181,"column":21}},"64":{"start":{"line":180,"column":24},"end":{"line":180,"column":30}},"65":{"start":{"line":184,"column":16},"end":{"line":184,"column":72}},"66":{"start":{"line":187,"column":12},"end":{"line":189,"column":13}},"67":{"start":{"line":188,"column":16},"end":{"line":188,"column":27}},"68":{"start":{"line":192,"column":8},"end":{"line":194,"column":9}},"69":{"start":{"line":193,"column":12},"end":{"line":193,"column":87}},"70":{"start":{"line":196,"column":8},"end":{"line":196,"column":22}}},"branchMap":{"1":{"line":75,"type":"binary-expr","locations":[{"start":{"line":75,"column":16},"end":{"line":75,"column":21}},{"start":{"line":75,"column":25},"end":{"line":75,"column":27}}]},"2":{"line":76,"type":"binary-expr","locations":[{"start":{"line":76,"column":18},"end":{"line":76,"column":25}},{"start":{"line":76,"column":29},"end":{"line":76,"column":31}}]},"3":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":8},"end":{"line":96,"column":8}},{"start":{"line":96,"column":8},"end":{"line":96,"column":8}}]},"4":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":12},"end":{"line":97,"column":12}},{"start":{"line":97,"column":12},"end":{"line":97,"column":12}}]},"5":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":12},"end":{"line":122,"column":12}},{"start":{"line":122,"column":12},"end":{"line":122,"column":12}}]},"6":{"line":123,"type":"binary-expr","locations":[{"start":{"line":123,"column":29},"end":{"line":123,"column":71}},{"start":{"line":123,"column":75},"end":{"line":123,"column":79}}]},"7":{"line":128,"type":"if","locations":[{"start":{"line":128,"column":12},"end":{"line":128,"column":12}},{"start":{"line":128,"column":12},"end":{"line":128,"column":12}}]},"8":{"line":128,"type":"binary-expr","locations":[{"start":{"line":128,"column":16},"end":{"line":128,"column":25}},{"start":{"line":128,"column":29},"end":{"line":128,"column":39}}]},"9":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":16},"end":{"line":129,"column":16}},{"start":{"line":129,"column":16},"end":{"line":129,"column":16}}]},"10":{"line":145,"type":"if","locations":[{"start":{"line":145,"column":12},"end":{"line":145,"column":12}},{"start":{"line":145,"column":12},"end":{"line":145,"column":12}}]},"11":{"line":145,"type":"binary-expr","locations":[{"start":{"line":145,"column":16},"end":{"line":145,"column":25}},{"start":{"line":145,"column":29},"end":{"line":145,"column":39}}]},"12":{"line":146,"type":"binary-expr","locations":[{"start":{"line":146,"column":30},"end":{"line":146,"column":39}},{"start":{"line":146,"column":43},"end":{"line":146,"column":53}}]},"13":{"line":147,"type":"binary-expr","locations":[{"start":{"line":147,"column":41},"end":{"line":147,"column":50}},{"start":{"line":147,"column":54},"end":{"line":147,"column":64}}]},"14":{"line":148,"type":"if","locations":[{"start":{"line":148,"column":19},"end":{"line":148,"column":19}},{"start":{"line":148,"column":19},"end":{"line":148,"column":19}}]},"15":{"line":151,"type":"if","locations":[{"start":{"line":151,"column":12},"end":{"line":151,"column":12}},{"start":{"line":151,"column":12},"end":{"line":151,"column":12}}]},"16":{"line":151,"type":"binary-expr","locations":[{"start":{"line":151,"column":16},"end":{"line":151,"column":22}},{"start":{"line":151,"column":26},"end":{"line":151,"column":37}},{"start":{"line":151,"column":41},"end":{"line":151,"column":66}}]},"17":{"line":154,"type":"if","locations":[{"start":{"line":154,"column":12},"end":{"line":154,"column":12}},{"start":{"line":154,"column":12},"end":{"line":154,"column":12}}]},"18":{"line":155,"type":"if","locations":[{"start":{"line":155,"column":16},"end":{"line":155,"column":16}},{"start":{"line":155,"column":16},"end":{"line":155,"column":16}}]},"19":{"line":160,"type":"if","locations":[{"start":{"line":160,"column":19},"end":{"line":160,"column":19}},{"start":{"line":160,"column":19},"end":{"line":160,"column":19}}]},"20":{"line":160,"type":"binary-expr","locations":[{"start":{"line":160,"column":23},"end":{"line":160,"column":33}},{"start":{"line":160,"column":37},"end":{"line":160,"column":47}}]},"21":{"line":161,"type":"if","locations":[{"start":{"line":161,"column":16},"end":{"line":161,"column":16}},{"start":{"line":161,"column":16},"end":{"line":161,"column":16}}]},"22":{"line":162,"type":"if","locations":[{"start":{"line":162,"column":20},"end":{"line":162,"column":20}},{"start":{"line":162,"column":20},"end":{"line":162,"column":20}}]},"23":{"line":163,"type":"if","locations":[{"start":{"line":163,"column":24},"end":{"line":163,"column":24}},{"start":{"line":163,"column":24},"end":{"line":163,"column":24}}]},"24":{"line":163,"type":"binary-expr","locations":[{"start":{"line":163,"column":28},"end":{"line":163,"column":33}},{"start":{"line":163,"column":37},"end":{"line":163,"column":62}}]},"25":{"line":166,"type":"if","locations":[{"start":{"line":166,"column":24},"end":{"line":166,"column":24}},{"start":{"line":166,"column":24},"end":{"line":166,"column":24}}]},"26":{"line":169,"type":"if","locations":[{"start":{"line":169,"column":24},"end":{"line":169,"column":24}},{"start":{"line":169,"column":24},"end":{"line":169,"column":24}}]},"27":{"line":172,"type":"if","locations":[{"start":{"line":172,"column":24},"end":{"line":172,"column":24}},{"start":{"line":172,"column":24},"end":{"line":172,"column":24}}]},"28":{"line":179,"type":"if","locations":[{"start":{"line":179,"column":20},"end":{"line":179,"column":20}},{"start":{"line":179,"column":20},"end":{"line":179,"column":20}}]},"29":{"line":187,"type":"if","locations":[{"start":{"line":187,"column":12},"end":{"line":187,"column":12}},{"start":{"line":187,"column":12},"end":{"line":187,"column":12}}]},"30":{"line":192,"type":"if","locations":[{"start":{"line":192,"column":8},"end":{"line":192,"column":8}},{"start":{"line":192,"column":8},"end":{"line":192,"column":8}}]},"31":{"line":192,"type":"binary-expr","locations":[{"start":{"line":192,"column":12},"end":{"line":192,"column":18}},{"start":{"line":192,"column":22},"end":{"line":192,"column":29}},{"start":{"line":192,"column":33},"end":{"line":192,"column":35}},{"start":{"line":192,"column":39},"end":{"line":192,"column":44}},{"start":{"line":192,"column":48},"end":{"line":192,"column":73}}]}},"code":["/*!"," * XRegExp.matchRecursive 3.2.0"," * <xregexp.com>"," * Steven Levithan (c) 2009-2017 MIT License"," */","","module.exports = function(XRegExp) {","    'use strict';","","    /**","     * Returns a match detail object composed of the provided values.","     *","     * @private","     */","    function row(name, value, start, end) {","        return {","            name: name,","            value: value,","            start: start,","            end: end","        };","    }","","    /**","     * Returns an array of match strings between outermost left and right delimiters, or an array of","     * objects with detailed match parts and position data. An error is thrown if delimiters are","     * unbalanced within the data.","     *","     * @memberOf XRegExp","     * @param {String} str String to search.","     * @param {String} left Left delimiter as an XRegExp pattern.","     * @param {String} right Right delimiter as an XRegExp pattern.","     * @param {String} [flags] Any native or XRegExp flags, used for the left and right delimiters.","     * @param {Object} [options] Lets you specify `valueNames` and `escapeChar` options.","     * @returns {Array} Array of matches, or an empty array.","     * @example","     *","     * // Basic usage","     * var str = '(t((e))s)t()(ing)';","     * XRegExp.matchRecursive(str, '\\\\(', '\\\\)', 'g');","     * // -> ['t((e))s', '', 'ing']","     *","     * // Extended information mode with valueNames","     * str = 'Here is <div> <div>an</div></div> example';","     * XRegExp.matchRecursive(str, '<div\\\\s*>', '</div>', 'gi', {","     *   valueNames: ['between', 'left', 'match', 'right']","     * });","     * // -> [","     * // {name: 'between', value: 'Here is ',       start: 0,  end: 8},","     * // {name: 'left',    value: '<div>',          start: 8,  end: 13},","     * // {name: 'match',   value: ' <div>an</div>', start: 13, end: 27},","     * // {name: 'right',   value: '</div>',         start: 27, end: 33},","     * // {name: 'between', value: ' example',       start: 33, end: 41}","     * // ]","     *","     * // Omitting unneeded parts with null valueNames, and using escapeChar","     * str = '...{1}.\\\\{{function(x,y){return {y:x}}}';","     * XRegExp.matchRecursive(str, '{', '}', 'g', {","     *   valueNames: ['literal', null, 'value', null],","     *   escapeChar: '\\\\'","     * });","     * // -> [","     * // {name: 'literal', value: '...',  start: 0, end: 3},","     * // {name: 'value',   value: '1',    start: 4, end: 5},","     * // {name: 'literal', value: '.\\\\{', start: 6, end: 9},","     * // {name: 'value',   value: 'function(x,y){return {y:x}}', start: 10, end: 37}","     * // ]","     *","     * // Sticky mode via flag y","     * str = '<1><<<2>>><3>4<5>';","     * XRegExp.matchRecursive(str, '<', '>', 'gy');","     * // -> ['1', '<<2>>', '3']","     */","    XRegExp.matchRecursive = function(str, left, right, flags, options) {","        flags = flags || '';","        options = options || {};","        var global = flags.indexOf('g') > -1;","        var sticky = flags.indexOf('y') > -1;","        // Flag `y` is controlled internally","        var basicFlags = flags.replace(/y/g, '');","        var escapeChar = options.escapeChar;","        var vN = options.valueNames;","        var output = [];","        var openTokens = 0;","        var delimStart = 0;","        var delimEnd = 0;","        var lastOuterEnd = 0;","        var outerStart;","        var innerStart;","        var leftMatch;","        var rightMatch;","        var esc;","        left = XRegExp(left, basicFlags);","        right = XRegExp(right, basicFlags);","","        if (escapeChar) {","            if (escapeChar.length > 1) {","                throw new Error('Cannot use more than one escape character');","            }","            escapeChar = XRegExp.escape(escapeChar);","            // Example of concatenated `esc` regex:","            // `escapeChar`: '%'","            // `left`: '<'","            // `right`: '>'","            // Regex is: /(?:%[\\S\\s]|(?:(?!<|>)[^%])+)+/","            esc = new RegExp(","                '(?:' + escapeChar + '[\\\\S\\\\s]|(?:(?!' +","                    // Using `XRegExp.union` safely rewrites backreferences in `left` and `right`.","                    // Intentionally not passing `basicFlags` to `XRegExp.union` since any syntax","                    // transformation resulting from those flags was already applied to `left` and","                    // `right` when they were passed through the XRegExp constructor above.","                    XRegExp.union([left, right], '', {conjunction: 'or'}).source +","                    ')[^' + escapeChar + '])+)+',","                // Flags `gy` not needed here","                flags.replace(/[^imu]+/g, '')","            );","        }","","        while (true) {","            // If using an escape character, advance to the delimiter's next starting position,","            // skipping any escaped characters in between","            if (escapeChar) {","                delimEnd += (XRegExp.exec(str, esc, delimEnd, 'sticky') || [''])[0].length;","            }","            leftMatch = XRegExp.exec(str, left, delimEnd);","            rightMatch = XRegExp.exec(str, right, delimEnd);","            // Keep the leftmost match only","            if (leftMatch && rightMatch) {","                if (leftMatch.index <= rightMatch.index) {","                    rightMatch = null;","                } else {","                    leftMatch = null;","                }","            }","            // Paths (LM: leftMatch, RM: rightMatch, OT: openTokens):","            // LM | RM | OT | Result","            // 1  | 0  | 1  | loop","            // 1  | 0  | 0  | loop","            // 0  | 1  | 1  | loop","            // 0  | 1  | 0  | throw","            // 0  | 0  | 1  | throw","            // 0  | 0  | 0  | break","            // The paths above don't include the sticky mode special case. The loop ends after the","            // first completed match if not `global`.","            if (leftMatch || rightMatch) {","                delimStart = (leftMatch || rightMatch).index;","                delimEnd = delimStart + (leftMatch || rightMatch)[0].length;","            } else if (!openTokens) {","                break;","            }","            if (sticky && !openTokens && delimStart > lastOuterEnd) {","                break;","            }","            if (leftMatch) {","                if (!openTokens) {","                    outerStart = delimStart;","                    innerStart = delimEnd;","                }","                ++openTokens;","            } else if (rightMatch && openTokens) {","                if (!--openTokens) {","                    if (vN) {","                        if (vN[0] && outerStart > lastOuterEnd) {","                            output.push(row(vN[0], str.slice(lastOuterEnd, outerStart), lastOuterEnd, outerStart));","                        }","                        if (vN[1]) {","                            output.push(row(vN[1], str.slice(outerStart, innerStart), outerStart, innerStart));","                        }","                        if (vN[2]) {","                            output.push(row(vN[2], str.slice(innerStart, delimStart), innerStart, delimStart));","                        }","                        if (vN[3]) {","                            output.push(row(vN[3], str.slice(delimStart, delimEnd), delimStart, delimEnd));","                        }","                    } else {","                        output.push(str.slice(innerStart, delimStart));","                    }","                    lastOuterEnd = delimEnd;","                    if (!global) {","                        break;","                    }","                }","            } else {","                throw new Error('Unbalanced delimiter found in string');","            }","            // If the delimiter matched an empty string, avoid an infinite loop","            if (delimStart === delimEnd) {","                ++delimEnd;","            }","        }","","        if (global && !sticky && vN && vN[0] && str.length > lastOuterEnd) {","            output.push(row(vN[0], str.slice(lastOuterEnd), lastOuterEnd, str.length));","        }","","        return output;","    };","","};",""],"l":{"7":1,"15":1,"16":0,"74":1,"75":0,"76":0,"77":0,"78":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"96":0,"97":0,"98":0,"100":0,"106":0,"119":0,"122":0,"123":0,"125":0,"126":0,"128":0,"129":0,"130":0,"132":0,"145":0,"146":0,"147":0,"148":0,"149":0,"151":0,"152":0,"154":0,"155":0,"156":0,"157":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"166":0,"167":0,"169":0,"170":0,"172":0,"173":0,"176":0,"178":0,"179":0,"180":0,"184":0,"187":0,"188":0,"192":0,"193":0,"196":0}},"/home/travis/build/npmtest/node-npmtest-xregexp/node_modules/xregexp/src/addons/unicode-base.js":{"path":"/home/travis/build/npmtest/node-npmtest-xregexp/node_modules/xregexp/src/addons/unicode-base.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":493,"8":1,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":1,"27":0,"28":0,"29":1,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":1,"40":0,"41":0,"42":1,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":1,"70":4,"71":4,"72":4,"73":4,"74":456,"75":456,"76":0,"77":456,"78":0,"79":456,"80":456,"81":37,"82":4,"83":1,"84":0,"85":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,456],"34":[0,456],"35":[456,455,178],"36":[37,419]},"f":{"1":1,"2":493,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":4,"11":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":17},"end":{"line":7,"column":35}}},"2":{"name":"normalize","line":37,"loc":{"start":{"line":37,"column":4},"end":{"line":37,"column":29}}},"3":{"name":"charCode","line":42,"loc":{"start":{"line":42,"column":4},"end":{"line":42,"column":27}}},"4":{"name":"invertBmp","line":50,"loc":{"start":{"line":50,"column":4},"end":{"line":50,"column":30}}},"5":{"name":"(anonymous_5)","line":57,"loc":{"start":{"line":57,"column":12},"end":{"line":57,"column":24}}},"6":{"name":"cacheInvertedBmp","line":80,"loc":{"start":{"line":80,"column":4},"end":{"line":80,"column":36}}},"7":{"name":"buildAstral","line":89,"loc":{"start":{"line":89,"column":4},"end":{"line":89,"column":42}}},"8":{"name":"cacheAstral","line":110,"loc":{"start":{"line":110,"column":4},"end":{"line":110,"column":42}}},"9":{"name":"(anonymous_9)","line":128,"loc":{"start":{"line":128,"column":8},"end":{"line":128,"column":38}}},"10":{"name":"(anonymous_10)","line":210,"loc":{"start":{"line":210,"column":29},"end":{"line":210,"column":44}}},"11":{"name":"(anonymous_11)","line":255,"loc":{"start":{"line":255,"column":34},"end":{"line":255,"column":49}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":260,"column":2}},"2":{"start":{"line":29,"column":4},"end":{"line":29,"column":21}},"3":{"start":{"line":32,"column":4},"end":{"line":32,"column":27}},"4":{"start":{"line":33,"column":4},"end":{"line":33,"column":27}},"5":{"start":{"line":34,"column":4},"end":{"line":34,"column":29}},"6":{"start":{"line":37,"column":4},"end":{"line":39,"column":5}},"7":{"start":{"line":38,"column":8},"end":{"line":38,"column":57}},"8":{"start":{"line":42,"column":4},"end":{"line":47,"column":5}},"9":{"start":{"line":43,"column":8},"end":{"line":43,"column":42}},"10":{"start":{"line":44,"column":8},"end":{"line":46,"column":59}},"11":{"start":{"line":50,"column":4},"end":{"line":77,"column":5}},"12":{"start":{"line":51,"column":8},"end":{"line":51,"column":24}},"13":{"start":{"line":52,"column":8},"end":{"line":52,"column":25}},"14":{"start":{"line":54,"column":8},"end":{"line":67,"column":10}},"15":{"start":{"line":58,"column":16},"end":{"line":58,"column":43}},"16":{"start":{"line":59,"column":16},"end":{"line":64,"column":17}},"17":{"start":{"line":60,"column":20},"end":{"line":60,"column":61}},"18":{"start":{"line":61,"column":20},"end":{"line":63,"column":21}},"19":{"start":{"line":62,"column":24},"end":{"line":62,"column":64}},"20":{"start":{"line":65,"column":16},"end":{"line":65,"column":49}},"21":{"start":{"line":69,"column":8},"end":{"line":74,"column":9}},"22":{"start":{"line":70,"column":12},"end":{"line":70,"column":53}},"23":{"start":{"line":71,"column":12},"end":{"line":73,"column":13}},"24":{"start":{"line":72,"column":16},"end":{"line":72,"column":37}},"25":{"start":{"line":76,"column":8},"end":{"line":76,"column":22}},"26":{"start":{"line":80,"column":4},"end":{"line":86,"column":5}},"27":{"start":{"line":81,"column":8},"end":{"line":81,"column":24}},"28":{"start":{"line":82,"column":8},"end":{"line":85,"column":10}},"29":{"start":{"line":89,"column":4},"end":{"line":107,"column":5}},"30":{"start":{"line":90,"column":8},"end":{"line":90,"column":33}},"31":{"start":{"line":91,"column":8},"end":{"line":91,"column":26}},"32":{"start":{"line":93,"column":8},"end":{"line":95,"column":9}},"33":{"start":{"line":94,"column":12},"end":{"line":94,"column":71}},"34":{"start":{"line":96,"column":8},"end":{"line":98,"column":9}},"35":{"start":{"line":97,"column":12},"end":{"line":97,"column":36}},"36":{"start":{"line":99,"column":8},"end":{"line":101,"column":9}},"37":{"start":{"line":100,"column":12},"end":{"line":100,"column":72}},"38":{"start":{"line":104,"column":8},"end":{"line":106,"column":35}},"39":{"start":{"line":110,"column":4},"end":{"line":116,"column":5}},"40":{"start":{"line":111,"column":8},"end":{"line":111,"column":43}},"41":{"start":{"line":112,"column":8},"end":{"line":115,"column":10}},"42":{"start":{"line":125,"column":4},"end":{"line":180,"column":6}},"43":{"start":{"line":129,"column":12},"end":{"line":129,"column":60}},"44":{"start":{"line":130,"column":12},"end":{"line":130,"column":60}},"45":{"start":{"line":131,"column":12},"end":{"line":131,"column":64}},"46":{"start":{"line":132,"column":12},"end":{"line":132,"column":76}},"47":{"start":{"line":133,"column":12},"end":{"line":133,"column":109}},"48":{"start":{"line":135,"column":12},"end":{"line":135,"column":59}},"49":{"start":{"line":137,"column":12},"end":{"line":137,"column":55}},"50":{"start":{"line":139,"column":12},"end":{"line":139,"column":55}},"51":{"start":{"line":141,"column":12},"end":{"line":141,"column":37}},"52":{"start":{"line":143,"column":12},"end":{"line":145,"column":13}},"53":{"start":{"line":144,"column":16},"end":{"line":144,"column":65}},"54":{"start":{"line":146,"column":12},"end":{"line":148,"column":13}},"55":{"start":{"line":147,"column":16},"end":{"line":147,"column":67}},"56":{"start":{"line":151,"column":12},"end":{"line":158,"column":13}},"57":{"start":{"line":152,"column":16},"end":{"line":152,"column":49}},"58":{"start":{"line":153,"column":16},"end":{"line":155,"column":17}},"59":{"start":{"line":154,"column":20},"end":{"line":154,"column":99}},"60":{"start":{"line":156,"column":16},"end":{"line":156,"column":37}},"61":{"start":{"line":157,"column":16},"end":{"line":157,"column":39}},"62":{"start":{"line":160,"column":12},"end":{"line":162,"column":13}},"63":{"start":{"line":161,"column":16},"end":{"line":161,"column":66}},"64":{"start":{"line":163,"column":12},"end":{"line":169,"column":13}},"65":{"start":{"line":164,"column":16},"end":{"line":166,"column":17}},"66":{"start":{"line":165,"column":20},"end":{"line":165,"column":63}},"67":{"start":{"line":168,"column":16},"end":{"line":168,"column":52}},"68":{"start":{"line":171,"column":12},"end":{"line":173,"column":58}},"69":{"start":{"line":210,"column":4},"end":{"line":232,"column":6}},"70":{"start":{"line":211,"column":8},"end":{"line":211,"column":56}},"71":{"start":{"line":212,"column":8},"end":{"line":212,"column":65}},"72":{"start":{"line":213,"column":8},"end":{"line":213,"column":17}},"73":{"start":{"line":215,"column":8},"end":{"line":227,"column":9}},"74":{"start":{"line":216,"column":12},"end":{"line":216,"column":27}},"75":{"start":{"line":217,"column":12},"end":{"line":219,"column":13}},"76":{"start":{"line":218,"column":16},"end":{"line":218,"column":45}},"77":{"start":{"line":220,"column":12},"end":{"line":222,"column":13}},"78":{"start":{"line":221,"column":16},"end":{"line":221,"column":57}},"79":{"start":{"line":223,"column":12},"end":{"line":223,"column":49}},"80":{"start":{"line":224,"column":12},"end":{"line":226,"column":13}},"81":{"start":{"line":225,"column":16},"end":{"line":225,"column":54}},"82":{"start":{"line":231,"column":8},"end":{"line":231,"column":40}},"83":{"start":{"line":255,"column":4},"end":{"line":258,"column":6}},"84":{"start":{"line":256,"column":8},"end":{"line":256,"column":35}},"85":{"start":{"line":257,"column":8},"end":{"line":257,"column":29}}},"branchMap":{"1":{"line":44,"type":"cond-expr","locations":[{"start":{"line":45,"column":12},"end":{"line":45,"column":23}},{"start":{"line":46,"column":12},"end":{"line":46,"column":58}}]},"2":{"line":46,"type":"cond-expr","locations":[{"start":{"line":46,"column":52},"end":{"line":46,"column":53}},{"start":{"line":46,"column":56},"end":{"line":46,"column":57}}]},"3":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":16},"end":{"line":59,"column":16}},{"start":{"line":59,"column":16},"end":{"line":59,"column":16}}]},"4":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":20},"end":{"line":61,"column":20}},{"start":{"line":61,"column":20},"end":{"line":61,"column":20}}]},"5":{"line":65,"type":"binary-expr","locations":[{"start":{"line":65,"column":35},"end":{"line":65,"column":39}},{"start":{"line":65,"column":43},"end":{"line":65,"column":47}}]},"6":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":8},"end":{"line":69,"column":8}},{"start":{"line":69,"column":8},"end":{"line":69,"column":8}}]},"7":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":12},"end":{"line":71,"column":12}},{"start":{"line":71,"column":12},"end":{"line":71,"column":12}}]},"8":{"line":83,"type":"binary-expr","locations":[{"start":{"line":83,"column":12},"end":{"line":83,"column":31}},{"start":{"line":84,"column":13},"end":{"line":84,"column":63}}]},"9":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":8},"end":{"line":93,"column":8}},{"start":{"line":93,"column":8},"end":{"line":93,"column":8}}]},"10":{"line":93,"type":"binary-expr","locations":[{"start":{"line":93,"column":12},"end":{"line":93,"column":20}},{"start":{"line":93,"column":24},"end":{"line":93,"column":39}}]},"11":{"line":94,"type":"cond-expr","locations":[{"start":{"line":94,"column":61},"end":{"line":94,"column":64}},{"start":{"line":94,"column":67},"end":{"line":94,"column":69}}]},"12":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":8},"end":{"line":96,"column":8}},{"start":{"line":96,"column":8},"end":{"line":96,"column":8}}]},"13":{"line":99,"type":"if","locations":[{"start":{"line":99,"column":8},"end":{"line":99,"column":8}},{"start":{"line":99,"column":8},"end":{"line":99,"column":8}}]},"14":{"line":99,"type":"binary-expr","locations":[{"start":{"line":99,"column":12},"end":{"line":99,"column":26}},{"start":{"line":99,"column":30},"end":{"line":99,"column":38}}]},"15":{"line":100,"type":"cond-expr","locations":[{"start":{"line":100,"column":39},"end":{"line":100,"column":42}},{"start":{"line":100,"column":45},"end":{"line":100,"column":47}}]},"16":{"line":104,"type":"cond-expr","locations":[{"start":{"line":105,"column":12},"end":{"line":105,"column":84}},{"start":{"line":106,"column":12},"end":{"line":106,"column":34}}]},"17":{"line":111,"type":"cond-expr","locations":[{"start":{"line":111,"column":31},"end":{"line":111,"column":35}},{"start":{"line":111,"column":38},"end":{"line":111,"column":42}}]},"18":{"line":113,"type":"binary-expr","locations":[{"start":{"line":113,"column":12},"end":{"line":113,"column":31}},{"start":{"line":114,"column":13},"end":{"line":114,"column":63}}]},"19":{"line":135,"type":"binary-expr","locations":[{"start":{"line":135,"column":28},"end":{"line":135,"column":44}},{"start":{"line":135,"column":48},"end":{"line":135,"column":58}}]},"20":{"line":139,"type":"binary-expr","locations":[{"start":{"line":139,"column":33},"end":{"line":139,"column":41}},{"start":{"line":139,"column":45},"end":{"line":139,"column":53}}]},"21":{"line":143,"type":"if","locations":[{"start":{"line":143,"column":12},"end":{"line":143,"column":12}},{"start":{"line":143,"column":12},"end":{"line":143,"column":12}}]},"22":{"line":143,"type":"binary-expr","locations":[{"start":{"line":143,"column":16},"end":{"line":143,"column":32}},{"start":{"line":143,"column":36},"end":{"line":143,"column":44}}]},"23":{"line":146,"type":"if","locations":[{"start":{"line":146,"column":12},"end":{"line":146,"column":12}},{"start":{"line":146,"column":12},"end":{"line":146,"column":12}}]},"24":{"line":151,"type":"if","locations":[{"start":{"line":151,"column":12},"end":{"line":151,"column":12}},{"start":{"line":151,"column":12},"end":{"line":151,"column":12}}]},"25":{"line":153,"type":"if","locations":[{"start":{"line":153,"column":16},"end":{"line":153,"column":16}},{"start":{"line":153,"column":16},"end":{"line":153,"column":16}}]},"26":{"line":160,"type":"if","locations":[{"start":{"line":160,"column":12},"end":{"line":160,"column":12}},{"start":{"line":160,"column":12},"end":{"line":160,"column":12}}]},"27":{"line":160,"type":"binary-expr","locations":[{"start":{"line":160,"column":18},"end":{"line":160,"column":26}},{"start":{"line":160,"column":30},"end":{"line":160,"column":42}}]},"28":{"line":163,"type":"if","locations":[{"start":{"line":163,"column":12},"end":{"line":163,"column":12}},{"start":{"line":163,"column":12},"end":{"line":163,"column":12}}]},"29":{"line":164,"type":"if","locations":[{"start":{"line":164,"column":16},"end":{"line":164,"column":16}},{"start":{"line":164,"column":16},"end":{"line":164,"column":16}}]},"30":{"line":171,"type":"cond-expr","locations":[{"start":{"line":172,"column":17},"end":{"line":172,"column":62}},{"start":{"line":173,"column":16},"end":{"line":173,"column":57}}]},"31":{"line":172,"type":"cond-expr","locations":[{"start":{"line":172,"column":29},"end":{"line":172,"column":51}},{"start":{"line":172,"column":54},"end":{"line":172,"column":62}}]},"32":{"line":173,"type":"cond-expr","locations":[{"start":{"line":173,"column":29},"end":{"line":173,"column":33}},{"start":{"line":173,"column":36},"end":{"line":173,"column":39}}]},"33":{"line":217,"type":"if","locations":[{"start":{"line":217,"column":12},"end":{"line":217,"column":12}},{"start":{"line":217,"column":12},"end":{"line":217,"column":12}}]},"34":{"line":220,"type":"if","locations":[{"start":{"line":220,"column":12},"end":{"line":220,"column":12}},{"start":{"line":220,"column":12},"end":{"line":220,"column":12}}]},"35":{"line":220,"type":"binary-expr","locations":[{"start":{"line":220,"column":18},"end":{"line":220,"column":32}},{"start":{"line":220,"column":36},"end":{"line":220,"column":44}},{"start":{"line":220,"column":48},"end":{"line":220,"column":59}}]},"36":{"line":224,"type":"if","locations":[{"start":{"line":224,"column":12},"end":{"line":224,"column":12}},{"start":{"line":224,"column":12},"end":{"line":224,"column":12}}]}},"code":["/*!"," * XRegExp Unicode Base 3.2.0"," * <xregexp.com>"," * Steven Levithan (c) 2008-2017 MIT License"," */","","module.exports = function(XRegExp) {","    'use strict';","","    /**","     * Adds base support for Unicode matching:","     * - Adds syntax `\\p{..}` for matching Unicode tokens. Tokens can be inverted using `\\P{..}` or","     *   `\\p{^..}`. Token names ignore case, spaces, hyphens, and underscores. You can omit the","     *   braces for token names that are a single letter (e.g. `\\pL` or `PL`).","     * - Adds flag A (astral), which enables 21-bit Unicode support.","     * - Adds the `XRegExp.addUnicodeData` method used by other addons to provide character data.","     *","     * Unicode Base relies on externally provided Unicode character data. Official addons are","     * available to provide data for Unicode categories, scripts, blocks, and properties.","     *","     * @requires XRegExp","     */","","    // ==--------------------------==","    // Private stuff","    // ==--------------------------==","","    // Storage for Unicode data","    var unicode = {};","","    // Reuse utils","    var dec = XRegExp._dec;","    var hex = XRegExp._hex;","    var pad4 = XRegExp._pad4;","","    // Generates a token lookup name: lowercase, with hyphens, spaces, and underscores removed","    function normalize(name) {","        return name.replace(/[- _]+/g, '').toLowerCase();","    }","","    // Gets the decimal code of a literal code unit, \\xHH, \\uHHHH, or a backslash-escaped literal","    function charCode(chr) {","        var esc = /^\\\\[xu](.+)/.exec(chr);","        return esc ?","            dec(esc[1]) :","            chr.charCodeAt(chr.charAt(0) === '\\\\' ? 1 : 0);","    }","","    // Inverts a list of ordered BMP characters and ranges","    function invertBmp(range) {","        var output = '';","        var lastEnd = -1;","","        XRegExp.forEach(","            range,","            /(\\\\x..|\\\\u....|\\\\?[\\s\\S])(?:-(\\\\x..|\\\\u....|\\\\?[\\s\\S]))?/,","            function(m) {","                var start = charCode(m[1]);","                if (start > (lastEnd + 1)) {","                    output += '\\\\u' + pad4(hex(lastEnd + 1));","                    if (start > (lastEnd + 2)) {","                        output += '-\\\\u' + pad4(hex(start - 1));","                    }","                }","                lastEnd = charCode(m[2] || m[1]);","            }","        );","","        if (lastEnd < 0xFFFF) {","            output += '\\\\u' + pad4(hex(lastEnd + 1));","            if (lastEnd < 0xFFFE) {","                output += '-\\\\uFFFF';","            }","        }","","        return output;","    }","","    // Generates an inverted BMP range on first use","    function cacheInvertedBmp(slug) {","        var prop = 'b!';","        return (","            unicode[slug][prop] ||","            (unicode[slug][prop] = invertBmp(unicode[slug].bmp))","        );","    }","","    // Combines and optionally negates BMP and astral data","    function buildAstral(slug, isNegated) {","        var item = unicode[slug];","        var combined = '';","","        if (item.bmp && !item.isBmpLast) {","            combined = '[' + item.bmp + ']' + (item.astral ? '|' : '');","        }","        if (item.astral) {","            combined += item.astral;","        }","        if (item.isBmpLast && item.bmp) {","            combined += (item.astral ? '|' : '') + '[' + item.bmp + ']';","        }","","        // Astral Unicode tokens always match a code point, never a code unit","        return isNegated ?","            '(?:(?!' + combined + ')(?:[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\0-\\uFFFF]))' :","            '(?:' + combined + ')';","    }","","    // Builds a complete astral pattern on first use","    function cacheAstral(slug, isNegated) {","        var prop = isNegated ? 'a!' : 'a=';","        return (","            unicode[slug][prop] ||","            (unicode[slug][prop] = buildAstral(slug, isNegated))","        );","    }","","    // ==--------------------------==","    // Core functionality","    // ==--------------------------==","","    /*","     * Add astral mode (flag A) and Unicode token syntax: `\\p{..}`, `\\P{..}`, `\\p{^..}`, `\\pC`.","     */","    XRegExp.addToken(","        // Use `*` instead of `+` to avoid capturing `^` as the token name in `\\p{^}`","        /\\\\([pP])(?:{(\\^?)([^}]*)}|([A-Za-z]))/,","        function(match, scope, flags) {","            var ERR_DOUBLE_NEG = 'Invalid double negation ';","            var ERR_UNKNOWN_NAME = 'Unknown Unicode token ';","            var ERR_UNKNOWN_REF = 'Unicode token missing data ';","            var ERR_ASTRAL_ONLY = 'Astral mode required for Unicode token ';","            var ERR_ASTRAL_IN_CLASS = 'Astral mode does not support Unicode tokens within character classes';","            // Negated via \\P{..} or \\p{^..}","            var isNegated = match[1] === 'P' || !!match[2];","            // Switch from BMP (0-FFFF) to astral (0-10FFFF) mode via flag A","            var isAstralMode = flags.indexOf('A') > -1;","            // Token lookup name. Check `[4]` first to avoid passing `undefined` via `\\p{}`","            var slug = normalize(match[4] || match[3]);","            // Token data object","            var item = unicode[slug];","","            if (match[1] === 'P' && match[2]) {","                throw new SyntaxError(ERR_DOUBLE_NEG + match[0]);","            }","            if (!unicode.hasOwnProperty(slug)) {","                throw new SyntaxError(ERR_UNKNOWN_NAME + match[0]);","            }","","            // Switch to the negated form of the referenced Unicode token","            if (item.inverseOf) {","                slug = normalize(item.inverseOf);","                if (!unicode.hasOwnProperty(slug)) {","                    throw new ReferenceError(ERR_UNKNOWN_REF + match[0] + ' -> ' + item.inverseOf);","                }","                item = unicode[slug];","                isNegated = !isNegated;","            }","","            if (!(item.bmp || isAstralMode)) {","                throw new SyntaxError(ERR_ASTRAL_ONLY + match[0]);","            }","            if (isAstralMode) {","                if (scope === 'class') {","                    throw new SyntaxError(ERR_ASTRAL_IN_CLASS);","                }","","                return cacheAstral(slug, isNegated);","            }","","            return scope === 'class' ?","                (isNegated ? cacheInvertedBmp(slug) : item.bmp) :","                (isNegated ? '[^' : '[') + item.bmp + ']';","        },","        {","            scope: 'all',","            optionalFlags: 'A',","            leadChar: '\\\\'","        }","    );","","    /**","     * Adds to the list of Unicode tokens that XRegExp regexes can match via `\\p` or `\\P`.","     *","     * @memberOf XRegExp","     * @param {Array} data Objects with named character ranges. Each object may have properties","     *   `name`, `alias`, `isBmpLast`, `inverseOf`, `bmp`, and `astral`. All but `name` are","     *   optional, although one of `bmp` or `astral` is required (unless `inverseOf` is set). If","     *   `astral` is absent, the `bmp` data is used for BMP and astral modes. If `bmp` is absent,","     *   the name errors in BMP mode but works in astral mode. If both `bmp` and `astral` are","     *   provided, the `bmp` data only is used in BMP mode, and the combination of `bmp` and","     *   `astral` data is used in astral mode. `isBmpLast` is needed when a token matches orphan","     *   high surrogates *and* uses surrogate pairs to match astral code points. The `bmp` and","     *   `astral` data should be a combination of literal characters and `\\xHH` or `\\uHHHH` escape","     *   sequences, with hyphens to create ranges. Any regex metacharacters in the data should be","     *   escaped, apart from range-creating hyphens. The `astral` data can additionally use","     *   character classes and alternation, and should use surrogate pairs to represent astral code","     *   points. `inverseOf` can be used to avoid duplicating character data if a Unicode token is","     *   defined as the exact inverse of another token.","     * @example","     *","     * // Basic use","     * XRegExp.addUnicodeData([{","     *   name: 'XDigit',","     *   alias: 'Hexadecimal',","     *   bmp: '0-9A-Fa-f'","     * }]);","     * XRegExp('\\\\p{XDigit}:\\\\p{Hexadecimal}+').test('0:3D'); // -> true","     */","    XRegExp.addUnicodeData = function(data) {","        var ERR_NO_NAME = 'Unicode token requires name';","        var ERR_NO_DATA = 'Unicode token has no character data ';","        var item;","","        for (var i = 0; i < data.length; ++i) {","            item = data[i];","            if (!item.name) {","                throw new Error(ERR_NO_NAME);","            }","            if (!(item.inverseOf || item.bmp || item.astral)) {","                throw new Error(ERR_NO_DATA + item.name);","            }","            unicode[normalize(item.name)] = item;","            if (item.alias) {","                unicode[normalize(item.alias)] = item;","            }","        }","","        // Reset the pattern cache used by the `XRegExp` constructor, since the same pattern and","        // flags might now produce different results","        XRegExp.cache.flush('patterns');","    };","","    /**","     * @ignore","     *","     * Return a reference to the internal Unicode definition structure for the given Unicode","     * Property if the given name is a legal Unicode Property for use in XRegExp `\\p` or `\\P` regex","     * constructs.","     *","     * @memberOf XRegExp","     * @param {String} name Name by which the Unicode Property may be recognized (case-insensitive),","     *   e.g. `'N'` or `'Number'`. The given name is matched against all registered Unicode","     *   Properties and Property Aliases.","     * @returns {Object} Reference to definition structure when the name matches a Unicode Property.","     *","     * @note","     * For more info on Unicode Properties, see also http://unicode.org/reports/tr18/#Categories.","     *","     * @note","     * This method is *not* part of the officially documented API and may change or be removed in","     * the future. It is meant for userland code that wishes to reuse the (large) internal Unicode","     * structures set up by XRegExp.","     */","    XRegExp._getUnicodeProperty = function(name) {","        var slug = normalize(name);","        return unicode[slug];","    };","","};",""],"l":{"7":1,"29":1,"32":1,"33":1,"34":1,"37":1,"38":493,"42":1,"43":0,"44":0,"50":1,"51":0,"52":0,"54":0,"58":0,"59":0,"60":0,"61":0,"62":0,"65":0,"69":0,"70":0,"71":0,"72":0,"76":0,"80":1,"81":0,"82":0,"89":1,"90":0,"91":0,"93":0,"94":0,"96":0,"97":0,"99":0,"100":0,"104":0,"110":1,"111":0,"112":0,"125":1,"129":0,"130":0,"131":0,"132":0,"133":0,"135":0,"137":0,"139":0,"141":0,"143":0,"144":0,"146":0,"147":0,"151":0,"152":0,"153":0,"154":0,"156":0,"157":0,"160":0,"161":0,"163":0,"164":0,"165":0,"168":0,"171":0,"210":1,"211":4,"212":4,"213":4,"215":4,"216":456,"217":456,"218":0,"220":456,"221":0,"223":456,"224":456,"225":37,"231":4,"255":1,"256":0,"257":0}},"/home/travis/build/npmtest/node-npmtest-xregexp/node_modules/xregexp/src/addons/unicode-blocks.js":{"path":"/home/travis/build/npmtest/node-npmtest-xregexp/node_modules/xregexp/src/addons/unicode-blocks.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{"1":[0,1]},"f":{"1":1},"fnMap":{"1":{"name":"(anonymous_1)","line":8,"loc":{"start":{"line":8,"column":17},"end":{"line":8,"column":35}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":1120,"column":2}},"2":{"start":{"line":21,"column":4},"end":{"line":23,"column":5}},"3":{"start":{"line":22,"column":8},"end":{"line":22,"column":86}},"4":{"start":{"line":25,"column":4},"end":{"line":1118,"column":7}}},"branchMap":{"1":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":4},"end":{"line":21,"column":4}},{"start":{"line":21,"column":4},"end":{"line":21,"column":4}}]}},"code":["/*!"," * XRegExp Unicode Blocks 3.2.0"," * <xregexp.com>"," * Steven Levithan (c) 2010-2017 MIT License"," * Unicode data by Mathias Bynens <mathiasbynens.be>"," */","","module.exports = function(XRegExp) {","    'use strict';","","    /**","     * Adds support for all Unicode blocks. Block names use the prefix 'In'. E.g.,","     * `\\p{InBasicLatin}`. Token names are case insensitive, and any spaces, hyphens, and","     * underscores are ignored.","     *","     * Uses Unicode 9.0.0.","     *","     * @requires XRegExp, Unicode Base","     */","","    if (!XRegExp.addUnicodeData) {","        throw new ReferenceError('Unicode Base must be loaded before Unicode Blocks');","    }","","    XRegExp.addUnicodeData([","        {","            name: 'InAdlam',","            astral: '\\uD83A[\\uDD00-\\uDD5F]'","        },","        {","            name: 'InAegean_Numbers',","            astral: '\\uD800[\\uDD00-\\uDD3F]'","        },","        {","            name: 'InAhom',","            astral: '\\uD805[\\uDF00-\\uDF3F]'","        },","        {","            name: 'InAlchemical_Symbols',","            astral: '\\uD83D[\\uDF00-\\uDF7F]'","        },","        {","            name: 'InAlphabetic_Presentation_Forms',","            bmp: '\\uFB00-\\uFB4F'","        },","        {","            name: 'InAnatolian_Hieroglyphs',","            astral: '\\uD811[\\uDC00-\\uDE7F]'","        },","        {","            name: 'InAncient_Greek_Musical_Notation',","            astral: '\\uD834[\\uDE00-\\uDE4F]'","        },","        {","            name: 'InAncient_Greek_Numbers',","            astral: '\\uD800[\\uDD40-\\uDD8F]'","        },","        {","            name: 'InAncient_Symbols',","            astral: '\\uD800[\\uDD90-\\uDDCF]'","        },","        {","            name: 'InArabic',","            bmp: '\\u0600-\\u06FF'","        },","        {","            name: 'InArabic_Extended_A',","            bmp: '\\u08A0-\\u08FF'","        },","        {","            name: 'InArabic_Mathematical_Alphabetic_Symbols',","            astral: '\\uD83B[\\uDE00-\\uDEFF]'","        },","        {","            name: 'InArabic_Presentation_Forms_A',","            bmp: '\\uFB50-\\uFDFF'","        },","        {","            name: 'InArabic_Presentation_Forms_B',","            bmp: '\\uFE70-\\uFEFF'","        },","        {","            name: 'InArabic_Supplement',","            bmp: '\\u0750-\\u077F'","        },","        {","            name: 'InArmenian',","            bmp: '\\u0530-\\u058F'","        },","        {","            name: 'InArrows',","            bmp: '\\u2190-\\u21FF'","        },","        {","            name: 'InAvestan',","            astral: '\\uD802[\\uDF00-\\uDF3F]'","        },","        {","            name: 'InBalinese',","            bmp: '\\u1B00-\\u1B7F'","        },","        {","            name: 'InBamum',","            bmp: '\\uA6A0-\\uA6FF'","        },","        {","            name: 'InBamum_Supplement',","            astral: '\\uD81A[\\uDC00-\\uDE3F]'","        },","        {","            name: 'InBasic_Latin',","            bmp: '\\0-\\x7F'","        },","        {","            name: 'InBassa_Vah',","            astral: '\\uD81A[\\uDED0-\\uDEFF]'","        },","        {","            name: 'InBatak',","            bmp: '\\u1BC0-\\u1BFF'","        },","        {","            name: 'InBengali',","            bmp: '\\u0980-\\u09FF'","        },","        {","            name: 'InBhaiksuki',","            astral: '\\uD807[\\uDC00-\\uDC6F]'","        },","        {","            name: 'InBlock_Elements',","            bmp: '\\u2580-\\u259F'","        },","        {","            name: 'InBopomofo',","            bmp: '\\u3100-\\u312F'","        },","        {","            name: 'InBopomofo_Extended',","            bmp: '\\u31A0-\\u31BF'","        },","        {","            name: 'InBox_Drawing',","            bmp: '\\u2500-\\u257F'","        },","        {","            name: 'InBrahmi',","            astral: '\\uD804[\\uDC00-\\uDC7F]'","        },","        {","            name: 'InBraille_Patterns',","            bmp: '\\u2800-\\u28FF'","        },","        {","            name: 'InBuginese',","            bmp: '\\u1A00-\\u1A1F'","        },","        {","            name: 'InBuhid',","            bmp: '\\u1740-\\u175F'","        },","        {","            name: 'InByzantine_Musical_Symbols',","            astral: '\\uD834[\\uDC00-\\uDCFF]'","        },","        {","            name: 'InCJK_Compatibility',","            bmp: '\\u3300-\\u33FF'","        },","        {","            name: 'InCJK_Compatibility_Forms',","            bmp: '\\uFE30-\\uFE4F'","        },","        {","            name: 'InCJK_Compatibility_Ideographs',","            bmp: '\\uF900-\\uFAFF'","        },","        {","            name: 'InCJK_Compatibility_Ideographs_Supplement',","            astral: '\\uD87E[\\uDC00-\\uDE1F]'","        },","        {","            name: 'InCJK_Radicals_Supplement',","            bmp: '\\u2E80-\\u2EFF'","        },","        {","            name: 'InCJK_Strokes',","            bmp: '\\u31C0-\\u31EF'","        },","        {","            name: 'InCJK_Symbols_and_Punctuation',","            bmp: '\\u3000-\\u303F'","        },","        {","            name: 'InCJK_Unified_Ideographs',","            bmp: '\\u4E00-\\u9FFF'","        },","        {","            name: 'InCJK_Unified_Ideographs_Extension_A',","            bmp: '\\u3400-\\u4DBF'","        },","        {","            name: 'InCJK_Unified_Ideographs_Extension_B',","            astral: '[\\uD840-\\uD868][\\uDC00-\\uDFFF]|\\uD869[\\uDC00-\\uDEDF]'","        },","        {","            name: 'InCJK_Unified_Ideographs_Extension_C',","            astral: '\\uD869[\\uDF00-\\uDFFF]|[\\uD86A-\\uD86C][\\uDC00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF3F]'","        },","        {","            name: 'InCJK_Unified_Ideographs_Extension_D',","            astral: '\\uD86D[\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1F]'","        },","        {","            name: 'InCJK_Unified_Ideographs_Extension_E',","            astral: '\\uD86E[\\uDC20-\\uDFFF]|[\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD873[\\uDC00-\\uDEAF]'","        },","        {","            name: 'InCarian',","            astral: '\\uD800[\\uDEA0-\\uDEDF]'","        },","        {","            name: 'InCaucasian_Albanian',","            astral: '\\uD801[\\uDD30-\\uDD6F]'","        },","        {","            name: 'InChakma',","            astral: '\\uD804[\\uDD00-\\uDD4F]'","        },","        {","            name: 'InCham',","            bmp: '\\uAA00-\\uAA5F'","        },","        {","            name: 'InCherokee',","            bmp: '\\u13A0-\\u13FF'","        },","        {","            name: 'InCherokee_Supplement',","            bmp: '\\uAB70-\\uABBF'","        },","        {","            name: 'InCombining_Diacritical_Marks',","            bmp: '\\u0300-\\u036F'","        },","        {","            name: 'InCombining_Diacritical_Marks_Extended',","            bmp: '\\u1AB0-\\u1AFF'","        },","        {","            name: 'InCombining_Diacritical_Marks_Supplement',","            bmp: '\\u1DC0-\\u1DFF'","        },","        {","            name: 'InCombining_Diacritical_Marks_for_Symbols',","            bmp: '\\u20D0-\\u20FF'","        },","        {","            name: 'InCombining_Half_Marks',","            bmp: '\\uFE20-\\uFE2F'","        },","        {","            name: 'InCommon_Indic_Number_Forms',","            bmp: '\\uA830-\\uA83F'","        },","        {","            name: 'InControl_Pictures',","            bmp: '\\u2400-\\u243F'","        },","        {","            name: 'InCoptic',","            bmp: '\\u2C80-\\u2CFF'","        },","        {","            name: 'InCoptic_Epact_Numbers',","            astral: '\\uD800[\\uDEE0-\\uDEFF]'","        },","        {","            name: 'InCounting_Rod_Numerals',","            astral: '\\uD834[\\uDF60-\\uDF7F]'","        },","        {","            name: 'InCuneiform',","            astral: '\\uD808[\\uDC00-\\uDFFF]'","        },","        {","            name: 'InCuneiform_Numbers_and_Punctuation',","            astral: '\\uD809[\\uDC00-\\uDC7F]'","        },","        {","            name: 'InCurrency_Symbols',","            bmp: '\\u20A0-\\u20CF'","        },","        {","            name: 'InCypriot_Syllabary',","            astral: '\\uD802[\\uDC00-\\uDC3F]'","        },","        {","            name: 'InCyrillic',","            bmp: '\\u0400-\\u04FF'","        },","        {","            name: 'InCyrillic_Extended_A',","            bmp: '\\u2DE0-\\u2DFF'","        },","        {","            name: 'InCyrillic_Extended_B',","            bmp: '\\uA640-\\uA69F'","        },","        {","            name: 'InCyrillic_Extended_C',","            bmp: '\\u1C80-\\u1C8F'","        },","        {","            name: 'InCyrillic_Supplement',","            bmp: '\\u0500-\\u052F'","        },","        {","            name: 'InDeseret',","            astral: '\\uD801[\\uDC00-\\uDC4F]'","        },","        {","            name: 'InDevanagari',","            bmp: '\\u0900-\\u097F'","        },","        {","            name: 'InDevanagari_Extended',","            bmp: '\\uA8E0-\\uA8FF'","        },","        {","            name: 'InDingbats',","            bmp: '\\u2700-\\u27BF'","        },","        {","            name: 'InDomino_Tiles',","            astral: '\\uD83C[\\uDC30-\\uDC9F]'","        },","        {","            name: 'InDuployan',","            astral: '\\uD82F[\\uDC00-\\uDC9F]'","        },","        {","            name: 'InEarly_Dynastic_Cuneiform',","            astral: '\\uD809[\\uDC80-\\uDD4F]'","        },","        {","            name: 'InEgyptian_Hieroglyphs',","            astral: '\\uD80C[\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2F]'","        },","        {","            name: 'InElbasan',","            astral: '\\uD801[\\uDD00-\\uDD2F]'","        },","        {","            name: 'InEmoticons',","            astral: '\\uD83D[\\uDE00-\\uDE4F]'","        },","        {","            name: 'InEnclosed_Alphanumeric_Supplement',","            astral: '\\uD83C[\\uDD00-\\uDDFF]'","        },","        {","            name: 'InEnclosed_Alphanumerics',","            bmp: '\\u2460-\\u24FF'","        },","        {","            name: 'InEnclosed_CJK_Letters_and_Months',","            bmp: '\\u3200-\\u32FF'","        },","        {","            name: 'InEnclosed_Ideographic_Supplement',","            astral: '\\uD83C[\\uDE00-\\uDEFF]'","        },","        {","            name: 'InEthiopic',","            bmp: '\\u1200-\\u137F'","        },","        {","            name: 'InEthiopic_Extended',","            bmp: '\\u2D80-\\u2DDF'","        },","        {","            name: 'InEthiopic_Extended_A',","            bmp: '\\uAB00-\\uAB2F'","        },","        {","            name: 'InEthiopic_Supplement',","            bmp: '\\u1380-\\u139F'","        },","        {","            name: 'InGeneral_Punctuation',","            bmp: '\\u2000-\\u206F'","        },","        {","            name: 'InGeometric_Shapes',","            bmp: '\\u25A0-\\u25FF'","        },","        {","            name: 'InGeometric_Shapes_Extended',","            astral: '\\uD83D[\\uDF80-\\uDFFF]'","        },","        {","            name: 'InGeorgian',","            bmp: '\\u10A0-\\u10FF'","        },","        {","            name: 'InGeorgian_Supplement',","            bmp: '\\u2D00-\\u2D2F'","        },","        {","            name: 'InGlagolitic',","            bmp: '\\u2C00-\\u2C5F'","        },","        {","            name: 'InGlagolitic_Supplement',","            astral: '\\uD838[\\uDC00-\\uDC2F]'","        },","        {","            name: 'InGothic',","            astral: '\\uD800[\\uDF30-\\uDF4F]'","        },","        {","            name: 'InGrantha',","            astral: '\\uD804[\\uDF00-\\uDF7F]'","        },","        {","            name: 'InGreek_Extended',","            bmp: '\\u1F00-\\u1FFF'","        },","        {","            name: 'InGreek_and_Coptic',","            bmp: '\\u0370-\\u03FF'","        },","        {","            name: 'InGujarati',","            bmp: '\\u0A80-\\u0AFF'","        },","        {","            name: 'InGurmukhi',","            bmp: '\\u0A00-\\u0A7F'","        },","        {","            name: 'InHalfwidth_and_Fullwidth_Forms',","            bmp: '\\uFF00-\\uFFEF'","        },","        {","            name: 'InHangul_Compatibility_Jamo',","            bmp: '\\u3130-\\u318F'","        },","        {","            name: 'InHangul_Jamo',","            bmp: '\\u1100-\\u11FF'","        },","        {","            name: 'InHangul_Jamo_Extended_A',","            bmp: '\\uA960-\\uA97F'","        },","        {","            name: 'InHangul_Jamo_Extended_B',","            bmp: '\\uD7B0-\\uD7FF'","        },","        {","            name: 'InHangul_Syllables',","            bmp: '\\uAC00-\\uD7AF'","        },","        {","            name: 'InHanunoo',","            bmp: '\\u1720-\\u173F'","        },","        {","            name: 'InHatran',","            astral: '\\uD802[\\uDCE0-\\uDCFF]'","        },","        {","            name: 'InHebrew',","            bmp: '\\u0590-\\u05FF'","        },","        {","            name: 'InHigh_Private_Use_Surrogates',","            bmp: '\\uDB80-\\uDBFF'","        },","        {","            name: 'InHigh_Surrogates',","            bmp: '\\uD800-\\uDB7F'","        },","        {","            name: 'InHiragana',","            bmp: '\\u3040-\\u309F'","        },","        {","            name: 'InIPA_Extensions',","            bmp: '\\u0250-\\u02AF'","        },","        {","            name: 'InIdeographic_Description_Characters',","            bmp: '\\u2FF0-\\u2FFF'","        },","        {","            name: 'InIdeographic_Symbols_and_Punctuation',","            astral: '\\uD81B[\\uDFE0-\\uDFFF]'","        },","        {","            name: 'InImperial_Aramaic',","            astral: '\\uD802[\\uDC40-\\uDC5F]'","        },","        {","            name: 'InInscriptional_Pahlavi',","            astral: '\\uD802[\\uDF60-\\uDF7F]'","        },","        {","            name: 'InInscriptional_Parthian',","            astral: '\\uD802[\\uDF40-\\uDF5F]'","        },","        {","            name: 'InJavanese',","            bmp: '\\uA980-\\uA9DF'","        },","        {","            name: 'InKaithi',","            astral: '\\uD804[\\uDC80-\\uDCCF]'","        },","        {","            name: 'InKana_Supplement',","            astral: '\\uD82C[\\uDC00-\\uDCFF]'","        },","        {","            name: 'InKanbun',","            bmp: '\\u3190-\\u319F'","        },","        {","            name: 'InKangxi_Radicals',","            bmp: '\\u2F00-\\u2FDF'","        },","        {","            name: 'InKannada',","            bmp: '\\u0C80-\\u0CFF'","        },","        {","            name: 'InKatakana',","            bmp: '\\u30A0-\\u30FF'","        },","        {","            name: 'InKatakana_Phonetic_Extensions',","            bmp: '\\u31F0-\\u31FF'","        },","        {","            name: 'InKayah_Li',","            bmp: '\\uA900-\\uA92F'","        },","        {","            name: 'InKharoshthi',","            astral: '\\uD802[\\uDE00-\\uDE5F]'","        },","        {","            name: 'InKhmer',","            bmp: '\\u1780-\\u17FF'","        },","        {","            name: 'InKhmer_Symbols',","            bmp: '\\u19E0-\\u19FF'","        },","        {","            name: 'InKhojki',","            astral: '\\uD804[\\uDE00-\\uDE4F]'","        },","        {","            name: 'InKhudawadi',","            astral: '\\uD804[\\uDEB0-\\uDEFF]'","        },","        {","            name: 'InLao',","            bmp: '\\u0E80-\\u0EFF'","        },","        {","            name: 'InLatin_Extended_Additional',","            bmp: '\\u1E00-\\u1EFF'","        },","        {","            name: 'InLatin_Extended_A',","            bmp: '\\u0100-\\u017F'","        },","        {","            name: 'InLatin_Extended_B',","            bmp: '\\u0180-\\u024F'","        },","        {","            name: 'InLatin_Extended_C',","            bmp: '\\u2C60-\\u2C7F'","        },","        {","            name: 'InLatin_Extended_D',","            bmp: '\\uA720-\\uA7FF'","        },","        {","            name: 'InLatin_Extended_E',","            bmp: '\\uAB30-\\uAB6F'","        },","        {","            name: 'InLatin_1_Supplement',","            bmp: '\\x80-\\xFF'","        },","        {","            name: 'InLepcha',","            bmp: '\\u1C00-\\u1C4F'","        },","        {","            name: 'InLetterlike_Symbols',","            bmp: '\\u2100-\\u214F'","        },","        {","            name: 'InLimbu',","            bmp: '\\u1900-\\u194F'","        },","        {","            name: 'InLinear_A',","            astral: '\\uD801[\\uDE00-\\uDF7F]'","        },","        {","            name: 'InLinear_B_Ideograms',","            astral: '\\uD800[\\uDC80-\\uDCFF]'","        },","        {","            name: 'InLinear_B_Syllabary',","            astral: '\\uD800[\\uDC00-\\uDC7F]'","        },","        {","            name: 'InLisu',","            bmp: '\\uA4D0-\\uA4FF'","        },","        {","            name: 'InLow_Surrogates',","            bmp: '\\uDC00-\\uDFFF'","        },","        {","            name: 'InLycian',","            astral: '\\uD800[\\uDE80-\\uDE9F]'","        },","        {","            name: 'InLydian',","            astral: '\\uD802[\\uDD20-\\uDD3F]'","        },","        {","            name: 'InMahajani',","            astral: '\\uD804[\\uDD50-\\uDD7F]'","        },","        {","            name: 'InMahjong_Tiles',","            astral: '\\uD83C[\\uDC00-\\uDC2F]'","        },","        {","            name: 'InMalayalam',","            bmp: '\\u0D00-\\u0D7F'","        },","        {","            name: 'InMandaic',","            bmp: '\\u0840-\\u085F'","        },","        {","            name: 'InManichaean',","            astral: '\\uD802[\\uDEC0-\\uDEFF]'","        },","        {","            name: 'InMarchen',","            astral: '\\uD807[\\uDC70-\\uDCBF]'","        },","        {","            name: 'InMathematical_Alphanumeric_Symbols',","            astral: '\\uD835[\\uDC00-\\uDFFF]'","        },","        {","            name: 'InMathematical_Operators',","            bmp: '\\u2200-\\u22FF'","        },","        {","            name: 'InMeetei_Mayek',","            bmp: '\\uABC0-\\uABFF'","        },","        {","            name: 'InMeetei_Mayek_Extensions',","            bmp: '\\uAAE0-\\uAAFF'","        },","        {","            name: 'InMende_Kikakui',","            astral: '\\uD83A[\\uDC00-\\uDCDF]'","        },","        {","            name: 'InMeroitic_Cursive',","            astral: '\\uD802[\\uDDA0-\\uDDFF]'","        },","        {","            name: 'InMeroitic_Hieroglyphs',","            astral: '\\uD802[\\uDD80-\\uDD9F]'","        },","        {","            name: 'InMiao',","            astral: '\\uD81B[\\uDF00-\\uDF9F]'","        },","        {","            name: 'InMiscellaneous_Mathematical_Symbols_A',","            bmp: '\\u27C0-\\u27EF'","        },","        {","            name: 'InMiscellaneous_Mathematical_Symbols_B',","            bmp: '\\u2980-\\u29FF'","        },","        {","            name: 'InMiscellaneous_Symbols',","            bmp: '\\u2600-\\u26FF'","        },","        {","            name: 'InMiscellaneous_Symbols_and_Arrows',","            bmp: '\\u2B00-\\u2BFF'","        },","        {","            name: 'InMiscellaneous_Symbols_and_Pictographs',","            astral: '\\uD83C[\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDDFF]'","        },","        {","            name: 'InMiscellaneous_Technical',","            bmp: '\\u2300-\\u23FF'","        },","        {","            name: 'InModi',","            astral: '\\uD805[\\uDE00-\\uDE5F]'","        },","        {","            name: 'InModifier_Tone_Letters',","            bmp: '\\uA700-\\uA71F'","        },","        {","            name: 'InMongolian',","            bmp: '\\u1800-\\u18AF'","        },","        {","            name: 'InMongolian_Supplement',","            astral: '\\uD805[\\uDE60-\\uDE7F]'","        },","        {","            name: 'InMro',","            astral: '\\uD81A[\\uDE40-\\uDE6F]'","        },","        {","            name: 'InMultani',","            astral: '\\uD804[\\uDE80-\\uDEAF]'","        },","        {","            name: 'InMusical_Symbols',","            astral: '\\uD834[\\uDD00-\\uDDFF]'","        },","        {","            name: 'InMyanmar',","            bmp: '\\u1000-\\u109F'","        },","        {","            name: 'InMyanmar_Extended_A',","            bmp: '\\uAA60-\\uAA7F'","        },","        {","            name: 'InMyanmar_Extended_B',","            bmp: '\\uA9E0-\\uA9FF'","        },","        {","            name: 'InNKo',","            bmp: '\\u07C0-\\u07FF'","        },","        {","            name: 'InNabataean',","            astral: '\\uD802[\\uDC80-\\uDCAF]'","        },","        {","            name: 'InNew_Tai_Lue',","            bmp: '\\u1980-\\u19DF'","        },","        {","            name: 'InNewa',","            astral: '\\uD805[\\uDC00-\\uDC7F]'","        },","        {","            name: 'InNumber_Forms',","            bmp: '\\u2150-\\u218F'","        },","        {","            name: 'InOgham',","            bmp: '\\u1680-\\u169F'","        },","        {","            name: 'InOl_Chiki',","            bmp: '\\u1C50-\\u1C7F'","        },","        {","            name: 'InOld_Hungarian',","            astral: '\\uD803[\\uDC80-\\uDCFF]'","        },","        {","            name: 'InOld_Italic',","            astral: '\\uD800[\\uDF00-\\uDF2F]'","        },","        {","            name: 'InOld_North_Arabian',","            astral: '\\uD802[\\uDE80-\\uDE9F]'","        },","        {","            name: 'InOld_Permic',","            astral: '\\uD800[\\uDF50-\\uDF7F]'","        },","        {","            name: 'InOld_Persian',","            astral: '\\uD800[\\uDFA0-\\uDFDF]'","        },","        {","            name: 'InOld_South_Arabian',","            astral: '\\uD802[\\uDE60-\\uDE7F]'","        },","        {","            name: 'InOld_Turkic',","            astral: '\\uD803[\\uDC00-\\uDC4F]'","        },","        {","            name: 'InOptical_Character_Recognition',","            bmp: '\\u2440-\\u245F'","        },","        {","            name: 'InOriya',","            bmp: '\\u0B00-\\u0B7F'","        },","        {","            name: 'InOrnamental_Dingbats',","            astral: '\\uD83D[\\uDE50-\\uDE7F]'","        },","        {","            name: 'InOsage',","            astral: '\\uD801[\\uDCB0-\\uDCFF]'","        },","        {","            name: 'InOsmanya',","            astral: '\\uD801[\\uDC80-\\uDCAF]'","        },","        {","            name: 'InPahawh_Hmong',","            astral: '\\uD81A[\\uDF00-\\uDF8F]'","        },","        {","            name: 'InPalmyrene',","            astral: '\\uD802[\\uDC60-\\uDC7F]'","        },","        {","            name: 'InPau_Cin_Hau',","            astral: '\\uD806[\\uDEC0-\\uDEFF]'","        },","        {","            name: 'InPhags_pa',","            bmp: '\\uA840-\\uA87F'","        },","        {","            name: 'InPhaistos_Disc',","            astral: '\\uD800[\\uDDD0-\\uDDFF]'","        },","        {","            name: 'InPhoenician',","            astral: '\\uD802[\\uDD00-\\uDD1F]'","        },","        {","            name: 'InPhonetic_Extensions',","            bmp: '\\u1D00-\\u1D7F'","        },","        {","            name: 'InPhonetic_Extensions_Supplement',","            bmp: '\\u1D80-\\u1DBF'","        },","        {","            name: 'InPlaying_Cards',","            astral: '\\uD83C[\\uDCA0-\\uDCFF]'","        },","        {","            name: 'InPrivate_Use_Area',","            bmp: '\\uE000-\\uF8FF'","        },","        {","            name: 'InPsalter_Pahlavi',","            astral: '\\uD802[\\uDF80-\\uDFAF]'","        },","        {","            name: 'InRejang',","            bmp: '\\uA930-\\uA95F'","        },","        {","            name: 'InRumi_Numeral_Symbols',","            astral: '\\uD803[\\uDE60-\\uDE7F]'","        },","        {","            name: 'InRunic',","            bmp: '\\u16A0-\\u16FF'","        },","        {","            name: 'InSamaritan',","            bmp: '\\u0800-\\u083F'","        },","        {","            name: 'InSaurashtra',","            bmp: '\\uA880-\\uA8DF'","        },","        {","            name: 'InSharada',","            astral: '\\uD804[\\uDD80-\\uDDDF]'","        },","        {","            name: 'InShavian',","            astral: '\\uD801[\\uDC50-\\uDC7F]'","        },","        {","            name: 'InShorthand_Format_Controls',","            astral: '\\uD82F[\\uDCA0-\\uDCAF]'","        },","        {","            name: 'InSiddham',","            astral: '\\uD805[\\uDD80-\\uDDFF]'","        },","        {","            name: 'InSinhala',","            bmp: '\\u0D80-\\u0DFF'","        },","        {","            name: 'InSinhala_Archaic_Numbers',","            astral: '\\uD804[\\uDDE0-\\uDDFF]'","        },","        {","            name: 'InSmall_Form_Variants',","            bmp: '\\uFE50-\\uFE6F'","        },","        {","            name: 'InSora_Sompeng',","            astral: '\\uD804[\\uDCD0-\\uDCFF]'","        },","        {","            name: 'InSpacing_Modifier_Letters',","            bmp: '\\u02B0-\\u02FF'","        },","        {","            name: 'InSpecials',","            bmp: '\\uFFF0-\\uFFFF'","        },","        {","            name: 'InSundanese',","            bmp: '\\u1B80-\\u1BBF'","        },","        {","            name: 'InSundanese_Supplement',","            bmp: '\\u1CC0-\\u1CCF'","        },","        {","            name: 'InSuperscripts_and_Subscripts',","            bmp: '\\u2070-\\u209F'","        },","        {","            name: 'InSupplemental_Arrows_A',","            bmp: '\\u27F0-\\u27FF'","        },","        {","            name: 'InSupplemental_Arrows_B',","            bmp: '\\u2900-\\u297F'","        },","        {","            name: 'InSupplemental_Arrows_C',","            astral: '\\uD83E[\\uDC00-\\uDCFF]'","        },","        {","            name: 'InSupplemental_Mathematical_Operators',","            bmp: '\\u2A00-\\u2AFF'","        },","        {","            name: 'InSupplemental_Punctuation',","            bmp: '\\u2E00-\\u2E7F'","        },","        {","            name: 'InSupplemental_Symbols_and_Pictographs',","            astral: '\\uD83E[\\uDD00-\\uDDFF]'","        },","        {","            name: 'InSupplementary_Private_Use_Area_A',","            astral: '[\\uDB80-\\uDBBF][\\uDC00-\\uDFFF]'","        },","        {","            name: 'InSupplementary_Private_Use_Area_B',","            astral: '[\\uDBC0-\\uDBFF][\\uDC00-\\uDFFF]'","        },","        {","            name: 'InSutton_SignWriting',","            astral: '\\uD836[\\uDC00-\\uDEAF]'","        },","        {","            name: 'InSyloti_Nagri',","            bmp: '\\uA800-\\uA82F'","        },","        {","            name: 'InSyriac',","            bmp: '\\u0700-\\u074F'","        },","        {","            name: 'InTagalog',","            bmp: '\\u1700-\\u171F'","        },","        {","            name: 'InTagbanwa',","            bmp: '\\u1760-\\u177F'","        },","        {","            name: 'InTags',","            astral: '\\uDB40[\\uDC00-\\uDC7F]'","        },","        {","            name: 'InTai_Le',","            bmp: '\\u1950-\\u197F'","        },","        {","            name: 'InTai_Tham',","            bmp: '\\u1A20-\\u1AAF'","        },","        {","            name: 'InTai_Viet',","            bmp: '\\uAA80-\\uAADF'","        },","        {","            name: 'InTai_Xuan_Jing_Symbols',","            astral: '\\uD834[\\uDF00-\\uDF5F]'","        },","        {","            name: 'InTakri',","            astral: '\\uD805[\\uDE80-\\uDECF]'","        },","        {","            name: 'InTamil',","            bmp: '\\u0B80-\\u0BFF'","        },","        {","            name: 'InTangut',","            astral: '[\\uD81C-\\uD821][\\uDC00-\\uDFFF]'","        },","        {","            name: 'InTangut_Components',","            astral: '\\uD822[\\uDC00-\\uDEFF]'","        },","        {","            name: 'InTelugu',","            bmp: '\\u0C00-\\u0C7F'","        },","        {","            name: 'InThaana',","            bmp: '\\u0780-\\u07BF'","        },","        {","            name: 'InThai',","            bmp: '\\u0E00-\\u0E7F'","        },","        {","            name: 'InTibetan',","            bmp: '\\u0F00-\\u0FFF'","        },","        {","            name: 'InTifinagh',","            bmp: '\\u2D30-\\u2D7F'","        },","        {","            name: 'InTirhuta',","            astral: '\\uD805[\\uDC80-\\uDCDF]'","        },","        {","            name: 'InTransport_and_Map_Symbols',","            astral: '\\uD83D[\\uDE80-\\uDEFF]'","        },","        {","            name: 'InUgaritic',","            astral: '\\uD800[\\uDF80-\\uDF9F]'","        },","        {","            name: 'InUnified_Canadian_Aboriginal_Syllabics',","            bmp: '\\u1400-\\u167F'","        },","        {","            name: 'InUnified_Canadian_Aboriginal_Syllabics_Extended',","            bmp: '\\u18B0-\\u18FF'","        },","        {","            name: 'InVai',","            bmp: '\\uA500-\\uA63F'","        },","        {","            name: 'InVariation_Selectors',","            bmp: '\\uFE00-\\uFE0F'","        },","        {","            name: 'InVariation_Selectors_Supplement',","            astral: '\\uDB40[\\uDD00-\\uDDEF]'","        },","        {","            name: 'InVedic_Extensions',","            bmp: '\\u1CD0-\\u1CFF'","        },","        {","            name: 'InVertical_Forms',","            bmp: '\\uFE10-\\uFE1F'","        },","        {","            name: 'InWarang_Citi',","            astral: '\\uD806[\\uDCA0-\\uDCFF]'","        },","        {","            name: 'InYi_Radicals',","            bmp: '\\uA490-\\uA4CF'","        },","        {","            name: 'InYi_Syllables',","            bmp: '\\uA000-\\uA48F'","        },","        {","            name: 'InYijing_Hexagram_Symbols',","            bmp: '\\u4DC0-\\u4DFF'","        }","    ]);","","};",""],"l":{"8":1,"21":1,"22":0,"25":1}},"/home/travis/build/npmtest/node-npmtest-xregexp/node_modules/xregexp/src/addons/unicode-categories.js":{"path":"/home/travis/build/npmtest/node-npmtest-xregexp/node_modules/xregexp/src/addons/unicode-categories.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{"1":[0,1]},"f":{"1":1},"fnMap":{"1":{"name":"(anonymous_1)","line":8,"loc":{"start":{"line":8,"column":17},"end":{"line":8,"column":35}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":236,"column":2}},"2":{"start":{"line":21,"column":4},"end":{"line":23,"column":5}},"3":{"start":{"line":22,"column":8},"end":{"line":22,"column":90}},"4":{"start":{"line":25,"column":4},"end":{"line":234,"column":7}}},"branchMap":{"1":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":4},"end":{"line":21,"column":4}},{"start":{"line":21,"column":4},"end":{"line":21,"column":4}}]}},"code":["/*!"," * XRegExp Unicode Categories 3.2.0"," * <xregexp.com>"," * Steven Levithan (c) 2010-2017 MIT License"," * Unicode data by Mathias Bynens <mathiasbynens.be>"," */","","module.exports = function(XRegExp) {","    'use strict';","","    /**","     * Adds support for Unicode's general categories. E.g., `\\p{Lu}` or `\\p{Uppercase Letter}`. See","     * category descriptions in UAX #44 <http://unicode.org/reports/tr44/#GC_Values_Table>. Token","     * names are case insensitive, and any spaces, hyphens, and underscores are ignored.","     *","     * Uses Unicode 9.0.0.","     *","     * @requires XRegExp, Unicode Base","     */","","    if (!XRegExp.addUnicodeData) {","        throw new ReferenceError('Unicode Base must be loaded before Unicode Categories');","    }","","    XRegExp.addUnicodeData([","        {","            name: 'C',","            alias: 'Other',","            isBmpLast: true,","            bmp: '\\0-\\x1F\\x7F-\\x9F\\xAD\\u0378\\u0379\\u0380-\\u0383\\u038B\\u038D\\u03A2\\u0530\\u0557\\u0558\\u0560\\u0588\\u058B\\u058C\\u0590\\u05C8-\\u05CF\\u05EB-\\u05EF\\u05F5-\\u0605\\u061C\\u061D\\u06DD\\u070E\\u070F\\u074B\\u074C\\u07B2-\\u07BF\\u07FB-\\u07FF\\u082E\\u082F\\u083F\\u085C\\u085D\\u085F-\\u089F\\u08B5\\u08BE-\\u08D3\\u08E2\\u0984\\u098D\\u098E\\u0991\\u0992\\u09A9\\u09B1\\u09B3-\\u09B5\\u09BA\\u09BB\\u09C5\\u09C6\\u09C9\\u09CA\\u09CF-\\u09D6\\u09D8-\\u09DB\\u09DE\\u09E4\\u09E5\\u09FC-\\u0A00\\u0A04\\u0A0B-\\u0A0E\\u0A11\\u0A12\\u0A29\\u0A31\\u0A34\\u0A37\\u0A3A\\u0A3B\\u0A3D\\u0A43-\\u0A46\\u0A49\\u0A4A\\u0A4E-\\u0A50\\u0A52-\\u0A58\\u0A5D\\u0A5F-\\u0A65\\u0A76-\\u0A80\\u0A84\\u0A8E\\u0A92\\u0AA9\\u0AB1\\u0AB4\\u0ABA\\u0ABB\\u0AC6\\u0ACA\\u0ACE\\u0ACF\\u0AD1-\\u0ADF\\u0AE4\\u0AE5\\u0AF2-\\u0AF8\\u0AFA-\\u0B00\\u0B04\\u0B0D\\u0B0E\\u0B11\\u0B12\\u0B29\\u0B31\\u0B34\\u0B3A\\u0B3B\\u0B45\\u0B46\\u0B49\\u0B4A\\u0B4E-\\u0B55\\u0B58-\\u0B5B\\u0B5E\\u0B64\\u0B65\\u0B78-\\u0B81\\u0B84\\u0B8B-\\u0B8D\\u0B91\\u0B96-\\u0B98\\u0B9B\\u0B9D\\u0BA0-\\u0BA2\\u0BA5-\\u0BA7\\u0BAB-\\u0BAD\\u0BBA-\\u0BBD\\u0BC3-\\u0BC5\\u0BC9\\u0BCE\\u0BCF\\u0BD1-\\u0BD6\\u0BD8-\\u0BE5\\u0BFB-\\u0BFF\\u0C04\\u0C0D\\u0C11\\u0C29\\u0C3A-\\u0C3C\\u0C45\\u0C49\\u0C4E-\\u0C54\\u0C57\\u0C5B-\\u0C5F\\u0C64\\u0C65\\u0C70-\\u0C77\\u0C84\\u0C8D\\u0C91\\u0CA9\\u0CB4\\u0CBA\\u0CBB\\u0CC5\\u0CC9\\u0CCE-\\u0CD4\\u0CD7-\\u0CDD\\u0CDF\\u0CE4\\u0CE5\\u0CF0\\u0CF3-\\u0D00\\u0D04\\u0D0D\\u0D11\\u0D3B\\u0D3C\\u0D45\\u0D49\\u0D50-\\u0D53\\u0D64\\u0D65\\u0D80\\u0D81\\u0D84\\u0D97-\\u0D99\\u0DB2\\u0DBC\\u0DBE\\u0DBF\\u0DC7-\\u0DC9\\u0DCB-\\u0DCE\\u0DD5\\u0DD7\\u0DE0-\\u0DE5\\u0DF0\\u0DF1\\u0DF5-\\u0E00\\u0E3B-\\u0E3E\\u0E5C-\\u0E80\\u0E83\\u0E85\\u0E86\\u0E89\\u0E8B\\u0E8C\\u0E8E-\\u0E93\\u0E98\\u0EA0\\u0EA4\\u0EA6\\u0EA8\\u0EA9\\u0EAC\\u0EBA\\u0EBE\\u0EBF\\u0EC5\\u0EC7\\u0ECE\\u0ECF\\u0EDA\\u0EDB\\u0EE0-\\u0EFF\\u0F48\\u0F6D-\\u0F70\\u0F98\\u0FBD\\u0FCD\\u0FDB-\\u0FFF\\u10C6\\u10C8-\\u10CC\\u10CE\\u10CF\\u1249\\u124E\\u124F\\u1257\\u1259\\u125E\\u125F\\u1289\\u128E\\u128F\\u12B1\\u12B6\\u12B7\\u12BF\\u12C1\\u12C6\\u12C7\\u12D7\\u1311\\u1316\\u1317\\u135B\\u135C\\u137D-\\u137F\\u139A-\\u139F\\u13F6\\u13F7\\u13FE\\u13FF\\u169D-\\u169F\\u16F9-\\u16FF\\u170D\\u1715-\\u171F\\u1737-\\u173F\\u1754-\\u175F\\u176D\\u1771\\u1774-\\u177F\\u17DE\\u17DF\\u17EA-\\u17EF\\u17FA-\\u17FF\\u180E\\u180F\\u181A-\\u181F\\u1878-\\u187F\\u18AB-\\u18AF\\u18F6-\\u18FF\\u191F\\u192C-\\u192F\\u193C-\\u193F\\u1941-\\u1943\\u196E\\u196F\\u1975-\\u197F\\u19AC-\\u19AF\\u19CA-\\u19CF\\u19DB-\\u19DD\\u1A1C\\u1A1D\\u1A5F\\u1A7D\\u1A7E\\u1A8A-\\u1A8F\\u1A9A-\\u1A9F\\u1AAE\\u1AAF\\u1ABF-\\u1AFF\\u1B4C-\\u1B4F\\u1B7D-\\u1B7F\\u1BF4-\\u1BFB\\u1C38-\\u1C3A\\u1C4A-\\u1C4C\\u1C89-\\u1CBF\\u1CC8-\\u1CCF\\u1CF7\\u1CFA-\\u1CFF\\u1DF6-\\u1DFA\\u1F16\\u1F17\\u1F1E\\u1F1F\\u1F46\\u1F47\\u1F4E\\u1F4F\\u1F58\\u1F5A\\u1F5C\\u1F5E\\u1F7E\\u1F7F\\u1FB5\\u1FC5\\u1FD4\\u1FD5\\u1FDC\\u1FF0\\u1FF1\\u1FF5\\u1FFF\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u206F\\u2072\\u2073\\u208F\\u209D-\\u209F\\u20BF-\\u20CF\\u20F1-\\u20FF\\u218C-\\u218F\\u23FF\\u2427-\\u243F\\u244B-\\u245F\\u2B74\\u2B75\\u2B96\\u2B97\\u2BBA-\\u2BBC\\u2BC9\\u2BD2-\\u2BEB\\u2BF0-\\u2BFF\\u2C2F\\u2C5F\\u2CF4-\\u2CF8\\u2D26\\u2D28-\\u2D2C\\u2D2E\\u2D2F\\u2D68-\\u2D6E\\u2D71-\\u2D7E\\u2D97-\\u2D9F\\u2DA7\\u2DAF\\u2DB7\\u2DBF\\u2DC7\\u2DCF\\u2DD7\\u2DDF\\u2E45-\\u2E7F\\u2E9A\\u2EF4-\\u2EFF\\u2FD6-\\u2FEF\\u2FFC-\\u2FFF\\u3040\\u3097\\u3098\\u3100-\\u3104\\u312E-\\u3130\\u318F\\u31BB-\\u31BF\\u31E4-\\u31EF\\u321F\\u32FF\\u4DB6-\\u4DBF\\u9FD6-\\u9FFF\\uA48D-\\uA48F\\uA4C7-\\uA4CF\\uA62C-\\uA63F\\uA6F8-\\uA6FF\\uA7AF\\uA7B8-\\uA7F6\\uA82C-\\uA82F\\uA83A-\\uA83F\\uA878-\\uA87F\\uA8C6-\\uA8CD\\uA8DA-\\uA8DF\\uA8FE\\uA8FF\\uA954-\\uA95E\\uA97D-\\uA97F\\uA9CE\\uA9DA-\\uA9DD\\uA9FF\\uAA37-\\uAA3F\\uAA4E\\uAA4F\\uAA5A\\uAA5B\\uAAC3-\\uAADA\\uAAF7-\\uAB00\\uAB07\\uAB08\\uAB0F\\uAB10\\uAB17-\\uAB1F\\uAB27\\uAB2F\\uAB66-\\uAB6F\\uABEE\\uABEF\\uABFA-\\uABFF\\uD7A4-\\uD7AF\\uD7C7-\\uD7CA\\uD7FC-\\uF8FF\\uFA6E\\uFA6F\\uFADA-\\uFAFF\\uFB07-\\uFB12\\uFB18-\\uFB1C\\uFB37\\uFB3D\\uFB3F\\uFB42\\uFB45\\uFBC2-\\uFBD2\\uFD40-\\uFD4F\\uFD90\\uFD91\\uFDC8-\\uFDEF\\uFDFE\\uFDFF\\uFE1A-\\uFE1F\\uFE53\\uFE67\\uFE6C-\\uFE6F\\uFE75\\uFEFD-\\uFF00\\uFFBF-\\uFFC1\\uFFC8\\uFFC9\\uFFD0\\uFFD1\\uFFD8\\uFFD9\\uFFDD-\\uFFDF\\uFFE7\\uFFEF-\\uFFFB\\uFFFE\\uFFFF',","            astral: '\\uD800[\\uDC0C\\uDC27\\uDC3B\\uDC3E\\uDC4E\\uDC4F\\uDC5E-\\uDC7F\\uDCFB-\\uDCFF\\uDD03-\\uDD06\\uDD34-\\uDD36\\uDD8F\\uDD9C-\\uDD9F\\uDDA1-\\uDDCF\\uDDFE-\\uDE7F\\uDE9D-\\uDE9F\\uDED1-\\uDEDF\\uDEFC-\\uDEFF\\uDF24-\\uDF2F\\uDF4B-\\uDF4F\\uDF7B-\\uDF7F\\uDF9E\\uDFC4-\\uDFC7\\uDFD6-\\uDFFF]|\\uD801[\\uDC9E\\uDC9F\\uDCAA-\\uDCAF\\uDCD4-\\uDCD7\\uDCFC-\\uDCFF\\uDD28-\\uDD2F\\uDD64-\\uDD6E\\uDD70-\\uDDFF\\uDF37-\\uDF3F\\uDF56-\\uDF5F\\uDF68-\\uDFFF]|\\uD802[\\uDC06\\uDC07\\uDC09\\uDC36\\uDC39-\\uDC3B\\uDC3D\\uDC3E\\uDC56\\uDC9F-\\uDCA6\\uDCB0-\\uDCDF\\uDCF3\\uDCF6-\\uDCFA\\uDD1C-\\uDD1E\\uDD3A-\\uDD3E\\uDD40-\\uDD7F\\uDDB8-\\uDDBB\\uDDD0\\uDDD1\\uDE04\\uDE07-\\uDE0B\\uDE14\\uDE18\\uDE34-\\uDE37\\uDE3B-\\uDE3E\\uDE48-\\uDE4F\\uDE59-\\uDE5F\\uDEA0-\\uDEBF\\uDEE7-\\uDEEA\\uDEF7-\\uDEFF\\uDF36-\\uDF38\\uDF56\\uDF57\\uDF73-\\uDF77\\uDF92-\\uDF98\\uDF9D-\\uDFA8\\uDFB0-\\uDFFF]|\\uD803[\\uDC49-\\uDC7F\\uDCB3-\\uDCBF\\uDCF3-\\uDCF9\\uDD00-\\uDE5F\\uDE7F-\\uDFFF]|\\uD804[\\uDC4E-\\uDC51\\uDC70-\\uDC7E\\uDCBD\\uDCC2-\\uDCCF\\uDCE9-\\uDCEF\\uDCFA-\\uDCFF\\uDD35\\uDD44-\\uDD4F\\uDD77-\\uDD7F\\uDDCE\\uDDCF\\uDDE0\\uDDF5-\\uDDFF\\uDE12\\uDE3F-\\uDE7F\\uDE87\\uDE89\\uDE8E\\uDE9E\\uDEAA-\\uDEAF\\uDEEB-\\uDEEF\\uDEFA-\\uDEFF\\uDF04\\uDF0D\\uDF0E\\uDF11\\uDF12\\uDF29\\uDF31\\uDF34\\uDF3A\\uDF3B\\uDF45\\uDF46\\uDF49\\uDF4A\\uDF4E\\uDF4F\\uDF51-\\uDF56\\uDF58-\\uDF5C\\uDF64\\uDF65\\uDF6D-\\uDF6F\\uDF75-\\uDFFF]|\\uD805[\\uDC5A\\uDC5C\\uDC5E-\\uDC7F\\uDCC8-\\uDCCF\\uDCDA-\\uDD7F\\uDDB6\\uDDB7\\uDDDE-\\uDDFF\\uDE45-\\uDE4F\\uDE5A-\\uDE5F\\uDE6D-\\uDE7F\\uDEB8-\\uDEBF\\uDECA-\\uDEFF\\uDF1A-\\uDF1C\\uDF2C-\\uDF2F\\uDF40-\\uDFFF]|\\uD806[\\uDC00-\\uDC9F\\uDCF3-\\uDCFE\\uDD00-\\uDEBF\\uDEF9-\\uDFFF]|\\uD807[\\uDC09\\uDC37\\uDC46-\\uDC4F\\uDC6D-\\uDC6F\\uDC90\\uDC91\\uDCA8\\uDCB7-\\uDFFF]|\\uD808[\\uDF9A-\\uDFFF]|\\uD809[\\uDC6F\\uDC75-\\uDC7F\\uDD44-\\uDFFF]|[\\uD80A\\uD80B\\uD80E-\\uD810\\uD812-\\uD819\\uD823-\\uD82B\\uD82D\\uD82E\\uD830-\\uD833\\uD837\\uD839\\uD83F\\uD874-\\uD87D\\uD87F-\\uDB3F\\uDB41-\\uDBFF][\\uDC00-\\uDFFF]|\\uD80D[\\uDC2F-\\uDFFF]|\\uD811[\\uDE47-\\uDFFF]|\\uD81A[\\uDE39-\\uDE3F\\uDE5F\\uDE6A-\\uDE6D\\uDE70-\\uDECF\\uDEEE\\uDEEF\\uDEF6-\\uDEFF\\uDF46-\\uDF4F\\uDF5A\\uDF62\\uDF78-\\uDF7C\\uDF90-\\uDFFF]|\\uD81B[\\uDC00-\\uDEFF\\uDF45-\\uDF4F\\uDF7F-\\uDF8E\\uDFA0-\\uDFDF\\uDFE1-\\uDFFF]|\\uD821[\\uDFED-\\uDFFF]|\\uD822[\\uDEF3-\\uDFFF]|\\uD82C[\\uDC02-\\uDFFF]|\\uD82F[\\uDC6B-\\uDC6F\\uDC7D-\\uDC7F\\uDC89-\\uDC8F\\uDC9A\\uDC9B\\uDCA0-\\uDFFF]|\\uD834[\\uDCF6-\\uDCFF\\uDD27\\uDD28\\uDD73-\\uDD7A\\uDDE9-\\uDDFF\\uDE46-\\uDEFF\\uDF57-\\uDF5F\\uDF72-\\uDFFF]|\\uD835[\\uDC55\\uDC9D\\uDCA0\\uDCA1\\uDCA3\\uDCA4\\uDCA7\\uDCA8\\uDCAD\\uDCBA\\uDCBC\\uDCC4\\uDD06\\uDD0B\\uDD0C\\uDD15\\uDD1D\\uDD3A\\uDD3F\\uDD45\\uDD47-\\uDD49\\uDD51\\uDEA6\\uDEA7\\uDFCC\\uDFCD]|\\uD836[\\uDE8C-\\uDE9A\\uDEA0\\uDEB0-\\uDFFF]|\\uD838[\\uDC07\\uDC19\\uDC1A\\uDC22\\uDC25\\uDC2B-\\uDFFF]|\\uD83A[\\uDCC5\\uDCC6\\uDCD7-\\uDCFF\\uDD4B-\\uDD4F\\uDD5A-\\uDD5D\\uDD60-\\uDFFF]|\\uD83B[\\uDC00-\\uDDFF\\uDE04\\uDE20\\uDE23\\uDE25\\uDE26\\uDE28\\uDE33\\uDE38\\uDE3A\\uDE3C-\\uDE41\\uDE43-\\uDE46\\uDE48\\uDE4A\\uDE4C\\uDE50\\uDE53\\uDE55\\uDE56\\uDE58\\uDE5A\\uDE5C\\uDE5E\\uDE60\\uDE63\\uDE65\\uDE66\\uDE6B\\uDE73\\uDE78\\uDE7D\\uDE7F\\uDE8A\\uDE9C-\\uDEA0\\uDEA4\\uDEAA\\uDEBC-\\uDEEF\\uDEF2-\\uDFFF]|\\uD83C[\\uDC2C-\\uDC2F\\uDC94-\\uDC9F\\uDCAF\\uDCB0\\uDCC0\\uDCD0\\uDCF6-\\uDCFF\\uDD0D-\\uDD0F\\uDD2F\\uDD6C-\\uDD6F\\uDDAD-\\uDDE5\\uDE03-\\uDE0F\\uDE3C-\\uDE3F\\uDE49-\\uDE4F\\uDE52-\\uDEFF]|\\uD83D[\\uDED3-\\uDEDF\\uDEED-\\uDEEF\\uDEF7-\\uDEFF\\uDF74-\\uDF7F\\uDFD5-\\uDFFF]|\\uD83E[\\uDC0C-\\uDC0F\\uDC48-\\uDC4F\\uDC5A-\\uDC5F\\uDC88-\\uDC8F\\uDCAE-\\uDD0F\\uDD1F\\uDD28-\\uDD2F\\uDD31\\uDD32\\uDD3F\\uDD4C-\\uDD4F\\uDD5F-\\uDD7F\\uDD92-\\uDDBF\\uDDC1-\\uDFFF]|\\uD869[\\uDED7-\\uDEFF]|\\uD86D[\\uDF35-\\uDF3F]|\\uD86E[\\uDC1E\\uDC1F]|\\uD873[\\uDEA2-\\uDFFF]|\\uD87E[\\uDE1E-\\uDFFF]|\\uDB40[\\uDC00-\\uDCFF\\uDDF0-\\uDFFF]'","        },","        {","            name: 'Cc',","            alias: 'Control',","            bmp: '\\0-\\x1F\\x7F-\\x9F'","        },","        {","            name: 'Cf',","            alias: 'Format',","            bmp: '\\xAD\\u0600-\\u0605\\u061C\\u06DD\\u070F\\u08E2\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2064\\u2066-\\u206F\\uFEFF\\uFFF9-\\uFFFB',","            astral: '\\uD804\\uDCBD|\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDD73-\\uDD7A]|\\uDB40[\\uDC01\\uDC20-\\uDC7F]'","        },","        {","            name: 'Cn',","            alias: 'Unassigned',","            bmp: '\\u0378\\u0379\\u0380-\\u0383\\u038B\\u038D\\u03A2\\u0530\\u0557\\u0558\\u0560\\u0588\\u058B\\u058C\\u0590\\u05C8-\\u05CF\\u05EB-\\u05EF\\u05F5-\\u05FF\\u061D\\u070E\\u074B\\u074C\\u07B2-\\u07BF\\u07FB-\\u07FF\\u082E\\u082F\\u083F\\u085C\\u085D\\u085F-\\u089F\\u08B5\\u08BE-\\u08D3\\u0984\\u098D\\u098E\\u0991\\u0992\\u09A9\\u09B1\\u09B3-\\u09B5\\u09BA\\u09BB\\u09C5\\u09C6\\u09C9\\u09CA\\u09CF-\\u09D6\\u09D8-\\u09DB\\u09DE\\u09E4\\u09E5\\u09FC-\\u0A00\\u0A04\\u0A0B-\\u0A0E\\u0A11\\u0A12\\u0A29\\u0A31\\u0A34\\u0A37\\u0A3A\\u0A3B\\u0A3D\\u0A43-\\u0A46\\u0A49\\u0A4A\\u0A4E-\\u0A50\\u0A52-\\u0A58\\u0A5D\\u0A5F-\\u0A65\\u0A76-\\u0A80\\u0A84\\u0A8E\\u0A92\\u0AA9\\u0AB1\\u0AB4\\u0ABA\\u0ABB\\u0AC6\\u0ACA\\u0ACE\\u0ACF\\u0AD1-\\u0ADF\\u0AE4\\u0AE5\\u0AF2-\\u0AF8\\u0AFA-\\u0B00\\u0B04\\u0B0D\\u0B0E\\u0B11\\u0B12\\u0B29\\u0B31\\u0B34\\u0B3A\\u0B3B\\u0B45\\u0B46\\u0B49\\u0B4A\\u0B4E-\\u0B55\\u0B58-\\u0B5B\\u0B5E\\u0B64\\u0B65\\u0B78-\\u0B81\\u0B84\\u0B8B-\\u0B8D\\u0B91\\u0B96-\\u0B98\\u0B9B\\u0B9D\\u0BA0-\\u0BA2\\u0BA5-\\u0BA7\\u0BAB-\\u0BAD\\u0BBA-\\u0BBD\\u0BC3-\\u0BC5\\u0BC9\\u0BCE\\u0BCF\\u0BD1-\\u0BD6\\u0BD8-\\u0BE5\\u0BFB-\\u0BFF\\u0C04\\u0C0D\\u0C11\\u0C29\\u0C3A-\\u0C3C\\u0C45\\u0C49\\u0C4E-\\u0C54\\u0C57\\u0C5B-\\u0C5F\\u0C64\\u0C65\\u0C70-\\u0C77\\u0C84\\u0C8D\\u0C91\\u0CA9\\u0CB4\\u0CBA\\u0CBB\\u0CC5\\u0CC9\\u0CCE-\\u0CD4\\u0CD7-\\u0CDD\\u0CDF\\u0CE4\\u0CE5\\u0CF0\\u0CF3-\\u0D00\\u0D04\\u0D0D\\u0D11\\u0D3B\\u0D3C\\u0D45\\u0D49\\u0D50-\\u0D53\\u0D64\\u0D65\\u0D80\\u0D81\\u0D84\\u0D97-\\u0D99\\u0DB2\\u0DBC\\u0DBE\\u0DBF\\u0DC7-\\u0DC9\\u0DCB-\\u0DCE\\u0DD5\\u0DD7\\u0DE0-\\u0DE5\\u0DF0\\u0DF1\\u0DF5-\\u0E00\\u0E3B-\\u0E3E\\u0E5C-\\u0E80\\u0E83\\u0E85\\u0E86\\u0E89\\u0E8B\\u0E8C\\u0E8E-\\u0E93\\u0E98\\u0EA0\\u0EA4\\u0EA6\\u0EA8\\u0EA9\\u0EAC\\u0EBA\\u0EBE\\u0EBF\\u0EC5\\u0EC7\\u0ECE\\u0ECF\\u0EDA\\u0EDB\\u0EE0-\\u0EFF\\u0F48\\u0F6D-\\u0F70\\u0F98\\u0FBD\\u0FCD\\u0FDB-\\u0FFF\\u10C6\\u10C8-\\u10CC\\u10CE\\u10CF\\u1249\\u124E\\u124F\\u1257\\u1259\\u125E\\u125F\\u1289\\u128E\\u128F\\u12B1\\u12B6\\u12B7\\u12BF\\u12C1\\u12C6\\u12C7\\u12D7\\u1311\\u1316\\u1317\\u135B\\u135C\\u137D-\\u137F\\u139A-\\u139F\\u13F6\\u13F7\\u13FE\\u13FF\\u169D-\\u169F\\u16F9-\\u16FF\\u170D\\u1715-\\u171F\\u1737-\\u173F\\u1754-\\u175F\\u176D\\u1771\\u1774-\\u177F\\u17DE\\u17DF\\u17EA-\\u17EF\\u17FA-\\u17FF\\u180F\\u181A-\\u181F\\u1878-\\u187F\\u18AB-\\u18AF\\u18F6-\\u18FF\\u191F\\u192C-\\u192F\\u193C-\\u193F\\u1941-\\u1943\\u196E\\u196F\\u1975-\\u197F\\u19AC-\\u19AF\\u19CA-\\u19CF\\u19DB-\\u19DD\\u1A1C\\u1A1D\\u1A5F\\u1A7D\\u1A7E\\u1A8A-\\u1A8F\\u1A9A-\\u1A9F\\u1AAE\\u1AAF\\u1ABF-\\u1AFF\\u1B4C-\\u1B4F\\u1B7D-\\u1B7F\\u1BF4-\\u1BFB\\u1C38-\\u1C3A\\u1C4A-\\u1C4C\\u1C89-\\u1CBF\\u1CC8-\\u1CCF\\u1CF7\\u1CFA-\\u1CFF\\u1DF6-\\u1DFA\\u1F16\\u1F17\\u1F1E\\u1F1F\\u1F46\\u1F47\\u1F4E\\u1F4F\\u1F58\\u1F5A\\u1F5C\\u1F5E\\u1F7E\\u1F7F\\u1FB5\\u1FC5\\u1FD4\\u1FD5\\u1FDC\\u1FF0\\u1FF1\\u1FF5\\u1FFF\\u2065\\u2072\\u2073\\u208F\\u209D-\\u209F\\u20BF-\\u20CF\\u20F1-\\u20FF\\u218C-\\u218F\\u23FF\\u2427-\\u243F\\u244B-\\u245F\\u2B74\\u2B75\\u2B96\\u2B97\\u2BBA-\\u2BBC\\u2BC9\\u2BD2-\\u2BEB\\u2BF0-\\u2BFF\\u2C2F\\u2C5F\\u2CF4-\\u2CF8\\u2D26\\u2D28-\\u2D2C\\u2D2E\\u2D2F\\u2D68-\\u2D6E\\u2D71-\\u2D7E\\u2D97-\\u2D9F\\u2DA7\\u2DAF\\u2DB7\\u2DBF\\u2DC7\\u2DCF\\u2DD7\\u2DDF\\u2E45-\\u2E7F\\u2E9A\\u2EF4-\\u2EFF\\u2FD6-\\u2FEF\\u2FFC-\\u2FFF\\u3040\\u3097\\u3098\\u3100-\\u3104\\u312E-\\u3130\\u318F\\u31BB-\\u31BF\\u31E4-\\u31EF\\u321F\\u32FF\\u4DB6-\\u4DBF\\u9FD6-\\u9FFF\\uA48D-\\uA48F\\uA4C7-\\uA4CF\\uA62C-\\uA63F\\uA6F8-\\uA6FF\\uA7AF\\uA7B8-\\uA7F6\\uA82C-\\uA82F\\uA83A-\\uA83F\\uA878-\\uA87F\\uA8C6-\\uA8CD\\uA8DA-\\uA8DF\\uA8FE\\uA8FF\\uA954-\\uA95E\\uA97D-\\uA97F\\uA9CE\\uA9DA-\\uA9DD\\uA9FF\\uAA37-\\uAA3F\\uAA4E\\uAA4F\\uAA5A\\uAA5B\\uAAC3-\\uAADA\\uAAF7-\\uAB00\\uAB07\\uAB08\\uAB0F\\uAB10\\uAB17-\\uAB1F\\uAB27\\uAB2F\\uAB66-\\uAB6F\\uABEE\\uABEF\\uABFA-\\uABFF\\uD7A4-\\uD7AF\\uD7C7-\\uD7CA\\uD7FC-\\uD7FF\\uFA6E\\uFA6F\\uFADA-\\uFAFF\\uFB07-\\uFB12\\uFB18-\\uFB1C\\uFB37\\uFB3D\\uFB3F\\uFB42\\uFB45\\uFBC2-\\uFBD2\\uFD40-\\uFD4F\\uFD90\\uFD91\\uFDC8-\\uFDEF\\uFDFE\\uFDFF\\uFE1A-\\uFE1F\\uFE53\\uFE67\\uFE6C-\\uFE6F\\uFE75\\uFEFD\\uFEFE\\uFF00\\uFFBF-\\uFFC1\\uFFC8\\uFFC9\\uFFD0\\uFFD1\\uFFD8\\uFFD9\\uFFDD-\\uFFDF\\uFFE7\\uFFEF-\\uFFF8\\uFFFE\\uFFFF',","            astral: '\\uD800[\\uDC0C\\uDC27\\uDC3B\\uDC3E\\uDC4E\\uDC4F\\uDC5E-\\uDC7F\\uDCFB-\\uDCFF\\uDD03-\\uDD06\\uDD34-\\uDD36\\uDD8F\\uDD9C-\\uDD9F\\uDDA1-\\uDDCF\\uDDFE-\\uDE7F\\uDE9D-\\uDE9F\\uDED1-\\uDEDF\\uDEFC-\\uDEFF\\uDF24-\\uDF2F\\uDF4B-\\uDF4F\\uDF7B-\\uDF7F\\uDF9E\\uDFC4-\\uDFC7\\uDFD6-\\uDFFF]|\\uD801[\\uDC9E\\uDC9F\\uDCAA-\\uDCAF\\uDCD4-\\uDCD7\\uDCFC-\\uDCFF\\uDD28-\\uDD2F\\uDD64-\\uDD6E\\uDD70-\\uDDFF\\uDF37-\\uDF3F\\uDF56-\\uDF5F\\uDF68-\\uDFFF]|\\uD802[\\uDC06\\uDC07\\uDC09\\uDC36\\uDC39-\\uDC3B\\uDC3D\\uDC3E\\uDC56\\uDC9F-\\uDCA6\\uDCB0-\\uDCDF\\uDCF3\\uDCF6-\\uDCFA\\uDD1C-\\uDD1E\\uDD3A-\\uDD3E\\uDD40-\\uDD7F\\uDDB8-\\uDDBB\\uDDD0\\uDDD1\\uDE04\\uDE07-\\uDE0B\\uDE14\\uDE18\\uDE34-\\uDE37\\uDE3B-\\uDE3E\\uDE48-\\uDE4F\\uDE59-\\uDE5F\\uDEA0-\\uDEBF\\uDEE7-\\uDEEA\\uDEF7-\\uDEFF\\uDF36-\\uDF38\\uDF56\\uDF57\\uDF73-\\uDF77\\uDF92-\\uDF98\\uDF9D-\\uDFA8\\uDFB0-\\uDFFF]|\\uD803[\\uDC49-\\uDC7F\\uDCB3-\\uDCBF\\uDCF3-\\uDCF9\\uDD00-\\uDE5F\\uDE7F-\\uDFFF]|\\uD804[\\uDC4E-\\uDC51\\uDC70-\\uDC7E\\uDCC2-\\uDCCF\\uDCE9-\\uDCEF\\uDCFA-\\uDCFF\\uDD35\\uDD44-\\uDD4F\\uDD77-\\uDD7F\\uDDCE\\uDDCF\\uDDE0\\uDDF5-\\uDDFF\\uDE12\\uDE3F-\\uDE7F\\uDE87\\uDE89\\uDE8E\\uDE9E\\uDEAA-\\uDEAF\\uDEEB-\\uDEEF\\uDEFA-\\uDEFF\\uDF04\\uDF0D\\uDF0E\\uDF11\\uDF12\\uDF29\\uDF31\\uDF34\\uDF3A\\uDF3B\\uDF45\\uDF46\\uDF49\\uDF4A\\uDF4E\\uDF4F\\uDF51-\\uDF56\\uDF58-\\uDF5C\\uDF64\\uDF65\\uDF6D-\\uDF6F\\uDF75-\\uDFFF]|\\uD805[\\uDC5A\\uDC5C\\uDC5E-\\uDC7F\\uDCC8-\\uDCCF\\uDCDA-\\uDD7F\\uDDB6\\uDDB7\\uDDDE-\\uDDFF\\uDE45-\\uDE4F\\uDE5A-\\uDE5F\\uDE6D-\\uDE7F\\uDEB8-\\uDEBF\\uDECA-\\uDEFF\\uDF1A-\\uDF1C\\uDF2C-\\uDF2F\\uDF40-\\uDFFF]|\\uD806[\\uDC00-\\uDC9F\\uDCF3-\\uDCFE\\uDD00-\\uDEBF\\uDEF9-\\uDFFF]|\\uD807[\\uDC09\\uDC37\\uDC46-\\uDC4F\\uDC6D-\\uDC6F\\uDC90\\uDC91\\uDCA8\\uDCB7-\\uDFFF]|\\uD808[\\uDF9A-\\uDFFF]|\\uD809[\\uDC6F\\uDC75-\\uDC7F\\uDD44-\\uDFFF]|[\\uD80A\\uD80B\\uD80E-\\uD810\\uD812-\\uD819\\uD823-\\uD82B\\uD82D\\uD82E\\uD830-\\uD833\\uD837\\uD839\\uD83F\\uD874-\\uD87D\\uD87F-\\uDB3F\\uDB41-\\uDB7F][\\uDC00-\\uDFFF]|\\uD80D[\\uDC2F-\\uDFFF]|\\uD811[\\uDE47-\\uDFFF]|\\uD81A[\\uDE39-\\uDE3F\\uDE5F\\uDE6A-\\uDE6D\\uDE70-\\uDECF\\uDEEE\\uDEEF\\uDEF6-\\uDEFF\\uDF46-\\uDF4F\\uDF5A\\uDF62\\uDF78-\\uDF7C\\uDF90-\\uDFFF]|\\uD81B[\\uDC00-\\uDEFF\\uDF45-\\uDF4F\\uDF7F-\\uDF8E\\uDFA0-\\uDFDF\\uDFE1-\\uDFFF]|\\uD821[\\uDFED-\\uDFFF]|\\uD822[\\uDEF3-\\uDFFF]|\\uD82C[\\uDC02-\\uDFFF]|\\uD82F[\\uDC6B-\\uDC6F\\uDC7D-\\uDC7F\\uDC89-\\uDC8F\\uDC9A\\uDC9B\\uDCA4-\\uDFFF]|\\uD834[\\uDCF6-\\uDCFF\\uDD27\\uDD28\\uDDE9-\\uDDFF\\uDE46-\\uDEFF\\uDF57-\\uDF5F\\uDF72-\\uDFFF]|\\uD835[\\uDC55\\uDC9D\\uDCA0\\uDCA1\\uDCA3\\uDCA4\\uDCA7\\uDCA8\\uDCAD\\uDCBA\\uDCBC\\uDCC4\\uDD06\\uDD0B\\uDD0C\\uDD15\\uDD1D\\uDD3A\\uDD3F\\uDD45\\uDD47-\\uDD49\\uDD51\\uDEA6\\uDEA7\\uDFCC\\uDFCD]|\\uD836[\\uDE8C-\\uDE9A\\uDEA0\\uDEB0-\\uDFFF]|\\uD838[\\uDC07\\uDC19\\uDC1A\\uDC22\\uDC25\\uDC2B-\\uDFFF]|\\uD83A[\\uDCC5\\uDCC6\\uDCD7-\\uDCFF\\uDD4B-\\uDD4F\\uDD5A-\\uDD5D\\uDD60-\\uDFFF]|\\uD83B[\\uDC00-\\uDDFF\\uDE04\\uDE20\\uDE23\\uDE25\\uDE26\\uDE28\\uDE33\\uDE38\\uDE3A\\uDE3C-\\uDE41\\uDE43-\\uDE46\\uDE48\\uDE4A\\uDE4C\\uDE50\\uDE53\\uDE55\\uDE56\\uDE58\\uDE5A\\uDE5C\\uDE5E\\uDE60\\uDE63\\uDE65\\uDE66\\uDE6B\\uDE73\\uDE78\\uDE7D\\uDE7F\\uDE8A\\uDE9C-\\uDEA0\\uDEA4\\uDEAA\\uDEBC-\\uDEEF\\uDEF2-\\uDFFF]|\\uD83C[\\uDC2C-\\uDC2F\\uDC94-\\uDC9F\\uDCAF\\uDCB0\\uDCC0\\uDCD0\\uDCF6-\\uDCFF\\uDD0D-\\uDD0F\\uDD2F\\uDD6C-\\uDD6F\\uDDAD-\\uDDE5\\uDE03-\\uDE0F\\uDE3C-\\uDE3F\\uDE49-\\uDE4F\\uDE52-\\uDEFF]|\\uD83D[\\uDED3-\\uDEDF\\uDEED-\\uDEEF\\uDEF7-\\uDEFF\\uDF74-\\uDF7F\\uDFD5-\\uDFFF]|\\uD83E[\\uDC0C-\\uDC0F\\uDC48-\\uDC4F\\uDC5A-\\uDC5F\\uDC88-\\uDC8F\\uDCAE-\\uDD0F\\uDD1F\\uDD28-\\uDD2F\\uDD31\\uDD32\\uDD3F\\uDD4C-\\uDD4F\\uDD5F-\\uDD7F\\uDD92-\\uDDBF\\uDDC1-\\uDFFF]|\\uD869[\\uDED7-\\uDEFF]|\\uD86D[\\uDF35-\\uDF3F]|\\uD86E[\\uDC1E\\uDC1F]|\\uD873[\\uDEA2-\\uDFFF]|\\uD87E[\\uDE1E-\\uDFFF]|\\uDB40[\\uDC00\\uDC02-\\uDC1F\\uDC80-\\uDCFF\\uDDF0-\\uDFFF]|[\\uDBBF\\uDBFF][\\uDFFE\\uDFFF]'","        },","        {","            name: 'Co',","            alias: 'Private_Use',","            bmp: '\\uE000-\\uF8FF',","            astral: '[\\uDB80-\\uDBBE\\uDBC0-\\uDBFE][\\uDC00-\\uDFFF]|[\\uDBBF\\uDBFF][\\uDC00-\\uDFFD]'","        },","        {","            name: 'Cs',","            alias: 'Surrogate',","            bmp: '\\uD800-\\uDFFF'","        },","        {","            name: 'L',","            alias: 'Letter',","            bmp: 'A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC',","            astral: '\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF40\\uDF42-\\uDF49\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F\\uDFE0]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]'","        },","        {","            name: 'Ll',","            alias: 'Lowercase_Letter',","            bmp: 'a-z\\xB5\\xDF-\\xF6\\xF8-\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02AF\\u0371\\u0373\\u0377\\u037B-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0529\\u052B\\u052D\\u052F\\u0561-\\u0587\\u13F8-\\u13FD\\u1C80-\\u1C88\\u1D00-\\u1D2B\\u1D6B-\\u1D77\\u1D79-\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6\\u1FC7\\u1FD0-\\u1FD3\\u1FD6\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6\\u1FF7\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146-\\u2149\\u214E\\u2184\\u2C30-\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76-\\u2C7B\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2CEC\\u2CEE\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA699\\uA69B\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA793-\\uA795\\uA797\\uA799\\uA79B\\uA79D\\uA79F\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7B5\\uA7B7\\uA7FA\\uAB30-\\uAB5A\\uAB60-\\uAB65\\uAB70-\\uABBF\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A',","            astral: '\\uD801[\\uDC28-\\uDC4F\\uDCD8-\\uDCFB]|\\uD803[\\uDCC0-\\uDCF2]|\\uD806[\\uDCC0-\\uDCDF]|\\uD835[\\uDC1A-\\uDC33\\uDC4E-\\uDC54\\uDC56-\\uDC67\\uDC82-\\uDC9B\\uDCB6-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDCCF\\uDCEA-\\uDD03\\uDD1E-\\uDD37\\uDD52-\\uDD6B\\uDD86-\\uDD9F\\uDDBA-\\uDDD3\\uDDEE-\\uDE07\\uDE22-\\uDE3B\\uDE56-\\uDE6F\\uDE8A-\\uDEA5\\uDEC2-\\uDEDA\\uDEDC-\\uDEE1\\uDEFC-\\uDF14\\uDF16-\\uDF1B\\uDF36-\\uDF4E\\uDF50-\\uDF55\\uDF70-\\uDF88\\uDF8A-\\uDF8F\\uDFAA-\\uDFC2\\uDFC4-\\uDFC9\\uDFCB]|\\uD83A[\\uDD22-\\uDD43]'","        },","        {","            name: 'Lm',","            alias: 'Modifier_Letter',","            bmp: '\\u02B0-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0374\\u037A\\u0559\\u0640\\u06E5\\u06E6\\u07F4\\u07F5\\u07FA\\u081A\\u0824\\u0828\\u0971\\u0E46\\u0EC6\\u10FC\\u17D7\\u1843\\u1AA7\\u1C78-\\u1C7D\\u1D2C-\\u1D6A\\u1D78\\u1D9B-\\u1DBF\\u2071\\u207F\\u2090-\\u209C\\u2C7C\\u2C7D\\u2D6F\\u2E2F\\u3005\\u3031-\\u3035\\u303B\\u309D\\u309E\\u30FC-\\u30FE\\uA015\\uA4F8-\\uA4FD\\uA60C\\uA67F\\uA69C\\uA69D\\uA717-\\uA71F\\uA770\\uA788\\uA7F8\\uA7F9\\uA9CF\\uA9E6\\uAA70\\uAADD\\uAAF3\\uAAF4\\uAB5C-\\uAB5F\\uFF70\\uFF9E\\uFF9F',","            astral: '\\uD81A[\\uDF40-\\uDF43]|\\uD81B[\\uDF93-\\uDF9F\\uDFE0]'","        },","        {","            name: 'Lo',","            alias: 'Other_Letter',","            bmp: '\\xAA\\xBA\\u01BB\\u01C0-\\u01C3\\u0294\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u063F\\u0641-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u0800-\\u0815\\u0840-\\u0858\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0972-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E45\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10D0-\\u10FA\\u10FD-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17DC\\u1820-\\u1842\\u1844-\\u1877\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C77\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u2135-\\u2138\\u2D30-\\u2D67\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3006\\u303C\\u3041-\\u3096\\u309F\\u30A1-\\u30FA\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA014\\uA016-\\uA48C\\uA4D0-\\uA4F7\\uA500-\\uA60B\\uA610-\\uA61F\\uA62A\\uA62B\\uA66E\\uA6A0-\\uA6E5\\uA78F\\uA7F7\\uA7FB-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9E0-\\uA9E4\\uA9E7-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA6F\\uAA71-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB\\uAADC\\uAAE0-\\uAAEA\\uAAF2\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF66-\\uFF6F\\uFF71-\\uFF9D\\uFFA0-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC',","            astral: '\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF40\\uDF42-\\uDF49\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF]|\\uD801[\\uDC50-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCFF\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]'","        },","        {","            name: 'Lt',","            alias: 'Titlecase_Letter',","            bmp: '\\u01C5\\u01C8\\u01CB\\u01F2\\u1F88-\\u1F8F\\u1F98-\\u1F9F\\u1FA8-\\u1FAF\\u1FBC\\u1FCC\\u1FFC'","        },","        {","            name: 'Lu',","            alias: 'Uppercase_Letter',","            bmp: 'A-Z\\xC0-\\xD6\\xD8-\\xDE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0528\\u052A\\u052C\\u052E\\u0531-\\u0556\\u10A0-\\u10C5\\u10C7\\u10CD\\u13A0-\\u13F5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E\\u213F\\u2145\\u2183\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\u2CF2\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA698\\uA69A\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA792\\uA796\\uA798\\uA79A\\uA79C\\uA79E\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uA7AA-\\uA7AE\\uA7B0-\\uA7B4\\uA7B6\\uFF21-\\uFF3A',","            astral: '\\uD801[\\uDC00-\\uDC27\\uDCB0-\\uDCD3]|\\uD803[\\uDC80-\\uDCB2]|\\uD806[\\uDCA0-\\uDCBF]|\\uD835[\\uDC00-\\uDC19\\uDC34-\\uDC4D\\uDC68-\\uDC81\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB5\\uDCD0-\\uDCE9\\uDD04\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD38\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD6C-\\uDD85\\uDDA0-\\uDDB9\\uDDD4-\\uDDED\\uDE08-\\uDE21\\uDE3C-\\uDE55\\uDE70-\\uDE89\\uDEA8-\\uDEC0\\uDEE2-\\uDEFA\\uDF1C-\\uDF34\\uDF56-\\uDF6E\\uDF90-\\uDFA8\\uDFCA]|\\uD83A[\\uDD00-\\uDD21]'","        },","        {","            name: 'M',","            alias: 'Mark',","            bmp: '\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D4-\\u08E1\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B62\\u0B63\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0C00-\\u0C03\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0D01-\\u0D03\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D82\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F\\u109A-\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u180B-\\u180D\\u1885\\u1886\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F\\u1AB0-\\u1ABE\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF2-\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DF5\\u1DFB-\\u1DFF\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA880\\uA881\\uA8B4-\\uA8C5\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9E5\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F',","            astral: '\\uD800[\\uDDFD\\uDEE0\\uDF76-\\uDF7A]|\\uD802[\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F\\uDEE5\\uDEE6]|\\uD804[\\uDC00-\\uDC02\\uDC38-\\uDC46\\uDC7F-\\uDC82\\uDCB0-\\uDCBA\\uDD00-\\uDD02\\uDD27-\\uDD34\\uDD73\\uDD80-\\uDD82\\uDDB3-\\uDDC0\\uDDCA-\\uDDCC\\uDE2C-\\uDE37\\uDE3E\\uDEDF-\\uDEEA\\uDF00-\\uDF03\\uDF3C\\uDF3E-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF57\\uDF62\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC35-\\uDC46\\uDCB0-\\uDCC3\\uDDAF-\\uDDB5\\uDDB8-\\uDDC0\\uDDDC\\uDDDD\\uDE30-\\uDE40\\uDEAB-\\uDEB7\\uDF1D-\\uDF2B]|\\uD807[\\uDC2F-\\uDC36\\uDC38-\\uDC3F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6]|\\uD81A[\\uDEF0-\\uDEF4\\uDF30-\\uDF36]|\\uD81B[\\uDF51-\\uDF7E\\uDF8F-\\uDF92]|\\uD82F[\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]|\\uD83A[\\uDCD0-\\uDCD6\\uDD44-\\uDD4A]|\\uDB40[\\uDD00-\\uDDEF]'","        },","        {","            name: 'Mc',","            alias: 'Spacing_Mark',","            bmp: '\\u0903\\u093B\\u093E-\\u0940\\u0949-\\u094C\\u094E\\u094F\\u0982\\u0983\\u09BE-\\u09C0\\u09C7\\u09C8\\u09CB\\u09CC\\u09D7\\u0A03\\u0A3E-\\u0A40\\u0A83\\u0ABE-\\u0AC0\\u0AC9\\u0ACB\\u0ACC\\u0B02\\u0B03\\u0B3E\\u0B40\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0B57\\u0BBE\\u0BBF\\u0BC1\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD7\\u0C01-\\u0C03\\u0C41-\\u0C44\\u0C82\\u0C83\\u0CBE\\u0CC0-\\u0CC4\\u0CC7\\u0CC8\\u0CCA\\u0CCB\\u0CD5\\u0CD6\\u0D02\\u0D03\\u0D3E-\\u0D40\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D57\\u0D82\\u0D83\\u0DCF-\\u0DD1\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0F3E\\u0F3F\\u0F7F\\u102B\\u102C\\u1031\\u1038\\u103B\\u103C\\u1056\\u1057\\u1062-\\u1064\\u1067-\\u106D\\u1083\\u1084\\u1087-\\u108C\\u108F\\u109A-\\u109C\\u17B6\\u17BE-\\u17C5\\u17C7\\u17C8\\u1923-\\u1926\\u1929-\\u192B\\u1930\\u1931\\u1933-\\u1938\\u1A19\\u1A1A\\u1A55\\u1A57\\u1A61\\u1A63\\u1A64\\u1A6D-\\u1A72\\u1B04\\u1B35\\u1B3B\\u1B3D-\\u1B41\\u1B43\\u1B44\\u1B82\\u1BA1\\u1BA6\\u1BA7\\u1BAA\\u1BE7\\u1BEA-\\u1BEC\\u1BEE\\u1BF2\\u1BF3\\u1C24-\\u1C2B\\u1C34\\u1C35\\u1CE1\\u1CF2\\u1CF3\\u302E\\u302F\\uA823\\uA824\\uA827\\uA880\\uA881\\uA8B4-\\uA8C3\\uA952\\uA953\\uA983\\uA9B4\\uA9B5\\uA9BA\\uA9BB\\uA9BD-\\uA9C0\\uAA2F\\uAA30\\uAA33\\uAA34\\uAA4D\\uAA7B\\uAA7D\\uAAEB\\uAAEE\\uAAEF\\uAAF5\\uABE3\\uABE4\\uABE6\\uABE7\\uABE9\\uABEA\\uABEC',","            astral: '\\uD804[\\uDC00\\uDC02\\uDC82\\uDCB0-\\uDCB2\\uDCB7\\uDCB8\\uDD2C\\uDD82\\uDDB3-\\uDDB5\\uDDBF\\uDDC0\\uDE2C-\\uDE2E\\uDE32\\uDE33\\uDE35\\uDEE0-\\uDEE2\\uDF02\\uDF03\\uDF3E\\uDF3F\\uDF41-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF57\\uDF62\\uDF63]|\\uD805[\\uDC35-\\uDC37\\uDC40\\uDC41\\uDC45\\uDCB0-\\uDCB2\\uDCB9\\uDCBB-\\uDCBE\\uDCC1\\uDDAF-\\uDDB1\\uDDB8-\\uDDBB\\uDDBE\\uDE30-\\uDE32\\uDE3B\\uDE3C\\uDE3E\\uDEAC\\uDEAE\\uDEAF\\uDEB6\\uDF20\\uDF21\\uDF26]|\\uD807[\\uDC2F\\uDC3E\\uDCA9\\uDCB1\\uDCB4]|\\uD81B[\\uDF51-\\uDF7E]|\\uD834[\\uDD65\\uDD66\\uDD6D-\\uDD72]'","        },","        {","            name: 'Me',","            alias: 'Enclosing_Mark',","            bmp: '\\u0488\\u0489\\u1ABE\\u20DD-\\u20E0\\u20E2-\\u20E4\\uA670-\\uA672'","        },","        {","            name: 'Mn',","            alias: 'Nonspacing_Mark',","            bmp: '\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D4-\\u08E1\\u08E3-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C00\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D01\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u1885\\u1886\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A1B\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1AB0-\\u1ABD\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB-\\u1BAD\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DF5\\u1DFB-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099\\u309A\\uA66F\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA8C5\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uA9E5\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAA7C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F',","            astral: '\\uD800[\\uDDFD\\uDEE0\\uDF76-\\uDF7A]|\\uD802[\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F\\uDEE5\\uDEE6]|\\uD804[\\uDC01\\uDC38-\\uDC46\\uDC7F-\\uDC81\\uDCB3-\\uDCB6\\uDCB9\\uDCBA\\uDD00-\\uDD02\\uDD27-\\uDD2B\\uDD2D-\\uDD34\\uDD73\\uDD80\\uDD81\\uDDB6-\\uDDBE\\uDDCA-\\uDDCC\\uDE2F-\\uDE31\\uDE34\\uDE36\\uDE37\\uDE3E\\uDEDF\\uDEE3-\\uDEEA\\uDF00\\uDF01\\uDF3C\\uDF40\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC38-\\uDC3F\\uDC42-\\uDC44\\uDC46\\uDCB3-\\uDCB8\\uDCBA\\uDCBF\\uDCC0\\uDCC2\\uDCC3\\uDDB2-\\uDDB5\\uDDBC\\uDDBD\\uDDBF\\uDDC0\\uDDDC\\uDDDD\\uDE33-\\uDE3A\\uDE3D\\uDE3F\\uDE40\\uDEAB\\uDEAD\\uDEB0-\\uDEB5\\uDEB7\\uDF1D-\\uDF1F\\uDF22-\\uDF25\\uDF27-\\uDF2B]|\\uD807[\\uDC30-\\uDC36\\uDC38-\\uDC3D\\uDC3F\\uDC92-\\uDCA7\\uDCAA-\\uDCB0\\uDCB2\\uDCB3\\uDCB5\\uDCB6]|\\uD81A[\\uDEF0-\\uDEF4\\uDF30-\\uDF36]|\\uD81B[\\uDF8F-\\uDF92]|\\uD82F[\\uDC9D\\uDC9E]|\\uD834[\\uDD67-\\uDD69\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]|\\uD83A[\\uDCD0-\\uDCD6\\uDD44-\\uDD4A]|\\uDB40[\\uDD00-\\uDDEF]'","        },","        {","            name: 'N',","            alias: 'Number',","            bmp: '0-9\\xB2\\xB3\\xB9\\xBC-\\xBE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D58-\\u0D5E\\u0D66-\\u0D78\\u0DE6-\\u0DEF\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uA9F0-\\uA9F9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19',","            astral: '\\uD800[\\uDD07-\\uDD33\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDEE1-\\uDEFB\\uDF20-\\uDF23\\uDF41\\uDF4A\\uDFD1-\\uDFD5]|\\uD801[\\uDCA0-\\uDCA9]|\\uD802[\\uDC58-\\uDC5F\\uDC79-\\uDC7F\\uDCA7-\\uDCAF\\uDCFB-\\uDCFF\\uDD16-\\uDD1B\\uDDBC\\uDDBD\\uDDC0-\\uDDCF\\uDDD2-\\uDDFF\\uDE40-\\uDE47\\uDE7D\\uDE7E\\uDE9D-\\uDE9F\\uDEEB-\\uDEEF\\uDF58-\\uDF5F\\uDF78-\\uDF7F\\uDFA9-\\uDFAF]|\\uD803[\\uDCFA-\\uDCFF\\uDE60-\\uDE7E]|\\uD804[\\uDC52-\\uDC6F\\uDCF0-\\uDCF9\\uDD36-\\uDD3F\\uDDD0-\\uDDD9\\uDDE1-\\uDDF4\\uDEF0-\\uDEF9]|\\uD805[\\uDC50-\\uDC59\\uDCD0-\\uDCD9\\uDE50-\\uDE59\\uDEC0-\\uDEC9\\uDF30-\\uDF3B]|\\uD806[\\uDCE0-\\uDCF2]|\\uD807[\\uDC50-\\uDC6C]|\\uD809[\\uDC00-\\uDC6E]|\\uD81A[\\uDE60-\\uDE69\\uDF50-\\uDF59\\uDF5B-\\uDF61]|\\uD834[\\uDF60-\\uDF71]|\\uD835[\\uDFCE-\\uDFFF]|\\uD83A[\\uDCC7-\\uDCCF\\uDD50-\\uDD59]|\\uD83C[\\uDD00-\\uDD0C]'","        },","        {","            name: 'Nd',","            alias: 'Decimal_Number',","            bmp: '0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0DE6-\\u0DEF\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uA9F0-\\uA9F9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19',","            astral: '\\uD801[\\uDCA0-\\uDCA9]|\\uD804[\\uDC66-\\uDC6F\\uDCF0-\\uDCF9\\uDD36-\\uDD3F\\uDDD0-\\uDDD9\\uDEF0-\\uDEF9]|\\uD805[\\uDC50-\\uDC59\\uDCD0-\\uDCD9\\uDE50-\\uDE59\\uDEC0-\\uDEC9\\uDF30-\\uDF39]|\\uD806[\\uDCE0-\\uDCE9]|\\uD807[\\uDC50-\\uDC59]|\\uD81A[\\uDE60-\\uDE69\\uDF50-\\uDF59]|\\uD835[\\uDFCE-\\uDFFF]|\\uD83A[\\uDD50-\\uDD59]'","        },","        {","            name: 'Nl',","            alias: 'Letter_Number',","            bmp: '\\u16EE-\\u16F0\\u2160-\\u2182\\u2185-\\u2188\\u3007\\u3021-\\u3029\\u3038-\\u303A\\uA6E6-\\uA6EF',","            astral: '\\uD800[\\uDD40-\\uDD74\\uDF41\\uDF4A\\uDFD1-\\uDFD5]|\\uD809[\\uDC00-\\uDC6E]'","        },","        {","            name: 'No',","            alias: 'Other_Number',","            bmp: '\\xB2\\xB3\\xB9\\xBC-\\xBE\\u09F4-\\u09F9\\u0B72-\\u0B77\\u0BF0-\\u0BF2\\u0C78-\\u0C7E\\u0D58-\\u0D5E\\u0D70-\\u0D78\\u0F2A-\\u0F33\\u1369-\\u137C\\u17F0-\\u17F9\\u19DA\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u215F\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA830-\\uA835',","            astral: '\\uD800[\\uDD07-\\uDD33\\uDD75-\\uDD78\\uDD8A\\uDD8B\\uDEE1-\\uDEFB\\uDF20-\\uDF23]|\\uD802[\\uDC58-\\uDC5F\\uDC79-\\uDC7F\\uDCA7-\\uDCAF\\uDCFB-\\uDCFF\\uDD16-\\uDD1B\\uDDBC\\uDDBD\\uDDC0-\\uDDCF\\uDDD2-\\uDDFF\\uDE40-\\uDE47\\uDE7D\\uDE7E\\uDE9D-\\uDE9F\\uDEEB-\\uDEEF\\uDF58-\\uDF5F\\uDF78-\\uDF7F\\uDFA9-\\uDFAF]|\\uD803[\\uDCFA-\\uDCFF\\uDE60-\\uDE7E]|\\uD804[\\uDC52-\\uDC65\\uDDE1-\\uDDF4]|\\uD805[\\uDF3A\\uDF3B]|\\uD806[\\uDCEA-\\uDCF2]|\\uD807[\\uDC5A-\\uDC6C]|\\uD81A[\\uDF5B-\\uDF61]|\\uD834[\\uDF60-\\uDF71]|\\uD83A[\\uDCC7-\\uDCCF]|\\uD83C[\\uDD00-\\uDD0C]'","        },","        {","            name: 'P',","            alias: 'Punctuation',","            bmp: '\\x21-\\x23\\x25-\\\\x2A\\x2C-\\x2F\\x3A\\x3B\\\\x3F\\x40\\\\x5B-\\\\x5D\\x5F\\\\x7B\\x7D\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E44\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65',","            astral: '\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC9\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDC4B-\\uDC4F\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDF3C-\\uDF3E]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]|\\uD83A[\\uDD5E\\uDD5F]'","        },","        {","            name: 'Pc',","            alias: 'Connector_Punctuation',","            bmp: '\\x5F\\u203F\\u2040\\u2054\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF3F'","        },","        {","            name: 'Pd',","            alias: 'Dash_Punctuation',","            bmp: '\\\\x2D\\u058A\\u05BE\\u1400\\u1806\\u2010-\\u2015\\u2E17\\u2E1A\\u2E3A\\u2E3B\\u2E40\\u301C\\u3030\\u30A0\\uFE31\\uFE32\\uFE58\\uFE63\\uFF0D'","        },","        {","            name: 'Pe',","            alias: 'Close_Punctuation',","            bmp: '\\\\x29\\\\x5D\\x7D\\u0F3B\\u0F3D\\u169C\\u2046\\u207E\\u208E\\u2309\\u230B\\u232A\\u2769\\u276B\\u276D\\u276F\\u2771\\u2773\\u2775\\u27C6\\u27E7\\u27E9\\u27EB\\u27ED\\u27EF\\u2984\\u2986\\u2988\\u298A\\u298C\\u298E\\u2990\\u2992\\u2994\\u2996\\u2998\\u29D9\\u29DB\\u29FD\\u2E23\\u2E25\\u2E27\\u2E29\\u3009\\u300B\\u300D\\u300F\\u3011\\u3015\\u3017\\u3019\\u301B\\u301E\\u301F\\uFD3E\\uFE18\\uFE36\\uFE38\\uFE3A\\uFE3C\\uFE3E\\uFE40\\uFE42\\uFE44\\uFE48\\uFE5A\\uFE5C\\uFE5E\\uFF09\\uFF3D\\uFF5D\\uFF60\\uFF63'","        },","        {","            name: 'Pf',","            alias: 'Final_Punctuation',","            bmp: '\\xBB\\u2019\\u201D\\u203A\\u2E03\\u2E05\\u2E0A\\u2E0D\\u2E1D\\u2E21'","        },","        {","            name: 'Pi',","            alias: 'Initial_Punctuation',","            bmp: '\\xAB\\u2018\\u201B\\u201C\\u201F\\u2039\\u2E02\\u2E04\\u2E09\\u2E0C\\u2E1C\\u2E20'","        },","        {","            name: 'Po',","            alias: 'Other_Punctuation',","            bmp: '\\x21-\\x23\\x25-\\x27\\\\x2A\\x2C\\\\x2E\\x2F\\x3A\\x3B\\\\x3F\\x40\\\\x5C\\xA1\\xA7\\xB6\\xB7\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u166D\\u166E\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u1805\\u1807-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2016\\u2017\\u2020-\\u2027\\u2030-\\u2038\\u203B-\\u203E\\u2041-\\u2043\\u2047-\\u2051\\u2053\\u2055-\\u205E\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00\\u2E01\\u2E06-\\u2E08\\u2E0B\\u2E0E-\\u2E16\\u2E18\\u2E19\\u2E1B\\u2E1E\\u2E1F\\u2E2A-\\u2E2E\\u2E30-\\u2E39\\u2E3C-\\u2E3F\\u2E41\\u2E43\\u2E44\\u3001-\\u3003\\u303D\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFE10-\\uFE16\\uFE19\\uFE30\\uFE45\\uFE46\\uFE49-\\uFE4C\\uFE50-\\uFE52\\uFE54-\\uFE57\\uFE5F-\\uFE61\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF07\\uFF0A\\uFF0C\\uFF0E\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3C\\uFF61\\uFF64\\uFF65',","            astral: '\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC9\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDC4B-\\uDC4F\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDF3C-\\uDF3E]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]|\\uD83A[\\uDD5E\\uDD5F]'","        },","        {","            name: 'Ps',","            alias: 'Open_Punctuation',","            bmp: '\\\\x28\\\\x5B\\\\x7B\\u0F3A\\u0F3C\\u169B\\u201A\\u201E\\u2045\\u207D\\u208D\\u2308\\u230A\\u2329\\u2768\\u276A\\u276C\\u276E\\u2770\\u2772\\u2774\\u27C5\\u27E6\\u27E8\\u27EA\\u27EC\\u27EE\\u2983\\u2985\\u2987\\u2989\\u298B\\u298D\\u298F\\u2991\\u2993\\u2995\\u2997\\u29D8\\u29DA\\u29FC\\u2E22\\u2E24\\u2E26\\u2E28\\u2E42\\u3008\\u300A\\u300C\\u300E\\u3010\\u3014\\u3016\\u3018\\u301A\\u301D\\uFD3F\\uFE17\\uFE35\\uFE37\\uFE39\\uFE3B\\uFE3D\\uFE3F\\uFE41\\uFE43\\uFE47\\uFE59\\uFE5B\\uFE5D\\uFF08\\uFF3B\\uFF5B\\uFF5F\\uFF62'","        },","        {","            name: 'S',","            alias: 'Symbol',","            bmp: '\\\\x24\\\\x2B\\x3C-\\x3E\\\\x5E\\x60\\\\x7C\\x7E\\xA2-\\xA6\\xA8\\xA9\\xAC\\xAE-\\xB1\\xB4\\xB8\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u0384\\u0385\\u03F6\\u0482\\u058D-\\u058F\\u0606-\\u0608\\u060B\\u060E\\u060F\\u06DE\\u06E9\\u06FD\\u06FE\\u07F6\\u09F2\\u09F3\\u09FA\\u09FB\\u0AF1\\u0B70\\u0BF3-\\u0BFA\\u0C7F\\u0D4F\\u0D79\\u0E3F\\u0F01-\\u0F03\\u0F13\\u0F15-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE\\u0FCF\\u0FD5-\\u0FD8\\u109E\\u109F\\u1390-\\u1399\\u17DB\\u1940\\u19DE-\\u19FF\\u1B61-\\u1B6A\\u1B74-\\u1B7C\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u2044\\u2052\\u207A-\\u207C\\u208A-\\u208C\\u20A0-\\u20BE\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F\\u218A\\u218B\\u2190-\\u2307\\u230C-\\u2328\\u232B-\\u23FE\\u2400-\\u2426\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u2767\\u2794-\\u27C4\\u27C7-\\u27E5\\u27F0-\\u2982\\u2999-\\u29D7\\u29DC-\\u29FB\\u29FE-\\u2B73\\u2B76-\\u2B95\\u2B98-\\u2BB9\\u2BBD-\\u2BC8\\u2BCA-\\u2BD1\\u2BEC-\\u2BEF\\u2CE5-\\u2CEA\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFB\\u3004\\u3012\\u3013\\u3020\\u3036\\u3037\\u303E\\u303F\\u309B\\u309C\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E3\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u32FE\\u3300-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA828-\\uA82B\\uA836-\\uA839\\uAA77-\\uAA79\\uAB5B\\uFB29\\uFBB2-\\uFBC1\\uFDFC\\uFDFD\\uFE62\\uFE64-\\uFE66\\uFE69\\uFF04\\uFF0B\\uFF1C-\\uFF1E\\uFF3E\\uFF40\\uFF5C\\uFF5E\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFFC\\uFFFD',","            astral: '\\uD800[\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C-\\uDD8E\\uDD90-\\uDD9B\\uDDA0\\uDDD0-\\uDDFC]|\\uD802[\\uDC77\\uDC78\\uDEC8]|\\uD805\\uDF3F|\\uD81A[\\uDF3C-\\uDF3F\\uDF45]|\\uD82F\\uDC9C|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDE8\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]|\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85\\uDE86]|\\uD83B[\\uDEF0\\uDEF1]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD10-\\uDD2E\\uDD30-\\uDD6B\\uDD70-\\uDDAC\\uDDE6-\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDED2\\uDEE0-\\uDEEC\\uDEF0-\\uDEF6\\uDF00-\\uDF73\\uDF80-\\uDFD4]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDD10-\\uDD1E\\uDD20-\\uDD27\\uDD30\\uDD33-\\uDD3E\\uDD40-\\uDD4B\\uDD50-\\uDD5E\\uDD80-\\uDD91\\uDDC0]'","        },","        {","            name: 'Sc',","            alias: 'Currency_Symbol',","            bmp: '\\\\x24\\xA2-\\xA5\\u058F\\u060B\\u09F2\\u09F3\\u09FB\\u0AF1\\u0BF9\\u0E3F\\u17DB\\u20A0-\\u20BE\\uA838\\uFDFC\\uFE69\\uFF04\\uFFE0\\uFFE1\\uFFE5\\uFFE6'","        },","        {","            name: 'Sk',","            alias: 'Modifier_Symbol',","            bmp: '\\\\x5E\\x60\\xA8\\xAF\\xB4\\xB8\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u0384\\u0385\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u309B\\u309C\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uAB5B\\uFBB2-\\uFBC1\\uFF3E\\uFF40\\uFFE3',","            astral: '\\uD83C[\\uDFFB-\\uDFFF]'","        },","        {","            name: 'Sm',","            alias: 'Math_Symbol',","            bmp: '\\\\x2B\\x3C-\\x3E\\\\x7C\\x7E\\xAC\\xB1\\xD7\\xF7\\u03F6\\u0606-\\u0608\\u2044\\u2052\\u207A-\\u207C\\u208A-\\u208C\\u2118\\u2140-\\u2144\\u214B\\u2190-\\u2194\\u219A\\u219B\\u21A0\\u21A3\\u21A6\\u21AE\\u21CE\\u21CF\\u21D2\\u21D4\\u21F4-\\u22FF\\u2320\\u2321\\u237C\\u239B-\\u23B3\\u23DC-\\u23E1\\u25B7\\u25C1\\u25F8-\\u25FF\\u266F\\u27C0-\\u27C4\\u27C7-\\u27E5\\u27F0-\\u27FF\\u2900-\\u2982\\u2999-\\u29D7\\u29DC-\\u29FB\\u29FE-\\u2AFF\\u2B30-\\u2B44\\u2B47-\\u2B4C\\uFB29\\uFE62\\uFE64-\\uFE66\\uFF0B\\uFF1C-\\uFF1E\\uFF5C\\uFF5E\\uFFE2\\uFFE9-\\uFFEC',","            astral: '\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]|\\uD83B[\\uDEF0\\uDEF1]'","        },","        {","            name: 'So',","            alias: 'Other_Symbol',","            bmp: '\\xA6\\xA9\\xAE\\xB0\\u0482\\u058D\\u058E\\u060E\\u060F\\u06DE\\u06E9\\u06FD\\u06FE\\u07F6\\u09FA\\u0B70\\u0BF3-\\u0BF8\\u0BFA\\u0C7F\\u0D4F\\u0D79\\u0F01-\\u0F03\\u0F13\\u0F15-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE\\u0FCF\\u0FD5-\\u0FD8\\u109E\\u109F\\u1390-\\u1399\\u1940\\u19DE-\\u19FF\\u1B61-\\u1B6A\\u1B74-\\u1B7C\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116\\u2117\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u214A\\u214C\\u214D\\u214F\\u218A\\u218B\\u2195-\\u2199\\u219C-\\u219F\\u21A1\\u21A2\\u21A4\\u21A5\\u21A7-\\u21AD\\u21AF-\\u21CD\\u21D0\\u21D1\\u21D3\\u21D5-\\u21F3\\u2300-\\u2307\\u230C-\\u231F\\u2322-\\u2328\\u232B-\\u237B\\u237D-\\u239A\\u23B4-\\u23DB\\u23E2-\\u23FE\\u2400-\\u2426\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u25B6\\u25B8-\\u25C0\\u25C2-\\u25F7\\u2600-\\u266E\\u2670-\\u2767\\u2794-\\u27BF\\u2800-\\u28FF\\u2B00-\\u2B2F\\u2B45\\u2B46\\u2B4D-\\u2B73\\u2B76-\\u2B95\\u2B98-\\u2BB9\\u2BBD-\\u2BC8\\u2BCA-\\u2BD1\\u2BEC-\\u2BEF\\u2CE5-\\u2CEA\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFB\\u3004\\u3012\\u3013\\u3020\\u3036\\u3037\\u303E\\u303F\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E3\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u32FE\\u3300-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA828-\\uA82B\\uA836\\uA837\\uA839\\uAA77-\\uAA79\\uFDFD\\uFFE4\\uFFE8\\uFFED\\uFFEE\\uFFFC\\uFFFD',","            astral: '\\uD800[\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C-\\uDD8E\\uDD90-\\uDD9B\\uDDA0\\uDDD0-\\uDDFC]|\\uD802[\\uDC77\\uDC78\\uDEC8]|\\uD805\\uDF3F|\\uD81A[\\uDF3C-\\uDF3F\\uDF45]|\\uD82F\\uDC9C|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDE8\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85\\uDE86]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD10-\\uDD2E\\uDD30-\\uDD6B\\uDD70-\\uDDAC\\uDDE6-\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDF00-\\uDFFA]|\\uD83D[\\uDC00-\\uDED2\\uDEE0-\\uDEEC\\uDEF0-\\uDEF6\\uDF00-\\uDF73\\uDF80-\\uDFD4]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDD10-\\uDD1E\\uDD20-\\uDD27\\uDD30\\uDD33-\\uDD3E\\uDD40-\\uDD4B\\uDD50-\\uDD5E\\uDD80-\\uDD91\\uDDC0]'","        },","        {","            name: 'Z',","            alias: 'Separator',","            bmp: '\\x20\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000'","        },","        {","            name: 'Zl',","            alias: 'Line_Separator',","            bmp: '\\u2028'","        },","        {","            name: 'Zp',","            alias: 'Paragraph_Separator',","            bmp: '\\u2029'","        },","        {","            name: 'Zs',","            alias: 'Space_Separator',","            bmp: '\\x20\\xA0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000'","        }","    ]);","","};",""],"l":{"8":1,"21":1,"22":0,"25":1}},"/home/travis/build/npmtest/node-npmtest-xregexp/node_modules/xregexp/src/addons/unicode-properties.js":{"path":"/home/travis/build/npmtest/node-npmtest-xregexp/node_modules/xregexp/src/addons/unicode-properties.js","s":{"1":1,"2":1,"3":0,"4":1,"5":1,"6":1},"b":{"1":[0,1]},"f":{"1":1},"fnMap":{"1":{"name":"(anonymous_1)","line":8,"loc":{"start":{"line":8,"column":17},"end":{"line":8,"column":35}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":106,"column":2}},"2":{"start":{"line":50,"column":4},"end":{"line":52,"column":5}},"3":{"start":{"line":51,"column":8},"end":{"line":51,"column":90}},"4":{"start":{"line":54,"column":4},"end":{"line":94,"column":6}},"5":{"start":{"line":97,"column":4},"end":{"line":102,"column":7}},"6":{"start":{"line":104,"column":4},"end":{"line":104,"column":40}}},"branchMap":{"1":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":4},"end":{"line":50,"column":4}},{"start":{"line":50,"column":4},"end":{"line":50,"column":4}}]}},"code":["/*!"," * XRegExp Unicode Properties 3.2.0"," * <xregexp.com>"," * Steven Levithan (c) 2012-2017 MIT License"," * Unicode data by Mathias Bynens <mathiasbynens.be>"," */","","module.exports = function(XRegExp) {","    'use strict';","","    /**","     * Adds properties to meet the UTS #18 Level 1 RL1.2 requirements for Unicode regex support. See","     * <http://unicode.org/reports/tr18/#RL1.2>. Following are definitions of these properties from","     * UAX #44 <http://unicode.org/reports/tr44/>:","     *","     * - Alphabetic","     *   Characters with the Alphabetic property. Generated from: Lowercase + Uppercase + Lt + Lm +","     *   Lo + Nl + Other_Alphabetic.","     *","     * - Default_Ignorable_Code_Point","     *   For programmatic determination of default ignorable code points. New characters that should","     *   be ignored in rendering (unless explicitly supported) will be assigned in these ranges,","     *   permitting programs to correctly handle the default rendering of such characters when not","     *   otherwise supported.","     *","     * - Lowercase","     *   Characters with the Lowercase property. Generated from: Ll + Other_Lowercase.","     *","     * - Noncharacter_Code_Point","     *   Code points permanently reserved for internal use.","     *","     * - Uppercase","     *   Characters with the Uppercase property. Generated from: Lu + Other_Uppercase.","     *","     * - White_Space","     *   Spaces, separator characters and other control characters which should be treated by","     *   programming languages as \"white space\" for the purpose of parsing elements.","     *","     * The properties ASCII, Any, and Assigned are also included but are not defined in UAX #44. UTS","     * #18 RL1.2 additionally requires support for Unicode scripts and general categories. These are","     * included in XRegExp's Unicode Categories and Unicode Scripts addons.","     *","     * Token names are case insensitive, and any spaces, hyphens, and underscores are ignored.","     *","     * Uses Unicode 9.0.0.","     *","     * @requires XRegExp, Unicode Base","     */","","    if (!XRegExp.addUnicodeData) {","        throw new ReferenceError('Unicode Base must be loaded before Unicode Properties');","    }","","    var unicodeData = [","        {","            name: 'ASCII',","            bmp: '\\0-\\x7F'","        },","        {","            name: 'Alphabetic',","            bmp: 'A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0345\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05B0-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0657\\u0659-\\u065F\\u066E-\\u06D3\\u06D5-\\u06DC\\u06E1-\\u06E8\\u06ED-\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710-\\u073F\\u074D-\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0817\\u081A-\\u082C\\u0840-\\u0858\\u08A0-\\u08B4\\u08B6-\\u08BD\\u08D4-\\u08DF\\u08E3-\\u08E9\\u08F0-\\u093B\\u093D-\\u094C\\u094E-\\u0950\\u0955-\\u0963\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD-\\u09C4\\u09C7\\u09C8\\u09CB\\u09CC\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09F0\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B\\u0A4C\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A70-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB\\u0ACC\\u0AD0\\u0AE0-\\u0AE3\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D-\\u0B44\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD0\\u0BD7\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4C\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCC\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D4E\\u0D54-\\u0D57\\u0D5F-\\u0D63\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E46\\u0E4D\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0ECD\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F81\\u0F88-\\u0F97\\u0F99-\\u0FBC\\u1000-\\u1036\\u1038\\u103B-\\u103F\\u1050-\\u1062\\u1065-\\u1068\\u106E-\\u1086\\u108E\\u109C\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135F\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1713\\u1720-\\u1733\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17B3\\u17B6-\\u17C8\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u1938\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A61-\\u1A74\\u1AA7\\u1B00-\\u1B33\\u1B35-\\u1B43\\u1B45-\\u1B4B\\u1B80-\\u1BA9\\u1BAC-\\u1BAF\\u1BBA-\\u1BE5\\u1BE7-\\u1BF1\\u1C00-\\u1C35\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1DE7-\\u1DF4\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u24B6-\\u24E9\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA674-\\uA67B\\uA67F-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA827\\uA840-\\uA873\\uA880-\\uA8C3\\uA8C5\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA92A\\uA930-\\uA952\\uA960-\\uA97C\\uA980-\\uA9B2\\uA9B4-\\uA9BF\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAABE\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF5\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC',","            astral: '\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC45\\uDC82-\\uDCB8\\uDCD0-\\uDCE8\\uDD00-\\uDD32\\uDD50-\\uDD72\\uDD76\\uDD80-\\uDDBF\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE34\\uDE37\\uDE3E\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEE8\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D-\\uDF44\\uDF47\\uDF48\\uDF4B\\uDF4C\\uDF50\\uDF57\\uDF5D-\\uDF63]|\\uD805[\\uDC00-\\uDC41\\uDC43-\\uDC45\\uDC47-\\uDC4A\\uDC80-\\uDCC1\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDB5\\uDDB8-\\uDDBE\\uDDD8-\\uDDDD\\uDE00-\\uDE3E\\uDE40\\uDE44\\uDE80-\\uDEB5\\uDF00-\\uDF19\\uDF1D-\\uDF2A]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC36\\uDC38-\\uDC3E\\uDC40\\uDC72-\\uDC8F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF93-\\uDF9F\\uDFE0]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9E]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43\\uDD47]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD83C[\\uDD30-\\uDD49\\uDD50-\\uDD69\\uDD70-\\uDD89]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]'","        },","        {","            name: 'Any',","            isBmpLast: true,","            bmp: '\\0-\\uFFFF',","            astral: '[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]'","        },","        {","            name: 'Default_Ignorable_Code_Point',","            bmp: '\\xAD\\u034F\\u061C\\u115F\\u1160\\u17B4\\u17B5\\u180B-\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u206F\\u3164\\uFE00-\\uFE0F\\uFEFF\\uFFA0\\uFFF0-\\uFFF8',","            astral: '\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDD73-\\uDD7A]|[\\uDB40-\\uDB43][\\uDC00-\\uDFFF]'","        },","        {","            name: 'Lowercase',","            bmp: 'a-z\\xAA\\xB5\\xBA\\xDF-\\xF6\\xF8-\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02B8\\u02C0\\u02C1\\u02E0-\\u02E4\\u0345\\u0371\\u0373\\u0377\\u037A-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0529\\u052B\\u052D\\u052F\\u0561-\\u0587\\u13F8-\\u13FD\\u1C80-\\u1C88\\u1D00-\\u1DBF\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6\\u1FC7\\u1FD0-\\u1FD3\\u1FD6\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6\\u1FF7\\u2071\\u207F\\u2090-\\u209C\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146-\\u2149\\u214E\\u2170-\\u217F\\u2184\\u24D0-\\u24E9\\u2C30-\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76-\\u2C7D\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2CEC\\u2CEE\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA699\\uA69B-\\uA69D\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA793-\\uA795\\uA797\\uA799\\uA79B\\uA79D\\uA79F\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7B5\\uA7B7\\uA7F8-\\uA7FA\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABBF\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A',","            astral: '\\uD801[\\uDC28-\\uDC4F\\uDCD8-\\uDCFB]|\\uD803[\\uDCC0-\\uDCF2]|\\uD806[\\uDCC0-\\uDCDF]|\\uD835[\\uDC1A-\\uDC33\\uDC4E-\\uDC54\\uDC56-\\uDC67\\uDC82-\\uDC9B\\uDCB6-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDCCF\\uDCEA-\\uDD03\\uDD1E-\\uDD37\\uDD52-\\uDD6B\\uDD86-\\uDD9F\\uDDBA-\\uDDD3\\uDDEE-\\uDE07\\uDE22-\\uDE3B\\uDE56-\\uDE6F\\uDE8A-\\uDEA5\\uDEC2-\\uDEDA\\uDEDC-\\uDEE1\\uDEFC-\\uDF14\\uDF16-\\uDF1B\\uDF36-\\uDF4E\\uDF50-\\uDF55\\uDF70-\\uDF88\\uDF8A-\\uDF8F\\uDFAA-\\uDFC2\\uDFC4-\\uDFC9\\uDFCB]|\\uD83A[\\uDD22-\\uDD43]'","        },","        {","            name: 'Noncharacter_Code_Point',","            bmp: '\\uFDD0-\\uFDEF\\uFFFE\\uFFFF',","            astral: '[\\uD83F\\uD87F\\uD8BF\\uD8FF\\uD93F\\uD97F\\uD9BF\\uD9FF\\uDA3F\\uDA7F\\uDABF\\uDAFF\\uDB3F\\uDB7F\\uDBBF\\uDBFF][\\uDFFE\\uDFFF]'","        },","        {","            name: 'Uppercase',","            bmp: 'A-Z\\xC0-\\xD6\\xD8-\\xDE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0528\\u052A\\u052C\\u052E\\u0531-\\u0556\\u10A0-\\u10C5\\u10C7\\u10CD\\u13A0-\\u13F5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E\\u213F\\u2145\\u2160-\\u216F\\u2183\\u24B6-\\u24CF\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\u2CF2\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA698\\uA69A\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA792\\uA796\\uA798\\uA79A\\uA79C\\uA79E\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uA7AA-\\uA7AE\\uA7B0-\\uA7B4\\uA7B6\\uFF21-\\uFF3A',","            astral: '\\uD801[\\uDC00-\\uDC27\\uDCB0-\\uDCD3]|\\uD803[\\uDC80-\\uDCB2]|\\uD806[\\uDCA0-\\uDCBF]|\\uD835[\\uDC00-\\uDC19\\uDC34-\\uDC4D\\uDC68-\\uDC81\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB5\\uDCD0-\\uDCE9\\uDD04\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD38\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD6C-\\uDD85\\uDDA0-\\uDDB9\\uDDD4-\\uDDED\\uDE08-\\uDE21\\uDE3C-\\uDE55\\uDE70-\\uDE89\\uDEA8-\\uDEC0\\uDEE2-\\uDEFA\\uDF1C-\\uDF34\\uDF56-\\uDF6E\\uDF90-\\uDFA8\\uDFCA]|\\uD83A[\\uDD00-\\uDD21]|\\uD83C[\\uDD30-\\uDD49\\uDD50-\\uDD69\\uDD70-\\uDD89]'","        },","        {","            name: 'White_Space',","            bmp: '\\x09-\\x0D\\x20\\x85\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000'","        }","    ];","","    // Add non-generated data","    unicodeData.push({","        name: 'Assigned',","        // Since this is defined as the inverse of Unicode category Cn (Unassigned), the Unicode","        // Categories addon is required to use this property","        inverseOf: 'Cn'","    });","","    XRegExp.addUnicodeData(unicodeData);","","};",""],"l":{"8":1,"50":1,"51":0,"54":1,"97":1,"104":1}},"/home/travis/build/npmtest/node-npmtest-xregexp/node_modules/xregexp/src/addons/unicode-scripts.js":{"path":"/home/travis/build/npmtest/node-npmtest-xregexp/node_modules/xregexp/src/addons/unicode-scripts.js","s":{"1":1,"2":1,"3":0,"4":1},"b":{"1":[0,1]},"f":{"1":1},"fnMap":{"1":{"name":"(anonymous_1)","line":8,"loc":{"start":{"line":8,"column":17},"end":{"line":8,"column":35}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":586,"column":2}},"2":{"start":{"line":20,"column":4},"end":{"line":22,"column":5}},"3":{"start":{"line":21,"column":8},"end":{"line":21,"column":87}},"4":{"start":{"line":24,"column":4},"end":{"line":584,"column":7}}},"branchMap":{"1":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":4},"end":{"line":20,"column":4}},{"start":{"line":20,"column":4},"end":{"line":20,"column":4}}]}},"code":["/*!"," * XRegExp Unicode Scripts 3.2.0"," * <xregexp.com>"," * Steven Levithan (c) 2010-2017 MIT License"," * Unicode data by Mathias Bynens <mathiasbynens.be>"," */","","module.exports = function(XRegExp) {","    'use strict';","","    /**","     * Adds support for all Unicode scripts. E.g., `\\p{Latin}`. Token names are case insensitive,","     * and any spaces, hyphens, and underscores are ignored.","     *","     * Uses Unicode 9.0.0.","     *","     * @requires XRegExp, Unicode Base","     */","","    if (!XRegExp.addUnicodeData) {","        throw new ReferenceError('Unicode Base must be loaded before Unicode Scripts');","    }","","    XRegExp.addUnicodeData([","        {","            name: 'Adlam',","            astral: '\\uD83A[\\uDD00-\\uDD4A\\uDD50-\\uDD59\\uDD5E\\uDD5F]'","        },","        {","            name: 'Ahom',","            astral: '\\uD805[\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF3F]'","        },","        {","            name: 'Anatolian_Hieroglyphs',","            astral: '\\uD811[\\uDC00-\\uDE46]'","        },","        {","            name: 'Arabic',","            bmp: '\\u0600-\\u0604\\u0606-\\u060B\\u060D-\\u061A\\u061E\\u0620-\\u063F\\u0641-\\u064A\\u0656-\\u066F\\u0671-\\u06DC\\u06DE-\\u06FF\\u0750-\\u077F\\u08A0-\\u08B4\\u08B6-\\u08BD\\u08D4-\\u08E1\\u08E3-\\u08FF\\uFB50-\\uFBC1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFD\\uFE70-\\uFE74\\uFE76-\\uFEFC',","            astral: '\\uD803[\\uDE60-\\uDE7E]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB\\uDEF0\\uDEF1]'","        },","        {","            name: 'Armenian',","            bmp: '\\u0531-\\u0556\\u0559-\\u055F\\u0561-\\u0587\\u058A\\u058D-\\u058F\\uFB13-\\uFB17'","        },","        {","            name: 'Avestan',","            astral: '\\uD802[\\uDF00-\\uDF35\\uDF39-\\uDF3F]'","        },","        {","            name: 'Balinese',","            bmp: '\\u1B00-\\u1B4B\\u1B50-\\u1B7C'","        },","        {","            name: 'Bamum',","            bmp: '\\uA6A0-\\uA6F7',","            astral: '\\uD81A[\\uDC00-\\uDE38]'","        },","        {","            name: 'Bassa_Vah',","            astral: '\\uD81A[\\uDED0-\\uDEED\\uDEF0-\\uDEF5]'","        },","        {","            name: 'Batak',","            bmp: '\\u1BC0-\\u1BF3\\u1BFC-\\u1BFF'","        },","        {","            name: 'Bengali',","            bmp: '\\u0980-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09FB'","        },","        {","            name: 'Bhaiksuki',","            astral: '\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC36\\uDC38-\\uDC45\\uDC50-\\uDC6C]'","        },","        {","            name: 'Bopomofo',","            bmp: '\\u02EA\\u02EB\\u3105-\\u312D\\u31A0-\\u31BA'","        },","        {","            name: 'Brahmi',","            astral: '\\uD804[\\uDC00-\\uDC4D\\uDC52-\\uDC6F\\uDC7F]'","        },","        {","            name: 'Braille',","            bmp: '\\u2800-\\u28FF'","        },","        {","            name: 'Buginese',","            bmp: '\\u1A00-\\u1A1B\\u1A1E\\u1A1F'","        },","        {","            name: 'Buhid',","            bmp: '\\u1740-\\u1753'","        },","        {","            name: 'Canadian_Aboriginal',","            bmp: '\\u1400-\\u167F\\u18B0-\\u18F5'","        },","        {","            name: 'Carian',","            astral: '\\uD800[\\uDEA0-\\uDED0]'","        },","        {","            name: 'Caucasian_Albanian',","            astral: '\\uD801[\\uDD30-\\uDD63\\uDD6F]'","        },","        {","            name: 'Chakma',","            astral: '\\uD804[\\uDD00-\\uDD34\\uDD36-\\uDD43]'","        },","        {","            name: 'Cham',","            bmp: '\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA5C-\\uAA5F'","        },","        {","            name: 'Cherokee',","            bmp: '\\u13A0-\\u13F5\\u13F8-\\u13FD\\uAB70-\\uABBF'","        },","        {","            name: 'Common',","            bmp: '\\0-\\x40\\\\x5B-\\x60\\\\x7B-\\xA9\\xAB-\\xB9\\xBB-\\xBF\\xD7\\xF7\\u02B9-\\u02DF\\u02E5-\\u02E9\\u02EC-\\u02FF\\u0374\\u037E\\u0385\\u0387\\u0589\\u0605\\u060C\\u061B\\u061C\\u061F\\u0640\\u06DD\\u08E2\\u0964\\u0965\\u0E3F\\u0FD5-\\u0FD8\\u10FB\\u16EB-\\u16ED\\u1735\\u1736\\u1802\\u1803\\u1805\\u1CD3\\u1CE1\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u2000-\\u200B\\u200E-\\u2064\\u2066-\\u2070\\u2074-\\u207E\\u2080-\\u208E\\u20A0-\\u20BE\\u2100-\\u2125\\u2127-\\u2129\\u212C-\\u2131\\u2133-\\u214D\\u214F-\\u215F\\u2189-\\u218B\\u2190-\\u23FE\\u2400-\\u2426\\u2440-\\u244A\\u2460-\\u27FF\\u2900-\\u2B73\\u2B76-\\u2B95\\u2B98-\\u2BB9\\u2BBD-\\u2BC8\\u2BCA-\\u2BD1\\u2BEC-\\u2BEF\\u2E00-\\u2E44\\u2FF0-\\u2FFB\\u3000-\\u3004\\u3006\\u3008-\\u3020\\u3030-\\u3037\\u303C-\\u303F\\u309B\\u309C\\u30A0\\u30FB\\u30FC\\u3190-\\u319F\\u31C0-\\u31E3\\u3220-\\u325F\\u327F-\\u32CF\\u3358-\\u33FF\\u4DC0-\\u4DFF\\uA700-\\uA721\\uA788-\\uA78A\\uA830-\\uA839\\uA92E\\uA9CF\\uAB5B\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE66\\uFE68-\\uFE6B\\uFEFF\\uFF01-\\uFF20\\uFF3B-\\uFF40\\uFF5B-\\uFF65\\uFF70\\uFF9E\\uFF9F\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFF9-\\uFFFD',","            astral: '\\uD800[\\uDD00-\\uDD02\\uDD07-\\uDD33\\uDD37-\\uDD3F\\uDD90-\\uDD9B\\uDDD0-\\uDDFC\\uDEE1-\\uDEFB]|\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD66\\uDD6A-\\uDD7A\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDE8\\uDF00-\\uDF56\\uDF60-\\uDF71]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDFCB\\uDFCE-\\uDFFF]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD00-\\uDD0C\\uDD10-\\uDD2E\\uDD30-\\uDD6B\\uDD70-\\uDDAC\\uDDE6-\\uDDFF\\uDE01\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDED2\\uDEE0-\\uDEEC\\uDEF0-\\uDEF6\\uDF00-\\uDF73\\uDF80-\\uDFD4]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDD10-\\uDD1E\\uDD20-\\uDD27\\uDD30\\uDD33-\\uDD3E\\uDD40-\\uDD4B\\uDD50-\\uDD5E\\uDD80-\\uDD91\\uDDC0]|\\uDB40[\\uDC01\\uDC20-\\uDC7F]'","        },","        {","            name: 'Coptic',","            bmp: '\\u03E2-\\u03EF\\u2C80-\\u2CF3\\u2CF9-\\u2CFF'","        },","        {","            name: 'Cuneiform',","            astral: '\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC70-\\uDC74\\uDC80-\\uDD43]'","        },","        {","            name: 'Cypriot',","            astral: '\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F]'","        },","        {","            name: 'Cyrillic',","            bmp: '\\u0400-\\u0484\\u0487-\\u052F\\u1C80-\\u1C88\\u1D2B\\u1D78\\u2DE0-\\u2DFF\\uA640-\\uA69F\\uFE2E\\uFE2F'","        },","        {","            name: 'Deseret',","            astral: '\\uD801[\\uDC00-\\uDC4F]'","        },","        {","            name: 'Devanagari',","            bmp: '\\u0900-\\u0950\\u0953-\\u0963\\u0966-\\u097F\\uA8E0-\\uA8FD'","        },","        {","            name: 'Duployan',","            astral: '\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9C-\\uDC9F]'","        },","        {","            name: 'Egyptian_Hieroglyphs',","            astral: '\\uD80C[\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]'","        },","        {","            name: 'Elbasan',","            astral: '\\uD801[\\uDD00-\\uDD27]'","        },","        {","            name: 'Ethiopic',","            bmp: '\\u1200-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u137C\\u1380-\\u1399\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E'","        },","        {","            name: 'Georgian',","            bmp: '\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u10FF\\u2D00-\\u2D25\\u2D27\\u2D2D'","        },","        {","            name: 'Glagolitic',","            bmp: '\\u2C00-\\u2C2E\\u2C30-\\u2C5E',","            astral: '\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]'","        },","        {","            name: 'Gothic',","            astral: '\\uD800[\\uDF30-\\uDF4A]'","        },","        {","            name: 'Grantha',","            astral: '\\uD804[\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]'","        },","        {","            name: 'Greek',","            bmp: '\\u0370-\\u0373\\u0375-\\u0377\\u037A-\\u037D\\u037F\\u0384\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03E1\\u03F0-\\u03FF\\u1D26-\\u1D2A\\u1D5D-\\u1D61\\u1D66-\\u1D6A\\u1DBF\\u1F00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FC4\\u1FC6-\\u1FD3\\u1FD6-\\u1FDB\\u1FDD-\\u1FEF\\u1FF2-\\u1FF4\\u1FF6-\\u1FFE\\u2126\\uAB65',","            astral: '\\uD800[\\uDD40-\\uDD8E\\uDDA0]|\\uD834[\\uDE00-\\uDE45]'","        },","        {","            name: 'Gujarati',","            bmp: '\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AF1\\u0AF9'","        },","        {","            name: 'Gurmukhi',","            bmp: '\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75'","        },","        {","            name: 'Han',","            bmp: '\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u3005\\u3007\\u3021-\\u3029\\u3038-\\u303B\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uF900-\\uFA6D\\uFA70-\\uFAD9',","            astral: '[\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]'","        },","        {","            name: 'Hangul',","            bmp: '\\u1100-\\u11FF\\u302E\\u302F\\u3131-\\u318E\\u3200-\\u321E\\u3260-\\u327E\\uA960-\\uA97C\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uFFA0-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC'","        },","        {","            name: 'Hanunoo',","            bmp: '\\u1720-\\u1734'","        },","        {","            name: 'Hatran',","            astral: '\\uD802[\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDCFB-\\uDCFF]'","        },","        {","            name: 'Hebrew',","            bmp: '\\u0591-\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F4\\uFB1D-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFB4F'","        },","        {","            name: 'Hiragana',","            bmp: '\\u3041-\\u3096\\u309D-\\u309F',","            astral: '\\uD82C\\uDC01|\\uD83C\\uDE00'","        },","        {","            name: 'Imperial_Aramaic',","            astral: '\\uD802[\\uDC40-\\uDC55\\uDC57-\\uDC5F]'","        },","        {","            name: 'Inherited',","            bmp: '\\u0300-\\u036F\\u0485\\u0486\\u064B-\\u0655\\u0670\\u0951\\u0952\\u1AB0-\\u1ABE\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DF5\\u1DFB-\\u1DFF\\u200C\\u200D\\u20D0-\\u20F0\\u302A-\\u302D\\u3099\\u309A\\uFE00-\\uFE0F\\uFE20-\\uFE2D',","            astral: '\\uD800[\\uDDFD\\uDEE0]|\\uD834[\\uDD67-\\uDD69\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD]|\\uDB40[\\uDD00-\\uDDEF]'","        },","        {","            name: 'Inscriptional_Pahlavi',","            astral: '\\uD802[\\uDF60-\\uDF72\\uDF78-\\uDF7F]'","        },","        {","            name: 'Inscriptional_Parthian',","            astral: '\\uD802[\\uDF40-\\uDF55\\uDF58-\\uDF5F]'","        },","        {","            name: 'Javanese',","            bmp: '\\uA980-\\uA9CD\\uA9D0-\\uA9D9\\uA9DE\\uA9DF'","        },","        {","            name: 'Kaithi',","            astral: '\\uD804[\\uDC80-\\uDCC1]'","        },","        {","            name: 'Kannada',","            bmp: '\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2'","        },","        {","            name: 'Katakana',","            bmp: '\\u30A1-\\u30FA\\u30FD-\\u30FF\\u31F0-\\u31FF\\u32D0-\\u32FE\\u3300-\\u3357\\uFF66-\\uFF6F\\uFF71-\\uFF9D',","            astral: '\\uD82C\\uDC00'","        },","        {","            name: 'Kayah_Li',","            bmp: '\\uA900-\\uA92D\\uA92F'","        },","        {","            name: 'Kharoshthi',","            astral: '\\uD802[\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F-\\uDE47\\uDE50-\\uDE58]'","        },","        {","            name: 'Khmer',","            bmp: '\\u1780-\\u17DD\\u17E0-\\u17E9\\u17F0-\\u17F9\\u19E0-\\u19FF'","        },","        {","            name: 'Khojki',","            astral: '\\uD804[\\uDE00-\\uDE11\\uDE13-\\uDE3E]'","        },","        {","            name: 'Khudawadi',","            astral: '\\uD804[\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9]'","        },","        {","            name: 'Lao',","            bmp: '\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF'","        },","        {","            name: 'Latin',","            bmp: 'A-Za-z\\xAA\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02B8\\u02E0-\\u02E4\\u1D00-\\u1D25\\u1D2C-\\u1D5C\\u1D62-\\u1D65\\u1D6B-\\u1D77\\u1D79-\\u1DBE\\u1E00-\\u1EFF\\u2071\\u207F\\u2090-\\u209C\\u212A\\u212B\\u2132\\u214E\\u2160-\\u2188\\u2C60-\\u2C7F\\uA722-\\uA787\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA7FF\\uAB30-\\uAB5A\\uAB5C-\\uAB64\\uFB00-\\uFB06\\uFF21-\\uFF3A\\uFF41-\\uFF5A'","        },","        {","            name: 'Lepcha',","            bmp: '\\u1C00-\\u1C37\\u1C3B-\\u1C49\\u1C4D-\\u1C4F'","        },","        {","            name: 'Limbu',","            bmp: '\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1940\\u1944-\\u194F'","        },","        {","            name: 'Linear_A',","            astral: '\\uD801[\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]'","        },","        {","            name: 'Linear_B',","            astral: '\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA]'","        },","        {","            name: 'Lisu',","            bmp: '\\uA4D0-\\uA4FF'","        },","        {","            name: 'Lycian',","            astral: '\\uD800[\\uDE80-\\uDE9C]'","        },","        {","            name: 'Lydian',","            astral: '\\uD802[\\uDD20-\\uDD39\\uDD3F]'","        },","        {","            name: 'Mahajani',","            astral: '\\uD804[\\uDD50-\\uDD76]'","        },","        {","            name: 'Malayalam',","            bmp: '\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4F\\u0D54-\\u0D63\\u0D66-\\u0D7F'","        },","        {","            name: 'Mandaic',","            bmp: '\\u0840-\\u085B\\u085E'","        },","        {","            name: 'Manichaean',","            astral: '\\uD802[\\uDEC0-\\uDEE6\\uDEEB-\\uDEF6]'","        },","        {","            name: 'Marchen',","            astral: '\\uD807[\\uDC70-\\uDC8F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6]'","        },","        {","            name: 'Meetei_Mayek',","            bmp: '\\uAAE0-\\uAAF6\\uABC0-\\uABED\\uABF0-\\uABF9'","        },","        {","            name: 'Mende_Kikakui',","            astral: '\\uD83A[\\uDC00-\\uDCC4\\uDCC7-\\uDCD6]'","        },","        {","            name: 'Meroitic_Cursive',","            astral: '\\uD802[\\uDDA0-\\uDDB7\\uDDBC-\\uDDCF\\uDDD2-\\uDDFF]'","        },","        {","            name: 'Meroitic_Hieroglyphs',","            astral: '\\uD802[\\uDD80-\\uDD9F]'","        },","        {","            name: 'Miao',","            astral: '\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]'","        },","        {","            name: 'Modi',","            astral: '\\uD805[\\uDE00-\\uDE44\\uDE50-\\uDE59]'","        },","        {","            name: 'Mongolian',","            bmp: '\\u1800\\u1801\\u1804\\u1806-\\u180E\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA',","            astral: '\\uD805[\\uDE60-\\uDE6C]'","        },","        {","            name: 'Mro',","            astral: '\\uD81A[\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDE6E\\uDE6F]'","        },","        {","            name: 'Multani',","            astral: '\\uD804[\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA9]'","        },","        {","            name: 'Myanmar',","            bmp: '\\u1000-\\u109F\\uA9E0-\\uA9FE\\uAA60-\\uAA7F'","        },","        {","            name: 'Nabataean',","            astral: '\\uD802[\\uDC80-\\uDC9E\\uDCA7-\\uDCAF]'","        },","        {","            name: 'New_Tai_Lue',","            bmp: '\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u19DE\\u19DF'","        },","        {","            name: 'Newa',","            astral: '\\uD805[\\uDC00-\\uDC59\\uDC5B\\uDC5D]'","        },","        {","            name: 'Nko',","            bmp: '\\u07C0-\\u07FA'","        },","        {","            name: 'Ogham',","            bmp: '\\u1680-\\u169C'","        },","        {","            name: 'Ol_Chiki',","            bmp: '\\u1C50-\\u1C7F'","        },","        {","            name: 'Old_Hungarian',","            astral: '\\uD803[\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDCFA-\\uDCFF]'","        },","        {","            name: 'Old_Italic',","            astral: '\\uD800[\\uDF00-\\uDF23]'","        },","        {","            name: 'Old_North_Arabian',","            astral: '\\uD802[\\uDE80-\\uDE9F]'","        },","        {","            name: 'Old_Permic',","            astral: '\\uD800[\\uDF50-\\uDF7A]'","        },","        {","            name: 'Old_Persian',","            astral: '\\uD800[\\uDFA0-\\uDFC3\\uDFC8-\\uDFD5]'","        },","        {","            name: 'Old_South_Arabian',","            astral: '\\uD802[\\uDE60-\\uDE7F]'","        },","        {","            name: 'Old_Turkic',","            astral: '\\uD803[\\uDC00-\\uDC48]'","        },","        {","            name: 'Oriya',","            bmp: '\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B77'","        },","        {","            name: 'Osage',","            astral: '\\uD801[\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB]'","        },","        {","            name: 'Osmanya',","            astral: '\\uD801[\\uDC80-\\uDC9D\\uDCA0-\\uDCA9]'","        },","        {","            name: 'Pahawh_Hmong',","            astral: '\\uD81A[\\uDF00-\\uDF45\\uDF50-\\uDF59\\uDF5B-\\uDF61\\uDF63-\\uDF77\\uDF7D-\\uDF8F]'","        },","        {","            name: 'Palmyrene',","            astral: '\\uD802[\\uDC60-\\uDC7F]'","        },","        {","            name: 'Pau_Cin_Hau',","            astral: '\\uD806[\\uDEC0-\\uDEF8]'","        },","        {","            name: 'Phags_Pa',","            bmp: '\\uA840-\\uA877'","        },","        {","            name: 'Phoenician',","            astral: '\\uD802[\\uDD00-\\uDD1B\\uDD1F]'","        },","        {","            name: 'Psalter_Pahlavi',","            astral: '\\uD802[\\uDF80-\\uDF91\\uDF99-\\uDF9C\\uDFA9-\\uDFAF]'","        },","        {","            name: 'Rejang',","            bmp: '\\uA930-\\uA953\\uA95F'","        },","        {","            name: 'Runic',","            bmp: '\\u16A0-\\u16EA\\u16EE-\\u16F8'","        },","        {","            name: 'Samaritan',","            bmp: '\\u0800-\\u082D\\u0830-\\u083E'","        },","        {","            name: 'Saurashtra',","            bmp: '\\uA880-\\uA8C5\\uA8CE-\\uA8D9'","        },","        {","            name: 'Sharada',","            astral: '\\uD804[\\uDD80-\\uDDCD\\uDDD0-\\uDDDF]'","        },","        {","            name: 'Shavian',","            astral: '\\uD801[\\uDC50-\\uDC7F]'","        },","        {","            name: 'Siddham',","            astral: '\\uD805[\\uDD80-\\uDDB5\\uDDB8-\\uDDDD]'","        },","        {","            name: 'SignWriting',","            astral: '\\uD836[\\uDC00-\\uDE8B\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]'","        },","        {","            name: 'Sinhala',","            bmp: '\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2-\\u0DF4',","            astral: '\\uD804[\\uDDE1-\\uDDF4]'","        },","        {","            name: 'Sora_Sompeng',","            astral: '\\uD804[\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9]'","        },","        {","            name: 'Sundanese',","            bmp: '\\u1B80-\\u1BBF\\u1CC0-\\u1CC7'","        },","        {","            name: 'Syloti_Nagri',","            bmp: '\\uA800-\\uA82B'","        },","        {","            name: 'Syriac',","            bmp: '\\u0700-\\u070D\\u070F-\\u074A\\u074D-\\u074F'","        },","        {","            name: 'Tagalog',","            bmp: '\\u1700-\\u170C\\u170E-\\u1714'","        },","        {","            name: 'Tagbanwa',","            bmp: '\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773'","        },","        {","            name: 'Tai_Le',","            bmp: '\\u1950-\\u196D\\u1970-\\u1974'","        },","        {","            name: 'Tai_Tham',","            bmp: '\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA0-\\u1AAD'","        },","        {","            name: 'Tai_Viet',","            bmp: '\\uAA80-\\uAAC2\\uAADB-\\uAADF'","        },","        {","            name: 'Takri',","            astral: '\\uD805[\\uDE80-\\uDEB7\\uDEC0-\\uDEC9]'","        },","        {","            name: 'Tamil',","            bmp: '\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BFA'","        },","        {","            name: 'Tangut',","            astral: '\\uD81B\\uDFE0|[\\uD81C-\\uD820][\\uDC00-\\uDFFF]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]'","        },","        {","            name: 'Telugu',","            bmp: '\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C78-\\u0C7F'","        },","        {","            name: 'Thaana',","            bmp: '\\u0780-\\u07B1'","        },","        {","            name: 'Thai',","            bmp: '\\u0E01-\\u0E3A\\u0E40-\\u0E5B'","        },","        {","            name: 'Tibetan',","            bmp: '\\u0F00-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F97\\u0F99-\\u0FBC\\u0FBE-\\u0FCC\\u0FCE-\\u0FD4\\u0FD9\\u0FDA'","        },","        {","            name: 'Tifinagh',","            bmp: '\\u2D30-\\u2D67\\u2D6F\\u2D70\\u2D7F'","        },","        {","            name: 'Tirhuta',","            astral: '\\uD805[\\uDC80-\\uDCC7\\uDCD0-\\uDCD9]'","        },","        {","            name: 'Ugaritic',","            astral: '\\uD800[\\uDF80-\\uDF9D\\uDF9F]'","        },","        {","            name: 'Vai',","            bmp: '\\uA500-\\uA62B'","        },","        {","            name: 'Warang_Citi',","            astral: '\\uD806[\\uDCA0-\\uDCF2\\uDCFF]'","        },","        {","            name: 'Yi',","            bmp: '\\uA000-\\uA48C\\uA490-\\uA4C6'","        }","    ]);","","};",""],"l":{"8":1,"20":1,"21":0,"24":1}}}